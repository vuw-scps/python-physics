{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Short Python tutorials for physics (under construction) Acknowledgments and further resources This website is currently a template copied from the excellent resources at http://www.math.ubc.ca/~pwalls/math-python/ and the associated notebooks ; we'll soon be adding our own content with the following topics: Planned content General Python programming installation, first steps numerical libraries for loops, conditionals, etc. basic plotting Recipes for data import, plotting import data from text files, batch processing basic data manipulations, Pandas, tidy data plotting, error bars, chart types, grammar of graphics, tuning matplotlib, plotly Recipes for simple numerical modelling peak finding integration differentiation special functions linear and nonlinear optimisation SVD, PCA solving ODEs Worked-through examples from our Physics labs phys304 spherical harmonics For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Build and deploy to gh-pages. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \\LaTeX \\LaTeX test \\beta\\gg\\alpha \\beta\\gg\\alpha","title":"Short Python tutorials for physics"},{"location":"#short-python-tutorials-for-physics","text":"(under construction)","title":"Short Python tutorials for physics"},{"location":"#acknowledgments-and-further-resources","text":"This website is currently a template copied from the excellent resources at http://www.math.ubc.ca/~pwalls/math-python/ and the associated notebooks ; we'll soon be adding our own content with the following topics:","title":"Acknowledgments and further resources"},{"location":"#planned-content","text":"","title":"Planned content"},{"location":"#general-python-programming","text":"installation, first steps numerical libraries for loops, conditionals, etc. basic plotting","title":"General Python programming"},{"location":"#recipes-for-data-import-plotting","text":"import data from text files, batch processing basic data manipulations, Pandas, tidy data plotting, error bars, chart types, grammar of graphics, tuning matplotlib, plotly","title":"Recipes for data import, plotting"},{"location":"#recipes-for-simple-numerical-modelling","text":"peak finding integration differentiation special functions linear and nonlinear optimisation SVD, PCA solving ODEs","title":"Recipes for simple numerical modelling"},{"location":"#worked-through-examples-from-our-physics-labs","text":"phys304 spherical harmonics For full documentation visit mkdocs.org .","title":"Worked-through examples from our Physics labs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Build and deploy to gh-pages. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#latexlatex-test","text":"\\beta\\gg\\alpha \\beta\\gg\\alpha","title":"\\LaTeX\\LaTeX test"},{"location":"phys221/Multiplots/","text":"Molecular Speeds lab Python data analysis - multiple gas dataset processing Take a look at the example code you have been given - or start to workthrough from here. Let's begin by importing all the modules we will need at the top of the code and adding in the variables that we know we will need for the analysis. import numpy as np from matplotlib import pyplot as plt from math import log import math V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 What we are going to do here is run a for loop over all the code we wrote for all files in a specific folder. This will be the folder we are in, so make sure that's where you are and you have all the data from the workshop folder. To start with we need to import the other modules we are going to use. os (or Miscellaneous Operating system interfaces) Lets us look up file paths and folder locations Glob lets us find all files matching a pattern These are file organisation tools. You can look up more about them if you like. import os import glob The first thing we want to do is set the location of our folder which is where the script is stored i.e. CWD or current working directory. folder = os.getcwd() Now we know where the files are stored we need to set the pattern (or type of files) for Glob to look for. fileformat=folder+str('/*.csv') This will make the script only look for csv files in the correct folder. We now want to create an array of the filenames, these are named after the gasses and mass numbers. files = glob.glob(fileformat) Create an array of masses from filenames to use later, as filenames are strings we need to set them as intergers. Note that -ve indicies run from the end. masses = [int(f[-6:-4]) for f in files] It might not be totally clear what this is doing unless we print the output. print(files) ['C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Argon 38.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Carbon Dioxide 40.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Chlorine 71.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Fluorine 38.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Krypton 84.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Methane 16.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Neon 17.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Nitrogen 28.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Oxygen 32.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Sulphur Dioxide 64.csv'] argh!!! depending on your filing system this might look horrible... print(masses) [38, 40, 71, 38, 84, 16, 17, 28, 32, 64] but hopefully this helps to see what has gone on. We have taken the string from the file name and turned them into an integer. To do this we counted back from the end of the file name... We now need to find out how many files we have in the folder. We know how to do that already. n=len(files) We also need to create an empty array to populate later. v=np.zeros(n) We now want to simply run though the previous code (in the single gas experiment) for all of the files in the folder. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] note, we no longer have cats... ;-) compare this to your previous code. It is the same, just compressed. Now I am adding on to this and plotting the data. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers <matplotlib.collections.PathCollection at 0x2501a8d68d0> #now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity') Putting these last two parts together we find (this will be what comes up in Spyder. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers #now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity')","title":"Molecular Speeds lab Python data analysis - multiple gas dataset processing"},{"location":"phys221/Multiplots/#molecular-speeds-lab-python-data-analysis-multiple-gas-dataset-processing","text":"Take a look at the example code you have been given - or start to workthrough from here. Let's begin by importing all the modules we will need at the top of the code and adding in the variables that we know we will need for the analysis. import numpy as np from matplotlib import pyplot as plt from math import log import math V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 What we are going to do here is run a for loop over all the code we wrote for all files in a specific folder. This will be the folder we are in, so make sure that's where you are and you have all the data from the workshop folder. To start with we need to import the other modules we are going to use. os (or Miscellaneous Operating system interfaces) Lets us look up file paths and folder locations Glob lets us find all files matching a pattern These are file organisation tools. You can look up more about them if you like. import os import glob The first thing we want to do is set the location of our folder which is where the script is stored i.e. CWD or current working directory. folder = os.getcwd() Now we know where the files are stored we need to set the pattern (or type of files) for Glob to look for. fileformat=folder+str('/*.csv') This will make the script only look for csv files in the correct folder. We now want to create an array of the filenames, these are named after the gasses and mass numbers. files = glob.glob(fileformat) Create an array of masses from filenames to use later, as filenames are strings we need to set them as intergers. Note that -ve indicies run from the end. masses = [int(f[-6:-4]) for f in files] It might not be totally clear what this is doing unless we print the output. print(files) ['C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Argon 38.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Carbon Dioxide 40.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Chlorine 71.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Fluorine 38.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Krypton 84.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Methane 16.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Neon 17.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Nitrogen 28.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Oxygen 32.csv', 'C:\\\\Users\\\\plankna\\\\Desktop\\\\PythonWorkshop\\\\Intro_documents\\\\Multiple\\\\Sulphur Dioxide 64.csv'] argh!!! depending on your filing system this might look horrible... print(masses) [38, 40, 71, 38, 84, 16, 17, 28, 32, 64] but hopefully this helps to see what has gone on. We have taken the string from the file name and turned them into an integer. To do this we counted back from the end of the file name... We now need to find out how many files we have in the folder. We know how to do that already. n=len(files) We also need to create an empty array to populate later. v=np.zeros(n) We now want to simply run though the previous code (in the single gas experiment) for all of the files in the folder. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] note, we no longer have cats... ;-) compare this to your previous code. It is the same, just compressed. Now I am adding on to this and plotting the data. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers <matplotlib.collections.PathCollection at 0x2501a8d68d0> #now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity') Putting these last two parts together we find (this will be what comes up in Spyder. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers #now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity')","title":"Molecular Speeds lab Python data analysis - multiple gas dataset processing"},{"location":"phys221/Single_exp/","text":"Molecular Speeds lab Python data analysis - single gas dataset processing Start a new Code in the folder that contains the file \u2018Nitrogen 28_2.csv\u2019 I have given you an example of the full code in the workshop folder. Remember that we can 'comment out' code by using a # so the program won't try to run it. As you read through you'll see lots of print commands commented out, these were included to check the code was working. The first thing we want to do is define some constants that we will use later on. These will be the Volume of the bulb, the area of the opening and the pressure at which the effusion regime begins. You were asked to calculate some of these in the pre-workshop exercise as I reminder of the PHYS223 lab. So let\u2019s write the first piece of the code and set up same values to use later on (note capital V we are using here). V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 Let\u2019s check that worked by printing one of the variables print(V) 0.0020299999999999997 To start of with we need to call up the packages that help us handle our data. packages are bunches of functions that can be imported all at the same time for later use. The package we want is called \u2018numpy\u2019 so let\u2019s import that now. import numpy as np Now we want to import a module to help with plotting. Some of this may be in a slightly different order to the example .py code. Does that matter? from matplotlib import pyplot as plt We also want to load up the data that we have in our CSVs. If you remember back to the experiment the data is pressure as a function of time. Now we want to use numpy to import our data, the command we are going to use is called \u2018genfromtext\u2019. We will import the data into a variable, called rawdata: rawdata=np.genfromtxt(\"Nitrogen 28_2.csv\", delimiter=\"cat\") Hold on... What's this cat? note that the delimiter argument tells Python how the data is separated, just to prove a point I\u2019ve replaced all the commas, which are normally used to separate data, with the word \u2018cat\u2019. This seems silly, does it really help me learn? Hopefully. And think back to this when you move onto the multiple data example next. Now let\u2019s print the variable \u2018rawdata\u2019 print(rawdata) [[0.00000000e+00 3.91587981e+00] [1.00000000e+00 3.90860622e+00] [2.00000000e+00 3.89163795e+00] ... [2.28100000e+03 6.10025760e-02] [2.28200000e+03 6.10025760e-02] [2.28300000e+03 6.24196670e-02]] This looks good and along the lines of what you expect. It really makes sense to throw in a few tests here and there to make sure that the code is doing what you expect. Now we want to split this array up into two vectors, one for time and one for pressure, we can do that using the indexing we learned before. time=rawdata[:,0] pressure=rawdata[:,1] This \" : \" means [ first_row:last_row , column_0 ]. If you have a 2-dimensional list/matrix/array, this notation will give you all the values in column 0 (from all rows). We should probably test what's happening here, just to be sure... print(time) print(pressure) [0.000e+00 1.000e+00 2.000e+00 ... 2.281e+03 2.282e+03 2.283e+03] [3.91587981 3.90860622 3.89163795 ... 0.06100258 0.06100258 0.06241967] It's quite tricky to see what's really going on here, so let's plot it out to get a better idea. plt.figure(1) plt.plot(time,pressure) plt.xlabel(\"time (s)\") plt.ylabel(\"Pressure (Pa)\") Text(0, 0.5, 'Pressure (Pa)') Note that I am planning on having multiple figures so I have given this one a number. This should help as we move along.I even remembered to label my axes and to put in units. If you remember back to the experiment and what we actually have to do to from the basis of our analysis here, we need to find the minimum pressure we reached. To do this we will use an inbuilt python function \u2018min\u2019 and set the result as a new variable \u2018baseP\u2019. baseP=min(rawdata[:,1]) print(baseP) 0.061002576 Have a bit of a think about what that function is doing. It is going from the first data point and last data point in our pressure column (here 1) and finding the minimum. If you want to know more you can easily google this function and see how it operates. We are now going to use a list comprehension to subtract the base pressure from each value in \u2018Pressure\u2019 as we will need to take the log of this later (everyone remembers the experiment and you all definitely read ahead to see where this is going...). We therefore want to avoid 0 values, and as baseP is in \u2018Pressure\u2019 it will return a zero, so we can just multiply it by 0.99 to avoid this. P_minus_baseP=[i-0.99*baseP for i in pressure] print(P_minus_baseP) - do this at your peril. It gives a big list... Now we have our pressure minus base pressure we need to find the point at which the effusion regime begins, to do this we are going to make a new vector of residuals. We already know the pressure at which the effusion regime begins, we called it \u2018ef_begin\u2019, what we don't know is the INDEX of this value in the pressure vector. We are going to find this using residuals. This vector \u2018Res\u2019 will be a vector where we take the value we are looking for \u2018ef_begin\u2019 from all values of the pressure vector the smallest value of this vector will have an index equal to that of when the effusion regime begins, in the vector \u2018Pressure\u2019. res=[abs(i-ef_begin) for i in P_minus_baseP] You should recognice the look comprehension in the line above. We've made a new array as described above. We now need to take the minimum value. minres=min(res) print(minres) 0.00043142575999999266 I get 0.00043142575999999266, you should get something similar\u2026. Or the same. We now need to find the index of the minimum value, for this we will use a for loop, we want the loop to run for as many entries as we have in res so we can make it run for \u2018len(res)\u2019 we then want to use an if statement, so when \u2018res[i]=minres\u2019 we assign that \u2018I\u2019 to a variable, then stop. Just take a moment and think that through. Can you write it yourself? for i in range (len(res)): if res[i]==minres: Peff_index=i break print(Peff_index) 691 Now we have the value of the index where the effusion regime begins we can move on. The next step is to take the log of our data, to do this we need to import another module called \u2018math\u2019. Maybe we could have added that to the top with numpy and matplotlib, but here we are. from math import log import math We are going to use another list comprehension to create a new vector with all the logged values LogP=[log(i) for i in P_minus_baseP] print(LogP) - if you want to check things. I find it better to plot. Especially as you have your own data that you can double check against. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") Text(0, 0.5, 'log Pressure (Pa)') We can also plot only the data after we reach the effusion regime, on the same figure, the \u2018r\u2019 makes it red. plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fca48843e10>] Actually, in spyder that just plots ontop.. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fca88a9e790>] Here in the Jupyter environment I had to put them together in one code section. So if anyone is using Jupyter you will have to do what I just did here. Now I want to fit a trend line to the section of the data in the effusion regime. To do this I'll use a fitting tool and create a new variable. fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) It is worth having a bit of a think about what this polyfit is doing. It is a numpy function. polyfit(x,y, degree of polynomial). What is 1400 representing? Why is that the cut-off? Maybe take a look at your own lab report. But the plot here is helpful too I think. Now is probably a good time for another print... print(fit[0]) print(fit[1]) -0.0032100701686121782 0.8597164594476661 We were fitting a straight line! The fit function returns two values, one is the gradient and one is the intercept, we can make these into their own variable. m=fit[0] c=fit[1] Now we can plot this. plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fca68e3b250>] For me, I need to plot it ontop of the existing plots again. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fca48899f90>] Hopefully you can see it all, and the small black dashes. You can look up the plot instructions to see what k means. We now can calculate the velocity of the nitrogen from the fit. Which remember, is the reason we\u2019ve done all this work... and let's print it. v=-4*V*m/A print(v) 469.5579056720142 Do you get the same? Does it agree with your lab report?","title":"Molecular Speeds lab Python data analysis - single gas dataset processing"},{"location":"phys221/Single_exp/#molecular-speeds-lab-python-data-analysis-single-gas-dataset-processing","text":"Start a new Code in the folder that contains the file \u2018Nitrogen 28_2.csv\u2019 I have given you an example of the full code in the workshop folder. Remember that we can 'comment out' code by using a # so the program won't try to run it. As you read through you'll see lots of print commands commented out, these were included to check the code was working. The first thing we want to do is define some constants that we will use later on. These will be the Volume of the bulb, the area of the opening and the pressure at which the effusion regime begins. You were asked to calculate some of these in the pre-workshop exercise as I reminder of the PHYS223 lab. So let\u2019s write the first piece of the code and set up same values to use later on (note capital V we are using here). V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 Let\u2019s check that worked by printing one of the variables print(V) 0.0020299999999999997 To start of with we need to call up the packages that help us handle our data. packages are bunches of functions that can be imported all at the same time for later use. The package we want is called \u2018numpy\u2019 so let\u2019s import that now. import numpy as np Now we want to import a module to help with plotting. Some of this may be in a slightly different order to the example .py code. Does that matter? from matplotlib import pyplot as plt We also want to load up the data that we have in our CSVs. If you remember back to the experiment the data is pressure as a function of time. Now we want to use numpy to import our data, the command we are going to use is called \u2018genfromtext\u2019. We will import the data into a variable, called rawdata: rawdata=np.genfromtxt(\"Nitrogen 28_2.csv\", delimiter=\"cat\") Hold on... What's this cat? note that the delimiter argument tells Python how the data is separated, just to prove a point I\u2019ve replaced all the commas, which are normally used to separate data, with the word \u2018cat\u2019. This seems silly, does it really help me learn? Hopefully. And think back to this when you move onto the multiple data example next. Now let\u2019s print the variable \u2018rawdata\u2019 print(rawdata) [[0.00000000e+00 3.91587981e+00] [1.00000000e+00 3.90860622e+00] [2.00000000e+00 3.89163795e+00] ... [2.28100000e+03 6.10025760e-02] [2.28200000e+03 6.10025760e-02] [2.28300000e+03 6.24196670e-02]] This looks good and along the lines of what you expect. It really makes sense to throw in a few tests here and there to make sure that the code is doing what you expect. Now we want to split this array up into two vectors, one for time and one for pressure, we can do that using the indexing we learned before. time=rawdata[:,0] pressure=rawdata[:,1] This \" : \" means [ first_row:last_row , column_0 ]. If you have a 2-dimensional list/matrix/array, this notation will give you all the values in column 0 (from all rows). We should probably test what's happening here, just to be sure... print(time) print(pressure) [0.000e+00 1.000e+00 2.000e+00 ... 2.281e+03 2.282e+03 2.283e+03] [3.91587981 3.90860622 3.89163795 ... 0.06100258 0.06100258 0.06241967] It's quite tricky to see what's really going on here, so let's plot it out to get a better idea. plt.figure(1) plt.plot(time,pressure) plt.xlabel(\"time (s)\") plt.ylabel(\"Pressure (Pa)\") Text(0, 0.5, 'Pressure (Pa)') Note that I am planning on having multiple figures so I have given this one a number. This should help as we move along.I even remembered to label my axes and to put in units. If you remember back to the experiment and what we actually have to do to from the basis of our analysis here, we need to find the minimum pressure we reached. To do this we will use an inbuilt python function \u2018min\u2019 and set the result as a new variable \u2018baseP\u2019. baseP=min(rawdata[:,1]) print(baseP) 0.061002576 Have a bit of a think about what that function is doing. It is going from the first data point and last data point in our pressure column (here 1) and finding the minimum. If you want to know more you can easily google this function and see how it operates. We are now going to use a list comprehension to subtract the base pressure from each value in \u2018Pressure\u2019 as we will need to take the log of this later (everyone remembers the experiment and you all definitely read ahead to see where this is going...). We therefore want to avoid 0 values, and as baseP is in \u2018Pressure\u2019 it will return a zero, so we can just multiply it by 0.99 to avoid this. P_minus_baseP=[i-0.99*baseP for i in pressure] print(P_minus_baseP) - do this at your peril. It gives a big list... Now we have our pressure minus base pressure we need to find the point at which the effusion regime begins, to do this we are going to make a new vector of residuals. We already know the pressure at which the effusion regime begins, we called it \u2018ef_begin\u2019, what we don't know is the INDEX of this value in the pressure vector. We are going to find this using residuals. This vector \u2018Res\u2019 will be a vector where we take the value we are looking for \u2018ef_begin\u2019 from all values of the pressure vector the smallest value of this vector will have an index equal to that of when the effusion regime begins, in the vector \u2018Pressure\u2019. res=[abs(i-ef_begin) for i in P_minus_baseP] You should recognice the look comprehension in the line above. We've made a new array as described above. We now need to take the minimum value. minres=min(res) print(minres) 0.00043142575999999266 I get 0.00043142575999999266, you should get something similar\u2026. Or the same. We now need to find the index of the minimum value, for this we will use a for loop, we want the loop to run for as many entries as we have in res so we can make it run for \u2018len(res)\u2019 we then want to use an if statement, so when \u2018res[i]=minres\u2019 we assign that \u2018I\u2019 to a variable, then stop. Just take a moment and think that through. Can you write it yourself? for i in range (len(res)): if res[i]==minres: Peff_index=i break print(Peff_index) 691 Now we have the value of the index where the effusion regime begins we can move on. The next step is to take the log of our data, to do this we need to import another module called \u2018math\u2019. Maybe we could have added that to the top with numpy and matplotlib, but here we are. from math import log import math We are going to use another list comprehension to create a new vector with all the logged values LogP=[log(i) for i in P_minus_baseP] print(LogP) - if you want to check things. I find it better to plot. Especially as you have your own data that you can double check against. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") Text(0, 0.5, 'log Pressure (Pa)') We can also plot only the data after we reach the effusion regime, on the same figure, the \u2018r\u2019 makes it red. plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fca48843e10>] Actually, in spyder that just plots ontop.. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fca88a9e790>] Here in the Jupyter environment I had to put them together in one code section. So if anyone is using Jupyter you will have to do what I just did here. Now I want to fit a trend line to the section of the data in the effusion regime. To do this I'll use a fitting tool and create a new variable. fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) It is worth having a bit of a think about what this polyfit is doing. It is a numpy function. polyfit(x,y, degree of polynomial). What is 1400 representing? Why is that the cut-off? Maybe take a look at your own lab report. But the plot here is helpful too I think. Now is probably a good time for another print... print(fit[0]) print(fit[1]) -0.0032100701686121782 0.8597164594476661 We were fitting a straight line! The fit function returns two values, one is the gradient and one is the intercept, we can make these into their own variable. m=fit[0] c=fit[1] Now we can plot this. plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fca68e3b250>] For me, I need to plot it ontop of the existing plots again. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fca48899f90>] Hopefully you can see it all, and the small black dashes. You can look up the plot instructions to see what k means. We now can calculate the velocity of the nitrogen from the fit. Which remember, is the reason we\u2019ve done all this work... and let's print it. v=-4*V*m/A print(v) 469.5579056720142 Do you get the same? Does it agree with your lab report?","title":"Molecular Speeds lab Python data analysis - single gas dataset processing"},{"location":"phys304/Ylm/","text":"adapted from https://scipython.com/book/chapter-8-scipy/examples/visualizing-the-spherical-harmonics/ Required dependencies import numpy as np import scipy as sp from scipy.special import sph_harm Spherical grid ## first, evaluate the potential on a fine grid # at r=10. R = 10. Np = 36 Nt=18 theta = -np.arccos(np.linspace(-1, 1, Nt)) phi = np.linspace(0, 2*np.pi, Np) theta, phi = np.meshgrid(theta, phi) x = R * np.sin(theta) * np.cos(phi) y = R * np.sin(theta) * np.sin(phi) z = R * np.cos(theta) Spherical harmonics m = 0 l = 1 Y01 = 1/R**2 * sph_harm(m, l, phi, theta).real Plotting (static) import matplotlib.pyplot as plt from matplotlib import cm, colors from mpl_toolkits.mplot3d import Axes3D fmax, fmin = Y01.max(), Y01.min() Y01 = (Y01 - fmin)/(fmax - fmin) # Set the aspect ratio to 1 so our sphere looks spherical fig = plt.figure(figsize=plt.figaspect(1.)) ax = fig.add_subplot(111, projection='3d') ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=cm.seismic(Y01)) # Turn off the axis planes ax.set_axis_off() plt.show() Plotting (interactive) import plotly.graph_objects as go import chart_studio.plotly as py fig = go.Figure() fig.add_trace(go.Surface(x=x, y=y, z=z, surfacecolor=Y01, showscale=False, colorscale='PrGN')) fig.show() require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"ef403284-6a59-48e2-b0f4-de24074c0eb6\")) { Plotly.newPlot( 'ef403284-6a59-48e2-b0f4-de24074c0eb6', [{\"colorscale\": [[0.0, \"rgb(64,0,75)\"], [0.1, \"rgb(118,42,131)\"], [0.2, \"rgb(153,112,171)\"], [0.3, \"rgb(194,165,207)\"], [0.4, \"rgb(231,212,232)\"], [0.5, \"rgb(247,247,247)\"], [0.6, \"rgb(217,240,211)\"], [0.7, \"rgb(166,219,160)\"], [0.8, \"rgb(90,174,97)\"], [0.9, \"rgb(27,120,55)\"], [1.0, \"rgb(0,68,27)\"]], \"showscale\": false, \"surfacecolor\": [[0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0]], \"type\": \"surface\", \"x\": [[-1.2246467991473533e-15, -4.705882352941178, -6.443794794178425, -7.624400821656306, -8.483650059915268, -9.112901991076274, -9.557692240748189, -9.843059135695006, -9.982683969692435, -9.982683969692435, -9.843059135695006, -9.557692240748189, -9.112901991076276, -8.483650059915268, -7.624400821656307, -6.443794794178426, -4.7058823529411775, -0.0], [-1.204966221263684e-15, -4.630256887522965, -6.340240360849969, -7.501873563763343, -8.34731431326717, -8.966453907019313, -9.40409619439168, -9.68487712593637, -9.822258131409612, -9.822258131409612, -9.68487712593637, -9.40409619439168, -8.966453907019314, -8.34731431326717, -7.501873563763344, -6.34024036084997, -4.630256887522965, -0.0], [-1.1465570375790906e-15, -4.405811155951707, -6.032905385556649, -7.138229916968898, -7.94268901639757, -8.5318166167679, -8.9482447586313, -9.215415196606697, -9.346136835002374, -9.346136835002374, -9.215415196606697, -8.9482447586313, -8.531816616767902, -7.94268901639757, -7.138229916968899, -6.03290538555665, -4.405811155951706, -0.0], [-1.0512965673164322e-15, -4.039759028714665, -5.531667867280454, -6.545157687287933, -7.282779159274661, -7.822959720451471, -8.204789373688198, -8.449762240389205, -8.569623010691158, -8.569623010691158, -8.449762240389205, -8.204789373688198, -7.822959720451473, -7.282779159274661, -6.545157687287934, -5.531667867280454, -4.0397590287146645, -0.0], [-9.22246560370527e-16, -3.5438657223699352, -4.852637992278383, -5.74171870416385, -6.388794787682013, -6.862666461967035, -7.197625307351576, -7.412526973278074, -7.517674451707029, -7.517674451707029, -7.412526973278074, -7.197625307351576, -6.862666461967036, -6.388794787682013, -5.741718704163851, -4.8526379922783835, -3.543865722369935, -0.0], [-7.635547901473156e-16, -2.934069655805806, -4.0176403394406455, -4.753736157586056, -5.289469294895404, -5.681801456774205, -5.9591236414108435, -6.137046990198277, -6.224101650281892, -6.224101650281892, -6.137046990198277, -5.9591236414108435, -5.681801456774206, -5.289469294895404, -4.753736157586056, -4.0176403394406455, -2.9340696558058057, -0.0], [-5.803217407137954e-16, -2.229970176343524, -3.053512420367802, -3.612964619516306, -4.020135906781023, -4.318318677758841, -4.529090838451902, -4.664317267274423, -4.730481100608799, -4.730481100608799, -4.664317267274423, -4.529090838451902, -4.318318677758842, -4.020135906781023, -3.6129646195163065, -3.0535124203678023, -2.2299701763435236, -0.0], [-3.7843667304341507e-16, -1.4541976205879885, -1.99124209966595, -2.3560694258181116, -2.621592042843859, -2.8160415833158643, -2.953489329396762, -3.041672549567339, -3.084818996109325, -3.084818996109325, -3.041672549567339, -2.953489329396762, -2.816041583315865, -2.621592042843859, -2.3560694258181116, -1.9912420996659503, -1.4541976205879883, -0.0], [-1.6438833932268765e-16, -0.6316859567889674, -0.8649716194813774, -1.023448222193742, -1.1387880535965753, -1.2232545953383838, -1.2829602431556952, -1.3212659734206502, -1.340008270877373, -1.340008270877373, -1.3212659734206502, -1.2829602431556952, -1.223254595338384, -1.1387880535965753, -1.0234482221937422, -0.8649716194813775, -0.6316859567889673, -0.0], [5.4943570883047055e-17, 0.21112861341418768, 0.28909976025434586, 0.3420674493879363, 0.3806175206912337, 0.40884880183050615, 0.42880424092359976, 0.44160717825304185, 0.4478714227430553, 0.4478714227430553, 0.44160717825304185, 0.42880424092359976, 0.4088488018305062, 0.3806175206912337, 0.3420674493879363, 0.2890997602543459, 0.21112861341418762, 0.0], [2.7250954951287997e-16, 1.047157336265009, 1.4338792358234194, 1.6965887916922517, 1.8877897346908876, 2.027811462106649, 2.1267866038783056, 2.190286711862085, 2.221356160326688, 2.221356160326688, 2.190286711862085, 2.1267866038783056, 2.0278114621066496, 1.8877897346908876, 1.696588791692252, 1.4338792358234196, 1.0471573362650088, 0.0], [4.813168469997646e-16, 1.849529560724347, 2.5325726529533634, 2.9965803742736705, 3.3342868333390085, 3.5815985935018557, 3.7564122954585164, 3.868568628377971, 3.9234446831794845, 3.9234446831794845, 3.868568628377971, 3.7564122954585164, 3.581598593501856, 3.3342868333390085, 2.996580374273671, 2.5325726529533634, 1.8495295607243465, 0.0], [6.74654224995256e-16, 2.5924563833040124, 3.549867101209666, 4.200259398031388, 4.673617209703269, 5.020270199152773, 5.265303805076358, 5.422511566108919, 5.4994304656938535, 5.4994304656938535, 5.422511566108919, 5.265303805076358, 5.020270199152774, 4.673617209703269, 4.200259398031389, 3.5498671012096663, 2.592456383304012, 0.0], [8.463076610920545e-16, 3.2520595246440696, 4.45306589999271, 5.2689386287514335, 5.862733683482618, 6.2975861899108425, 6.604964118092644, 6.802170520447748, 6.898660028094362, 6.898660028094362, 6.802170520447748, 6.604964118092644, 6.297586189910843, 5.862733683482618, 5.268938628751434, 4.45306589999271, 3.252059524644069, 0.0], [9.907600726170915e-16, 3.8071387970585775, 5.213139496755161, 6.168269836646264, 6.863417072801492, 7.3724925788540006, 7.732335449770855, 7.96320211741484, 8.07616098095554, 8.07616098095554, 7.96320211741484, 7.732335449770855, 7.372492578854002, 6.863417072801492, 6.168269836646265, 5.213139496755162, 3.8071387970585766, 0.0], [1.103368640208112e-15, 4.239853496011386, 5.8056585007064365, 6.8693477767219555, 7.643504590162149, 8.210440990205692, 8.61118315790663, 8.868289846183693, 8.99408747480142, 8.99408747480142, 8.868289846183693, 8.61118315790663, 8.210440990205694, 7.643504590162149, 6.869347776721956, 5.805658500706437, 4.239853496011385, 0.0], [1.1805140318481027e-15, 4.536295815039312, 6.211578863533282, 7.349639227135627, 8.177923580898469, 8.784499072558821, 9.213260354042184, 9.48834344244301, 9.622936596847355, 9.622936596847355, 9.48834344244301, 9.213260354042184, 8.784499072558823, 8.177923580898469, 7.3496392271356275, 6.2115788635332825, 4.536295815039311, 0.0], [1.2197167311743145e-15, 4.686937854095245, 6.417853970782054, 7.59370722548586, 8.449497378926777, 9.076216126810001, 9.519215781702952, 9.803433873427222, 9.942496618892013, 9.942496618892013, 9.803433873427222, 9.519215781702952, 9.076216126810003, 8.449497378926777, 7.593707225485861, 6.417853970782055, 4.686937854095244, 0.0], [1.2197167311743145e-15, 4.686937854095245, 6.417853970782054, 7.59370722548586, 8.449497378926777, 9.076216126810001, 9.519215781702952, 9.803433873427222, 9.942496618892013, 9.942496618892013, 9.803433873427222, 9.519215781702952, 9.076216126810003, 8.449497378926777, 7.593707225485861, 6.417853970782055, 4.686937854095244, 0.0], [1.1805140318481027e-15, 4.536295815039312, 6.211578863533282, 7.3496392271356275, 8.17792358089847, 8.784499072558823, 9.213260354042184, 9.48834344244301, 9.622936596847357, 9.622936596847357, 9.48834344244301, 9.213260354042184, 8.784499072558825, 8.17792358089847, 7.349639227135628, 6.2115788635332825, 4.536295815039311, 0.0], [1.1033686402081122e-15, 4.239853496011386, 5.805658500706437, 6.869347776721956, 7.6435045901621494, 8.210440990205692, 8.611183157906632, 8.868289846183693, 8.99408747480142, 8.99408747480142, 8.868289846183693, 8.611183157906632, 8.210440990205694, 7.6435045901621494, 6.869347776721957, 5.805658500706438, 4.239853496011385, 0.0], [9.907600726170917e-16, 3.807138797058578, 5.213139496755162, 6.168269836646265, 6.863417072801493, 7.372492578854001, 7.732335449770856, 7.963202117414841, 8.076160980955542, 8.076160980955542, 7.963202117414841, 7.732335449770856, 7.372492578854003, 6.863417072801493, 6.168269836646266, 5.213139496755163, 3.807138797058577, 0.0], [8.463076610920548e-16, 3.252059524644071, 4.453065899992711, 5.268938628751435, 5.862733683482619, 6.297586189910844, 6.604964118092647, 6.80217052044775, 6.898660028094365, 6.898660028094365, 6.80217052044775, 6.604964118092647, 6.297586189910845, 5.862733683482619, 5.268938628751436, 4.453065899992712, 3.25205952464407, 0.0], [6.746542249952563e-16, 2.5924563833040133, 3.549867101209667, 4.20025939803139, 4.673617209703271, 5.020270199152775, 5.2653038050763605, 5.422511566108921, 5.499430465693855, 5.499430465693855, 5.422511566108921, 5.2653038050763605, 5.020270199152776, 4.673617209703271, 4.200259398031391, 3.5498671012096676, 2.592456383304013, 0.0], [4.813168469997649e-16, 1.8495295607243478, 2.5325726529533648, 2.9965803742736723, 3.3342868333390108, 3.5815985935018575, 3.7564122954585186, 3.868568628377973, 3.9234446831794867, 3.9234446831794867, 3.868568628377973, 3.7564122954585186, 3.5815985935018584, 3.3342868333390108, 2.9965803742736723, 2.532572652953365, 1.8495295607243476, 0.0], [2.7250954951288026e-16, 1.0471573362650102, 1.433879235823421, 1.6965887916922535, 1.8877897346908896, 2.0278114621066514, 2.1267866038783083, 2.1902867118620875, 2.2213561603266907, 2.2213561603266907, 2.1902867118620875, 2.1267866038783083, 2.027811462106652, 1.8877897346908896, 1.6965887916922537, 1.4338792358234211, 1.04715733626501, 0.0], [5.494357088304735e-17, 0.21112861341418881, 0.2890997602543474, 0.34206744938793815, 0.38061752069123583, 0.40884880183050837, 0.42880424092360203, 0.44160717825304424, 0.44787142274305775, 0.44787142274305775, 0.44160717825304424, 0.42880424092360203, 0.4088488018305084, 0.38061752069123583, 0.3420674493879382, 0.28909976025434747, 0.2111286134141888, 0.0], [-1.6438833932268735e-16, -0.6316859567889662, -0.8649716194813757, -1.0234482221937402, -1.1387880535965733, -1.2232545953383815, -1.2829602431556928, -1.3212659734206478, -1.3400082708773706, -1.3400082708773706, -1.3212659734206478, -1.2829602431556928, -1.2232545953383818, -1.1387880535965733, -1.0234482221937402, -0.8649716194813758, -0.6316859567889661, -0.0], [-3.7843667304341477e-16, -1.4541976205879876, -1.9912420996659486, -2.35606942581811, -2.621592042843857, -2.8160415833158625, -2.95348932939676, -3.0416725495673367, -3.084818996109323, -3.084818996109323, -3.0416725495673367, -2.95348932939676, -2.816041583315863, -2.621592042843857, -2.35606942581811, -1.9912420996659488, -1.4541976205879872, -0.0], [-5.803217407137952e-16, -2.2299701763435236, -3.053512420367801, -3.6129646195163048, -4.020135906781022, -4.318318677758839, -4.529090838451901, -4.664317267274421, -4.730481100608797, -4.730481100608797, -4.664317267274421, -4.529090838451901, -4.31831867775884, -4.020135906781022, -3.612964619516305, -3.0535124203678015, -2.229970176343523, -0.0], [-7.635547901473153e-16, -2.9340696558058053, -4.017640339440644, -4.753736157586054, -5.289469294895402, -5.6818014567742035, -5.959123641410842, -6.137046990198274, -6.22410165028189, -6.22410165028189, -6.137046990198274, -5.959123641410842, -5.681801456774204, -5.289469294895402, -4.753736157586054, -4.017640339440645, -2.934069655805805, -0.0], [-9.22246560370527e-16, -3.543865722369935, -4.852637992278383, -5.7417187041638496, -6.388794787682012, -6.862666461967034, -7.197625307351575, -7.412526973278073, -7.517674451707027, -7.517674451707027, -7.412526973278073, -7.197625307351575, -6.862666461967035, -6.388794787682012, -5.74171870416385, -4.852637992278383, -3.5438657223699344, -0.0], [-1.051296567316432e-15, -4.039759028714665, -5.531667867280453, -6.545157687287932, -7.28277915927466, -7.82295972045147, -8.204789373688198, -8.449762240389203, -8.569623010691156, -8.569623010691156, -8.449762240389203, -8.204789373688198, -7.822959720451472, -7.28277915927466, -6.545157687287933, -5.531667867280454, -4.0397590287146645, -0.0], [-1.1465570375790904e-15, -4.405811155951706, -6.032905385556649, -7.138229916968897, -7.942689016397569, -8.531816616767898, -8.948244758631299, -9.215415196606696, -9.346136835002374, -9.346136835002374, -9.215415196606696, -8.948244758631299, -8.5318166167679, -7.942689016397569, -7.138229916968898, -6.03290538555665, -4.405811155951705, -0.0], [-1.204966221263684e-15, -4.630256887522965, -6.340240360849969, -7.501873563763343, -8.34731431326717, -8.966453907019313, -9.40409619439168, -9.68487712593637, -9.822258131409612, -9.822258131409612, -9.68487712593637, -9.40409619439168, -8.966453907019314, -8.34731431326717, -7.501873563763344, -6.34024036084997, -4.630256887522965, -0.0], [-1.2246467991473533e-15, -4.705882352941178, -6.443794794178425, -7.624400821656306, -8.483650059915268, -9.112901991076274, -9.557692240748189, -9.843059135695006, -9.982683969692435, -9.982683969692435, -9.843059135695006, -9.557692240748189, -9.112901991076276, -8.483650059915268, -7.624400821656307, -6.443794794178426, -4.7058823529411775, -0.0]], \"y\": [[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [-2.1866912968084107e-16, -0.8402677402288787, -1.1505839891681195, -1.3613893354151239, -1.514814211256738, -1.6271714821308927, -1.70659184794902, -1.7575460745890525, -1.7824770513844086, -1.7824770513844086, -1.7575460745890525, -1.70659184794902, -1.6271714821308931, -1.514814211256738, -1.361389335415124, -1.1505839891681198, -0.8402677402288785, -0.0], [-4.3031005361218065e-16, -1.6535285839122016, -2.264187262220716, -2.6790224974351293, -2.9809410473703997, -3.202044333984943, -3.358332429716509, -3.4586031722270856, -3.507663823710319, -3.507663823710319, -3.4586031722270856, -3.358332429716509, -3.202044333984944, -2.9809410473703997, -2.6790224974351293, -2.264187262220716, -1.6535285839122011, -0.0], [-6.281204583601334e-16, -2.4136436583807357, -3.305017693686054, -3.910549672080516, -4.3512579854951134, -4.674000846293865, -4.902133443947782, -5.048497918161571, -5.120111394626772, -5.120111394626772, -5.048497918161571, -4.902133443947782, -4.674000846293866, -4.3512579854951134, -3.910549672080517, -3.3050176936860542, -2.4136436583807352, -0.0], [-8.0574255475715675e-16, -3.096182239716296, -4.2396221370987055, -5.016388562654248, -5.5817219117390175, -5.995731125622194, -6.28837585580174, -6.4761297870884205, -6.567994372478233, -6.567994372478233, -6.4761297870884205, -6.28837585580174, -5.9957311256221955, -5.5817219117390175, -5.016388562654249, -4.2396221370987055, -3.096182239716295, -0.0], [-9.574674224771025e-16, -3.6792069763201414, -5.03796163665229, -5.960996597326013, -6.632784703083543, -7.124753673269023, -7.472504693557341, -7.695613516080909, -7.804776607034472, -7.804776607034472, -7.695613516080909, -7.472504693557341, -7.124753673269025, -6.632784703083543, -5.960996597326014, -5.037961636652291, -3.6792069763201405, -0.0], [-1.0784184994318154e-15, -4.143978973443475, -5.674376903955229, -6.714013296635385, -7.470664336597533, -8.024780775590138, -8.41646108206467, -8.667753894694668, -8.790706899649042, -8.790706899649042, -8.667753894694668, -8.41646108206467, -8.02478077559014, -7.470664336597533, -6.714013296635386, -5.67437690395523, -4.143978973443474, -0.0], [-1.1647083184890924e-15, -4.475560076683077, -6.1284130286721785, -7.251236084282353, -8.068430671450185, -8.66688482097217, -9.089905486307192, -9.361305531281277, -9.494096639491161, -9.494096639491161, -9.361305531281277, -9.089905486307192, -8.666884820972172, -8.068430671450185, -7.251236084282354, -6.128413028672179, -4.4755600766830765, -0.0], [-1.2135634538649334e-15, -4.663292996554989, -6.385476916172568, -7.555398177843562, -8.40687100579556, -9.030428057071571, -9.471192849020655, -9.753977105584658, -9.892338301571298, -9.892338301571298, -9.753977105584658, -9.471192849020655, -9.030428057071573, -8.40687100579556, -7.555398177843563, -6.385476916172569, -4.663292996554988, -0.0], [-1.2234136613102199e-15, -4.701143842547365, -6.437306321599264, -7.616723557366552, -8.475107588818162, -9.10372590515574, -9.548068280643163, -9.833147830115456, -9.97263207119587, -9.97263207119587, -9.833147830115456, -9.548068280643163, -9.103725905155741, -8.475107588818162, -7.616723557366553, -6.437306321599265, -4.701143842547364, -0.0], [-1.1939423470528821e-15, -4.587896057326231, -6.2822354052164755, -7.433241174694763, -8.270947240594396, -8.884422512077576, -9.318060941549048, -9.596273092645356, -9.732397240543204, -9.732397240543204, -9.596273092645356, -9.318060941549048, -8.884422512077577, -8.270947240594396, -7.433241174694764, -6.282235405216476, -4.58789605732623, -0.0], [-1.1260967433822296e-15, -4.327189517889181, -5.925248273869521, -7.010848304577074, -7.800951842699868, -8.379566469334046, -8.788563456867466, -9.050966242137836, -9.179355154736358, -9.179355154736358, -9.050966242137836, -8.788563456867466, -8.379566469334048, -7.800951842699868, -7.010848304577075, -5.925248273869522, -4.327189517889181, -0.0], [-1.0220574638237853e-15, -3.927403546923779, -5.37781878768988, -6.363121001405077, -7.08022743393641, -7.605384265535864, -7.976594311428065, -8.214753889448176, -8.331281041457705, -8.331281041457705, -8.214753889448176, -7.976594311428065, -7.605384265535866, -7.08022743393641, -6.363121001405078, -5.377818787689881, -3.9274035469237787, -0.0], [-8.851684164263621e-16, -3.401387594481844, -4.657541780789849, -5.510877753654522, -6.131938689815699, -6.586758753712341, -6.908250861655704, -7.114512587629634, -7.215432700505728, -7.215432700505728, -7.114512587629634, -6.908250861655704, -6.586758753712342, -6.131938689815699, -5.510877753654523, -4.65754178078985, -3.4013875944818435, -0.0], [-7.198293278059968e-16, -2.766048246082228, -3.787567548817091, -4.481510360536192, -4.9865643908283515, -5.356429395941349, -5.617870545061988, -5.7856049974042225, -5.867674415681696, -5.867674415681696, -5.7856049974042225, -5.617870545061988, -5.356429395941351, -4.9865643908283515, -4.481510360536193, -3.787567548817092, -2.7660482460822275, -0.0], [-5.313543323124029e-16, -2.0418058311414513, -2.7958577794043915, -3.3081035370312213, -3.6809178093609334, -3.953939990100015, -4.146927246750698, -4.27074330215059, -4.3313242471990625, -4.3313242471990625, -4.27074330215059, -4.146927246750698, -3.953939990100016, -3.6809178093609334, -3.3081035370312217, -2.795857779404392, -2.041805831141451, -0.0], [-3.2580117137848757e-16, -1.2519380967843545, -1.7142868405221914, -2.0283715439294103, -2.256963500831393, -2.424367699664206, -2.542698294625736, -2.618616403186544, -2.6557617535859905, -2.6557617535859905, -2.618616403186544, -2.542698294625736, -2.4243676996642063, -2.256963500831393, -2.0283715439294108, -1.7142868405221916, -1.2519380967843543, -0.0], [-1.0977649272637083e-16, -0.4218320418985113, -0.5776173120656973, -0.6834460204560427, -0.7604685283493778, -0.8168742365848014, -0.8567449271723776, -0.882325018419329, -0.8948408920446151, -0.8948408920446151, -0.882325018419329, -0.8567449271723776, -0.8168742365848016, -0.7604685283493778, -0.6834460204560429, -0.5776173120656973, -0.42183204189851126, -0.0], [1.0977649272637052e-16, 0.42183204189851015, 0.5776173120656957, 0.6834460204560409, 0.7604685283493757, 0.8168742365847992, 0.8567449271723752, 0.8823250184193265, 0.8948408920446126, 0.8948408920446126, 0.8823250184193265, 0.8567449271723752, 0.8168742365847993, 0.7604685283493757, 0.6834460204560409, 0.5776173120656958, 0.4218320418985101, 0.0], [3.2580117137848727e-16, 1.2519380967843534, 1.71428684052219, 2.0283715439294085, 2.2569635008313913, 2.424367699664204, 2.5426982946257337, 2.6186164031865418, 2.6557617535859883, 2.6557617535859883, 2.6186164031865418, 2.5426982946257337, 2.4243676996642045, 2.2569635008313913, 2.028371543929409, 1.7142868405221903, 1.2519380967843532, 0.0], [5.313543323124027e-16, 2.0418058311414504, 2.79585777940439, 3.3081035370312195, 3.6809178093609316, 3.953939990100013, 4.146927246750695, 4.270743302150588, 4.331324247199061, 4.331324247199061, 4.270743302150588, 4.146927246750695, 3.953939990100014, 3.6809178093609316, 3.30810353703122, 2.7958577794043906, 2.04180583114145, 0.0], [7.198293278059966e-16, 2.766048246082227, 3.7875675488170897, 4.48151036053619, 4.98656439082835, 5.356429395941348, 5.617870545061986, 5.785604997404221, 5.867674415681694, 5.867674415681694, 5.785604997404221, 5.617870545061986, 5.3564293959413485, 4.98656439082835, 4.481510360536191, 3.78756754881709, 2.7660482460822267, 0.0], [8.851684164263618e-16, 3.401387594481843, 4.657541780789848, 5.510877753654521, 6.131938689815697, 6.586758753712339, 6.908250861655702, 7.114512587629632, 7.215432700505725, 7.215432700505725, 7.114512587629632, 6.908250861655702, 6.58675875371234, 6.131938689815697, 5.510877753654521, 4.657541780789848, 3.401387594481842, 0.0], [1.022057463823785e-15, 3.9274035469237782, 5.377818787689879, 6.363121001405076, 7.080227433936408, 7.6053842655358626, 7.976594311428062, 8.214753889448172, 8.331281041457704, 8.331281041457704, 8.214753889448172, 7.976594311428062, 7.605384265535864, 7.080227433936408, 6.3631210014050765, 5.37781878768988, 3.9274035469237774, 0.0], [1.1260967433822294e-15, 4.327189517889181, 5.92524827386952, 7.010848304577073, 7.800951842699867, 8.379566469334046, 8.788563456867465, 9.050966242137834, 9.179355154736356, 9.179355154736356, 9.050966242137834, 8.788563456867465, 8.379566469334048, 7.800951842699867, 7.010848304577074, 5.925248273869521, 4.32718951788918, 0.0], [1.1939423470528821e-15, 4.58789605732623, 6.282235405216475, 7.433241174694762, 8.270947240594394, 8.884422512077574, 9.318060941549046, 9.596273092645356, 9.732397240543204, 9.732397240543204, 9.596273092645356, 9.318060941549046, 8.884422512077576, 8.270947240594394, 7.433241174694763, 6.2822354052164755, 4.587896057326229, 0.0], [1.2234136613102199e-15, 4.701143842547364, 6.437306321599264, 7.6167235573665515, 8.475107588818162, 9.10372590515574, 9.548068280643161, 9.833147830115456, 9.97263207119587, 9.97263207119587, 9.833147830115456, 9.548068280643161, 9.103725905155741, 8.475107588818162, 7.616723557366552, 6.437306321599265, 4.7011438425473635, 0.0], [1.2135634538649336e-15, 4.663292996554989, 6.385476916172569, 7.555398177843563, 8.40687100579556, 9.030428057071573, 9.471192849020657, 9.75397710558466, 9.8923383015713, 9.8923383015713, 9.75397710558466, 9.471192849020657, 9.030428057071575, 8.40687100579556, 7.555398177843564, 6.3854769161725695, 4.663292996554988, 0.0], [1.1647083184890926e-15, 4.475560076683077, 6.128413028672179, 7.251236084282354, 8.068430671450187, 8.666884820972172, 9.089905486307194, 9.361305531281278, 9.494096639491161, 9.494096639491161, 9.361305531281278, 9.089905486307194, 8.666884820972172, 8.068430671450187, 7.251236084282354, 6.12841302867218, 4.4755600766830765, 0.0], [1.0784184994318154e-15, 4.143978973443475, 5.67437690395523, 6.714013296635386, 7.470664336597534, 8.02478077559014, 8.41646108206467, 8.667753894694668, 8.790706899649043, 8.790706899649043, 8.667753894694668, 8.41646108206467, 8.024780775590141, 7.470664336597534, 6.714013296635387, 5.674376903955231, 4.143978973443474, 0.0], [9.57467422477103e-16, 3.6792069763201423, 5.037961636652292, 5.960996597326015, 6.632784703083545, 7.124753673269025, 7.472504693557343, 7.695613516080911, 7.804776607034474, 7.804776607034474, 7.695613516080911, 7.472504693557343, 7.124753673269026, 6.632784703083545, 5.960996597326016, 5.037961636652292, 3.6792069763201414, 0.0], [8.057425547571569e-16, 3.096182239716297, 4.239622137098706, 5.0163885626542495, 5.58172191173902, 5.995731125622196, 6.288375855801743, 6.476129787088423, 6.567994372478235, 6.567994372478235, 6.476129787088423, 6.288375855801743, 5.995731125622197, 5.58172191173902, 5.01638856265425, 4.239622137098707, 3.0961822397162964, 0.0], [6.281204583601337e-16, 2.4136436583807366, 3.305017693686055, 3.910549672080518, 4.351257985495115, 4.6740008462938665, 4.902133443947784, 5.048497918161574, 5.1201113946267744, 5.1201113946267744, 5.048497918161574, 4.902133443947784, 4.674000846293867, 4.351257985495115, 3.9105496720805184, 3.3050176936860556, 2.413643658380736, 0.0], [4.3031005361218095e-16, 1.6535285839122027, 2.2641872622207173, 2.679022497435131, 2.9809410473704014, 3.2020443339849454, 3.358332429716511, 3.458603172227088, 3.5076638237103213, 3.5076638237103213, 3.458603172227088, 3.358332429716511, 3.202044333984946, 2.9809410473704014, 2.679022497435131, 2.2641872622207178, 1.6535285839122023, 0.0], [2.1866912968084137e-16, 0.8402677402288798, 1.150583989168121, 1.3613893354151259, 1.5148142112567402, 1.6271714821308951, 1.7065918479490225, 1.757546074589055, 1.782477051384411, 1.782477051384411, 1.757546074589055, 1.7065918479490225, 1.6271714821308954, 1.5148142112567402, 1.3613893354151259, 1.1505839891681213, 0.8402677402288797, 0.0], [2.9995195653237157e-31, 1.1526087521386858e-15, 1.5782745338105972e-15, 1.867439612331569e-15, 2.077894978192297e-15, 2.23201725086302e-15, 2.3409594419735527e-15, 2.4108541728694004e-15, 2.4450523940766866e-15, 2.4450523940766866e-15, 2.4108541728694004e-15, 2.3409594419735527e-15, 2.2320172508630206e-15, 2.077894978192297e-15, 1.8674396123315694e-15, 1.5782745338105974e-15, 1.1526087521386856e-15, 0.0]], \"z\": [[-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0]]}], {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('ef403284-6a59-48e2-b0f4-de24074c0eb6'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Ylm"},{"location":"phys304/Ylm/#required-dependencies","text":"import numpy as np import scipy as sp from scipy.special import sph_harm","title":"Required dependencies"},{"location":"phys304/Ylm/#spherical-grid","text":"## first, evaluate the potential on a fine grid # at r=10. R = 10. Np = 36 Nt=18 theta = -np.arccos(np.linspace(-1, 1, Nt)) phi = np.linspace(0, 2*np.pi, Np) theta, phi = np.meshgrid(theta, phi) x = R * np.sin(theta) * np.cos(phi) y = R * np.sin(theta) * np.sin(phi) z = R * np.cos(theta)","title":"Spherical grid"},{"location":"phys304/Ylm/#spherical-harmonics","text":"m = 0 l = 1 Y01 = 1/R**2 * sph_harm(m, l, phi, theta).real","title":"Spherical harmonics"},{"location":"phys304/Ylm/#plotting-static","text":"import matplotlib.pyplot as plt from matplotlib import cm, colors from mpl_toolkits.mplot3d import Axes3D fmax, fmin = Y01.max(), Y01.min() Y01 = (Y01 - fmin)/(fmax - fmin) # Set the aspect ratio to 1 so our sphere looks spherical fig = plt.figure(figsize=plt.figaspect(1.)) ax = fig.add_subplot(111, projection='3d') ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=cm.seismic(Y01)) # Turn off the axis planes ax.set_axis_off() plt.show()","title":"Plotting (static)"},{"location":"phys304/Ylm/#plotting-interactive","text":"import plotly.graph_objects as go import chart_studio.plotly as py fig = go.Figure() fig.add_trace(go.Surface(x=x, y=y, z=z, surfacecolor=Y01, showscale=False, colorscale='PrGN')) fig.show() require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"ef403284-6a59-48e2-b0f4-de24074c0eb6\")) { Plotly.newPlot( 'ef403284-6a59-48e2-b0f4-de24074c0eb6', [{\"colorscale\": [[0.0, \"rgb(64,0,75)\"], [0.1, \"rgb(118,42,131)\"], [0.2, \"rgb(153,112,171)\"], [0.3, \"rgb(194,165,207)\"], [0.4, \"rgb(231,212,232)\"], [0.5, \"rgb(247,247,247)\"], [0.6, \"rgb(217,240,211)\"], [0.7, \"rgb(166,219,160)\"], [0.8, \"rgb(90,174,97)\"], [0.9, \"rgb(27,120,55)\"], [1.0, \"rgb(0,68,27)\"]], \"showscale\": false, \"surfacecolor\": [[0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0], [0.0, 0.05882352941176477, 0.11764705882352945, 0.17647058823529407, 0.23529411764705882, 0.2941176470588235, 0.35294117647058815, 0.4117647058823529, 0.47058823529411764, 0.5294117647058824, 0.5882352941176472, 0.6470588235294119, 0.7058823529411764, 0.7647058823529411, 0.8235294117647058, 0.8823529411764707, 0.9411764705882353, 1.0]], \"type\": \"surface\", \"x\": [[-1.2246467991473533e-15, -4.705882352941178, -6.443794794178425, -7.624400821656306, -8.483650059915268, -9.112901991076274, -9.557692240748189, -9.843059135695006, -9.982683969692435, -9.982683969692435, -9.843059135695006, -9.557692240748189, -9.112901991076276, -8.483650059915268, -7.624400821656307, -6.443794794178426, -4.7058823529411775, -0.0], [-1.204966221263684e-15, -4.630256887522965, -6.340240360849969, -7.501873563763343, -8.34731431326717, -8.966453907019313, -9.40409619439168, -9.68487712593637, -9.822258131409612, -9.822258131409612, -9.68487712593637, -9.40409619439168, -8.966453907019314, -8.34731431326717, -7.501873563763344, -6.34024036084997, -4.630256887522965, -0.0], [-1.1465570375790906e-15, -4.405811155951707, -6.032905385556649, -7.138229916968898, -7.94268901639757, -8.5318166167679, -8.9482447586313, -9.215415196606697, -9.346136835002374, -9.346136835002374, -9.215415196606697, -8.9482447586313, -8.531816616767902, -7.94268901639757, -7.138229916968899, -6.03290538555665, -4.405811155951706, -0.0], [-1.0512965673164322e-15, -4.039759028714665, -5.531667867280454, -6.545157687287933, -7.282779159274661, -7.822959720451471, -8.204789373688198, -8.449762240389205, -8.569623010691158, -8.569623010691158, -8.449762240389205, -8.204789373688198, -7.822959720451473, -7.282779159274661, -6.545157687287934, -5.531667867280454, -4.0397590287146645, -0.0], [-9.22246560370527e-16, -3.5438657223699352, -4.852637992278383, -5.74171870416385, -6.388794787682013, -6.862666461967035, -7.197625307351576, -7.412526973278074, -7.517674451707029, -7.517674451707029, -7.412526973278074, -7.197625307351576, -6.862666461967036, -6.388794787682013, -5.741718704163851, -4.8526379922783835, -3.543865722369935, -0.0], [-7.635547901473156e-16, -2.934069655805806, -4.0176403394406455, -4.753736157586056, -5.289469294895404, -5.681801456774205, -5.9591236414108435, -6.137046990198277, -6.224101650281892, -6.224101650281892, -6.137046990198277, -5.9591236414108435, -5.681801456774206, -5.289469294895404, -4.753736157586056, -4.0176403394406455, -2.9340696558058057, -0.0], [-5.803217407137954e-16, -2.229970176343524, -3.053512420367802, -3.612964619516306, -4.020135906781023, -4.318318677758841, -4.529090838451902, -4.664317267274423, -4.730481100608799, -4.730481100608799, -4.664317267274423, -4.529090838451902, -4.318318677758842, -4.020135906781023, -3.6129646195163065, -3.0535124203678023, -2.2299701763435236, -0.0], [-3.7843667304341507e-16, -1.4541976205879885, -1.99124209966595, -2.3560694258181116, -2.621592042843859, -2.8160415833158643, -2.953489329396762, -3.041672549567339, -3.084818996109325, -3.084818996109325, -3.041672549567339, -2.953489329396762, -2.816041583315865, -2.621592042843859, -2.3560694258181116, -1.9912420996659503, -1.4541976205879883, -0.0], [-1.6438833932268765e-16, -0.6316859567889674, -0.8649716194813774, -1.023448222193742, -1.1387880535965753, -1.2232545953383838, -1.2829602431556952, -1.3212659734206502, -1.340008270877373, -1.340008270877373, -1.3212659734206502, -1.2829602431556952, -1.223254595338384, -1.1387880535965753, -1.0234482221937422, -0.8649716194813775, -0.6316859567889673, -0.0], [5.4943570883047055e-17, 0.21112861341418768, 0.28909976025434586, 0.3420674493879363, 0.3806175206912337, 0.40884880183050615, 0.42880424092359976, 0.44160717825304185, 0.4478714227430553, 0.4478714227430553, 0.44160717825304185, 0.42880424092359976, 0.4088488018305062, 0.3806175206912337, 0.3420674493879363, 0.2890997602543459, 0.21112861341418762, 0.0], [2.7250954951287997e-16, 1.047157336265009, 1.4338792358234194, 1.6965887916922517, 1.8877897346908876, 2.027811462106649, 2.1267866038783056, 2.190286711862085, 2.221356160326688, 2.221356160326688, 2.190286711862085, 2.1267866038783056, 2.0278114621066496, 1.8877897346908876, 1.696588791692252, 1.4338792358234196, 1.0471573362650088, 0.0], [4.813168469997646e-16, 1.849529560724347, 2.5325726529533634, 2.9965803742736705, 3.3342868333390085, 3.5815985935018557, 3.7564122954585164, 3.868568628377971, 3.9234446831794845, 3.9234446831794845, 3.868568628377971, 3.7564122954585164, 3.581598593501856, 3.3342868333390085, 2.996580374273671, 2.5325726529533634, 1.8495295607243465, 0.0], [6.74654224995256e-16, 2.5924563833040124, 3.549867101209666, 4.200259398031388, 4.673617209703269, 5.020270199152773, 5.265303805076358, 5.422511566108919, 5.4994304656938535, 5.4994304656938535, 5.422511566108919, 5.265303805076358, 5.020270199152774, 4.673617209703269, 4.200259398031389, 3.5498671012096663, 2.592456383304012, 0.0], [8.463076610920545e-16, 3.2520595246440696, 4.45306589999271, 5.2689386287514335, 5.862733683482618, 6.2975861899108425, 6.604964118092644, 6.802170520447748, 6.898660028094362, 6.898660028094362, 6.802170520447748, 6.604964118092644, 6.297586189910843, 5.862733683482618, 5.268938628751434, 4.45306589999271, 3.252059524644069, 0.0], [9.907600726170915e-16, 3.8071387970585775, 5.213139496755161, 6.168269836646264, 6.863417072801492, 7.3724925788540006, 7.732335449770855, 7.96320211741484, 8.07616098095554, 8.07616098095554, 7.96320211741484, 7.732335449770855, 7.372492578854002, 6.863417072801492, 6.168269836646265, 5.213139496755162, 3.8071387970585766, 0.0], [1.103368640208112e-15, 4.239853496011386, 5.8056585007064365, 6.8693477767219555, 7.643504590162149, 8.210440990205692, 8.61118315790663, 8.868289846183693, 8.99408747480142, 8.99408747480142, 8.868289846183693, 8.61118315790663, 8.210440990205694, 7.643504590162149, 6.869347776721956, 5.805658500706437, 4.239853496011385, 0.0], [1.1805140318481027e-15, 4.536295815039312, 6.211578863533282, 7.349639227135627, 8.177923580898469, 8.784499072558821, 9.213260354042184, 9.48834344244301, 9.622936596847355, 9.622936596847355, 9.48834344244301, 9.213260354042184, 8.784499072558823, 8.177923580898469, 7.3496392271356275, 6.2115788635332825, 4.536295815039311, 0.0], [1.2197167311743145e-15, 4.686937854095245, 6.417853970782054, 7.59370722548586, 8.449497378926777, 9.076216126810001, 9.519215781702952, 9.803433873427222, 9.942496618892013, 9.942496618892013, 9.803433873427222, 9.519215781702952, 9.076216126810003, 8.449497378926777, 7.593707225485861, 6.417853970782055, 4.686937854095244, 0.0], [1.2197167311743145e-15, 4.686937854095245, 6.417853970782054, 7.59370722548586, 8.449497378926777, 9.076216126810001, 9.519215781702952, 9.803433873427222, 9.942496618892013, 9.942496618892013, 9.803433873427222, 9.519215781702952, 9.076216126810003, 8.449497378926777, 7.593707225485861, 6.417853970782055, 4.686937854095244, 0.0], [1.1805140318481027e-15, 4.536295815039312, 6.211578863533282, 7.3496392271356275, 8.17792358089847, 8.784499072558823, 9.213260354042184, 9.48834344244301, 9.622936596847357, 9.622936596847357, 9.48834344244301, 9.213260354042184, 8.784499072558825, 8.17792358089847, 7.349639227135628, 6.2115788635332825, 4.536295815039311, 0.0], [1.1033686402081122e-15, 4.239853496011386, 5.805658500706437, 6.869347776721956, 7.6435045901621494, 8.210440990205692, 8.611183157906632, 8.868289846183693, 8.99408747480142, 8.99408747480142, 8.868289846183693, 8.611183157906632, 8.210440990205694, 7.6435045901621494, 6.869347776721957, 5.805658500706438, 4.239853496011385, 0.0], [9.907600726170917e-16, 3.807138797058578, 5.213139496755162, 6.168269836646265, 6.863417072801493, 7.372492578854001, 7.732335449770856, 7.963202117414841, 8.076160980955542, 8.076160980955542, 7.963202117414841, 7.732335449770856, 7.372492578854003, 6.863417072801493, 6.168269836646266, 5.213139496755163, 3.807138797058577, 0.0], [8.463076610920548e-16, 3.252059524644071, 4.453065899992711, 5.268938628751435, 5.862733683482619, 6.297586189910844, 6.604964118092647, 6.80217052044775, 6.898660028094365, 6.898660028094365, 6.80217052044775, 6.604964118092647, 6.297586189910845, 5.862733683482619, 5.268938628751436, 4.453065899992712, 3.25205952464407, 0.0], [6.746542249952563e-16, 2.5924563833040133, 3.549867101209667, 4.20025939803139, 4.673617209703271, 5.020270199152775, 5.2653038050763605, 5.422511566108921, 5.499430465693855, 5.499430465693855, 5.422511566108921, 5.2653038050763605, 5.020270199152776, 4.673617209703271, 4.200259398031391, 3.5498671012096676, 2.592456383304013, 0.0], [4.813168469997649e-16, 1.8495295607243478, 2.5325726529533648, 2.9965803742736723, 3.3342868333390108, 3.5815985935018575, 3.7564122954585186, 3.868568628377973, 3.9234446831794867, 3.9234446831794867, 3.868568628377973, 3.7564122954585186, 3.5815985935018584, 3.3342868333390108, 2.9965803742736723, 2.532572652953365, 1.8495295607243476, 0.0], [2.7250954951288026e-16, 1.0471573362650102, 1.433879235823421, 1.6965887916922535, 1.8877897346908896, 2.0278114621066514, 2.1267866038783083, 2.1902867118620875, 2.2213561603266907, 2.2213561603266907, 2.1902867118620875, 2.1267866038783083, 2.027811462106652, 1.8877897346908896, 1.6965887916922537, 1.4338792358234211, 1.04715733626501, 0.0], [5.494357088304735e-17, 0.21112861341418881, 0.2890997602543474, 0.34206744938793815, 0.38061752069123583, 0.40884880183050837, 0.42880424092360203, 0.44160717825304424, 0.44787142274305775, 0.44787142274305775, 0.44160717825304424, 0.42880424092360203, 0.4088488018305084, 0.38061752069123583, 0.3420674493879382, 0.28909976025434747, 0.2111286134141888, 0.0], [-1.6438833932268735e-16, -0.6316859567889662, -0.8649716194813757, -1.0234482221937402, -1.1387880535965733, -1.2232545953383815, -1.2829602431556928, -1.3212659734206478, -1.3400082708773706, -1.3400082708773706, -1.3212659734206478, -1.2829602431556928, -1.2232545953383818, -1.1387880535965733, -1.0234482221937402, -0.8649716194813758, -0.6316859567889661, -0.0], [-3.7843667304341477e-16, -1.4541976205879876, -1.9912420996659486, -2.35606942581811, -2.621592042843857, -2.8160415833158625, -2.95348932939676, -3.0416725495673367, -3.084818996109323, -3.084818996109323, -3.0416725495673367, -2.95348932939676, -2.816041583315863, -2.621592042843857, -2.35606942581811, -1.9912420996659488, -1.4541976205879872, -0.0], [-5.803217407137952e-16, -2.2299701763435236, -3.053512420367801, -3.6129646195163048, -4.020135906781022, -4.318318677758839, -4.529090838451901, -4.664317267274421, -4.730481100608797, -4.730481100608797, -4.664317267274421, -4.529090838451901, -4.31831867775884, -4.020135906781022, -3.612964619516305, -3.0535124203678015, -2.229970176343523, -0.0], [-7.635547901473153e-16, -2.9340696558058053, -4.017640339440644, -4.753736157586054, -5.289469294895402, -5.6818014567742035, -5.959123641410842, -6.137046990198274, -6.22410165028189, -6.22410165028189, -6.137046990198274, -5.959123641410842, -5.681801456774204, -5.289469294895402, -4.753736157586054, -4.017640339440645, -2.934069655805805, -0.0], [-9.22246560370527e-16, -3.543865722369935, -4.852637992278383, -5.7417187041638496, -6.388794787682012, -6.862666461967034, -7.197625307351575, -7.412526973278073, -7.517674451707027, -7.517674451707027, -7.412526973278073, -7.197625307351575, -6.862666461967035, -6.388794787682012, -5.74171870416385, -4.852637992278383, -3.5438657223699344, -0.0], [-1.051296567316432e-15, -4.039759028714665, -5.531667867280453, -6.545157687287932, -7.28277915927466, -7.82295972045147, -8.204789373688198, -8.449762240389203, -8.569623010691156, -8.569623010691156, -8.449762240389203, -8.204789373688198, -7.822959720451472, -7.28277915927466, -6.545157687287933, -5.531667867280454, -4.0397590287146645, -0.0], [-1.1465570375790904e-15, -4.405811155951706, -6.032905385556649, -7.138229916968897, -7.942689016397569, -8.531816616767898, -8.948244758631299, -9.215415196606696, -9.346136835002374, -9.346136835002374, -9.215415196606696, -8.948244758631299, -8.5318166167679, -7.942689016397569, -7.138229916968898, -6.03290538555665, -4.405811155951705, -0.0], [-1.204966221263684e-15, -4.630256887522965, -6.340240360849969, -7.501873563763343, -8.34731431326717, -8.966453907019313, -9.40409619439168, -9.68487712593637, -9.822258131409612, -9.822258131409612, -9.68487712593637, -9.40409619439168, -8.966453907019314, -8.34731431326717, -7.501873563763344, -6.34024036084997, -4.630256887522965, -0.0], [-1.2246467991473533e-15, -4.705882352941178, -6.443794794178425, -7.624400821656306, -8.483650059915268, -9.112901991076274, -9.557692240748189, -9.843059135695006, -9.982683969692435, -9.982683969692435, -9.843059135695006, -9.557692240748189, -9.112901991076276, -8.483650059915268, -7.624400821656307, -6.443794794178426, -4.7058823529411775, -0.0]], \"y\": [[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [-2.1866912968084107e-16, -0.8402677402288787, -1.1505839891681195, -1.3613893354151239, -1.514814211256738, -1.6271714821308927, -1.70659184794902, -1.7575460745890525, -1.7824770513844086, -1.7824770513844086, -1.7575460745890525, -1.70659184794902, -1.6271714821308931, -1.514814211256738, -1.361389335415124, -1.1505839891681198, -0.8402677402288785, -0.0], [-4.3031005361218065e-16, -1.6535285839122016, -2.264187262220716, -2.6790224974351293, -2.9809410473703997, -3.202044333984943, -3.358332429716509, -3.4586031722270856, -3.507663823710319, -3.507663823710319, -3.4586031722270856, -3.358332429716509, -3.202044333984944, -2.9809410473703997, -2.6790224974351293, -2.264187262220716, -1.6535285839122011, -0.0], [-6.281204583601334e-16, -2.4136436583807357, -3.305017693686054, -3.910549672080516, -4.3512579854951134, -4.674000846293865, -4.902133443947782, -5.048497918161571, -5.120111394626772, -5.120111394626772, -5.048497918161571, -4.902133443947782, -4.674000846293866, -4.3512579854951134, -3.910549672080517, -3.3050176936860542, -2.4136436583807352, -0.0], [-8.0574255475715675e-16, -3.096182239716296, -4.2396221370987055, -5.016388562654248, -5.5817219117390175, -5.995731125622194, -6.28837585580174, -6.4761297870884205, -6.567994372478233, -6.567994372478233, -6.4761297870884205, -6.28837585580174, -5.9957311256221955, -5.5817219117390175, -5.016388562654249, -4.2396221370987055, -3.096182239716295, -0.0], [-9.574674224771025e-16, -3.6792069763201414, -5.03796163665229, -5.960996597326013, -6.632784703083543, -7.124753673269023, -7.472504693557341, -7.695613516080909, -7.804776607034472, -7.804776607034472, -7.695613516080909, -7.472504693557341, -7.124753673269025, -6.632784703083543, -5.960996597326014, -5.037961636652291, -3.6792069763201405, -0.0], [-1.0784184994318154e-15, -4.143978973443475, -5.674376903955229, -6.714013296635385, -7.470664336597533, -8.024780775590138, -8.41646108206467, -8.667753894694668, -8.790706899649042, -8.790706899649042, -8.667753894694668, -8.41646108206467, -8.02478077559014, -7.470664336597533, -6.714013296635386, -5.67437690395523, -4.143978973443474, -0.0], [-1.1647083184890924e-15, -4.475560076683077, -6.1284130286721785, -7.251236084282353, -8.068430671450185, -8.66688482097217, -9.089905486307192, -9.361305531281277, -9.494096639491161, -9.494096639491161, -9.361305531281277, -9.089905486307192, -8.666884820972172, -8.068430671450185, -7.251236084282354, -6.128413028672179, -4.4755600766830765, -0.0], [-1.2135634538649334e-15, -4.663292996554989, -6.385476916172568, -7.555398177843562, -8.40687100579556, -9.030428057071571, -9.471192849020655, -9.753977105584658, -9.892338301571298, -9.892338301571298, -9.753977105584658, -9.471192849020655, -9.030428057071573, -8.40687100579556, -7.555398177843563, -6.385476916172569, -4.663292996554988, -0.0], [-1.2234136613102199e-15, -4.701143842547365, -6.437306321599264, -7.616723557366552, -8.475107588818162, -9.10372590515574, -9.548068280643163, -9.833147830115456, -9.97263207119587, -9.97263207119587, -9.833147830115456, -9.548068280643163, -9.103725905155741, -8.475107588818162, -7.616723557366553, -6.437306321599265, -4.701143842547364, -0.0], [-1.1939423470528821e-15, -4.587896057326231, -6.2822354052164755, -7.433241174694763, -8.270947240594396, -8.884422512077576, -9.318060941549048, -9.596273092645356, -9.732397240543204, -9.732397240543204, -9.596273092645356, -9.318060941549048, -8.884422512077577, -8.270947240594396, -7.433241174694764, -6.282235405216476, -4.58789605732623, -0.0], [-1.1260967433822296e-15, -4.327189517889181, -5.925248273869521, -7.010848304577074, -7.800951842699868, -8.379566469334046, -8.788563456867466, -9.050966242137836, -9.179355154736358, -9.179355154736358, -9.050966242137836, -8.788563456867466, -8.379566469334048, -7.800951842699868, -7.010848304577075, -5.925248273869522, -4.327189517889181, -0.0], [-1.0220574638237853e-15, -3.927403546923779, -5.37781878768988, -6.363121001405077, -7.08022743393641, -7.605384265535864, -7.976594311428065, -8.214753889448176, -8.331281041457705, -8.331281041457705, -8.214753889448176, -7.976594311428065, -7.605384265535866, -7.08022743393641, -6.363121001405078, -5.377818787689881, -3.9274035469237787, -0.0], [-8.851684164263621e-16, -3.401387594481844, -4.657541780789849, -5.510877753654522, -6.131938689815699, -6.586758753712341, -6.908250861655704, -7.114512587629634, -7.215432700505728, -7.215432700505728, -7.114512587629634, -6.908250861655704, -6.586758753712342, -6.131938689815699, -5.510877753654523, -4.65754178078985, -3.4013875944818435, -0.0], [-7.198293278059968e-16, -2.766048246082228, -3.787567548817091, -4.481510360536192, -4.9865643908283515, -5.356429395941349, -5.617870545061988, -5.7856049974042225, -5.867674415681696, -5.867674415681696, -5.7856049974042225, -5.617870545061988, -5.356429395941351, -4.9865643908283515, -4.481510360536193, -3.787567548817092, -2.7660482460822275, -0.0], [-5.313543323124029e-16, -2.0418058311414513, -2.7958577794043915, -3.3081035370312213, -3.6809178093609334, -3.953939990100015, -4.146927246750698, -4.27074330215059, -4.3313242471990625, -4.3313242471990625, -4.27074330215059, -4.146927246750698, -3.953939990100016, -3.6809178093609334, -3.3081035370312217, -2.795857779404392, -2.041805831141451, -0.0], [-3.2580117137848757e-16, -1.2519380967843545, -1.7142868405221914, -2.0283715439294103, -2.256963500831393, -2.424367699664206, -2.542698294625736, -2.618616403186544, -2.6557617535859905, -2.6557617535859905, -2.618616403186544, -2.542698294625736, -2.4243676996642063, -2.256963500831393, -2.0283715439294108, -1.7142868405221916, -1.2519380967843543, -0.0], [-1.0977649272637083e-16, -0.4218320418985113, -0.5776173120656973, -0.6834460204560427, -0.7604685283493778, -0.8168742365848014, -0.8567449271723776, -0.882325018419329, -0.8948408920446151, -0.8948408920446151, -0.882325018419329, -0.8567449271723776, -0.8168742365848016, -0.7604685283493778, -0.6834460204560429, -0.5776173120656973, -0.42183204189851126, -0.0], [1.0977649272637052e-16, 0.42183204189851015, 0.5776173120656957, 0.6834460204560409, 0.7604685283493757, 0.8168742365847992, 0.8567449271723752, 0.8823250184193265, 0.8948408920446126, 0.8948408920446126, 0.8823250184193265, 0.8567449271723752, 0.8168742365847993, 0.7604685283493757, 0.6834460204560409, 0.5776173120656958, 0.4218320418985101, 0.0], [3.2580117137848727e-16, 1.2519380967843534, 1.71428684052219, 2.0283715439294085, 2.2569635008313913, 2.424367699664204, 2.5426982946257337, 2.6186164031865418, 2.6557617535859883, 2.6557617535859883, 2.6186164031865418, 2.5426982946257337, 2.4243676996642045, 2.2569635008313913, 2.028371543929409, 1.7142868405221903, 1.2519380967843532, 0.0], [5.313543323124027e-16, 2.0418058311414504, 2.79585777940439, 3.3081035370312195, 3.6809178093609316, 3.953939990100013, 4.146927246750695, 4.270743302150588, 4.331324247199061, 4.331324247199061, 4.270743302150588, 4.146927246750695, 3.953939990100014, 3.6809178093609316, 3.30810353703122, 2.7958577794043906, 2.04180583114145, 0.0], [7.198293278059966e-16, 2.766048246082227, 3.7875675488170897, 4.48151036053619, 4.98656439082835, 5.356429395941348, 5.617870545061986, 5.785604997404221, 5.867674415681694, 5.867674415681694, 5.785604997404221, 5.617870545061986, 5.3564293959413485, 4.98656439082835, 4.481510360536191, 3.78756754881709, 2.7660482460822267, 0.0], [8.851684164263618e-16, 3.401387594481843, 4.657541780789848, 5.510877753654521, 6.131938689815697, 6.586758753712339, 6.908250861655702, 7.114512587629632, 7.215432700505725, 7.215432700505725, 7.114512587629632, 6.908250861655702, 6.58675875371234, 6.131938689815697, 5.510877753654521, 4.657541780789848, 3.401387594481842, 0.0], [1.022057463823785e-15, 3.9274035469237782, 5.377818787689879, 6.363121001405076, 7.080227433936408, 7.6053842655358626, 7.976594311428062, 8.214753889448172, 8.331281041457704, 8.331281041457704, 8.214753889448172, 7.976594311428062, 7.605384265535864, 7.080227433936408, 6.3631210014050765, 5.37781878768988, 3.9274035469237774, 0.0], [1.1260967433822294e-15, 4.327189517889181, 5.92524827386952, 7.010848304577073, 7.800951842699867, 8.379566469334046, 8.788563456867465, 9.050966242137834, 9.179355154736356, 9.179355154736356, 9.050966242137834, 8.788563456867465, 8.379566469334048, 7.800951842699867, 7.010848304577074, 5.925248273869521, 4.32718951788918, 0.0], [1.1939423470528821e-15, 4.58789605732623, 6.282235405216475, 7.433241174694762, 8.270947240594394, 8.884422512077574, 9.318060941549046, 9.596273092645356, 9.732397240543204, 9.732397240543204, 9.596273092645356, 9.318060941549046, 8.884422512077576, 8.270947240594394, 7.433241174694763, 6.2822354052164755, 4.587896057326229, 0.0], [1.2234136613102199e-15, 4.701143842547364, 6.437306321599264, 7.6167235573665515, 8.475107588818162, 9.10372590515574, 9.548068280643161, 9.833147830115456, 9.97263207119587, 9.97263207119587, 9.833147830115456, 9.548068280643161, 9.103725905155741, 8.475107588818162, 7.616723557366552, 6.437306321599265, 4.7011438425473635, 0.0], [1.2135634538649336e-15, 4.663292996554989, 6.385476916172569, 7.555398177843563, 8.40687100579556, 9.030428057071573, 9.471192849020657, 9.75397710558466, 9.8923383015713, 9.8923383015713, 9.75397710558466, 9.471192849020657, 9.030428057071575, 8.40687100579556, 7.555398177843564, 6.3854769161725695, 4.663292996554988, 0.0], [1.1647083184890926e-15, 4.475560076683077, 6.128413028672179, 7.251236084282354, 8.068430671450187, 8.666884820972172, 9.089905486307194, 9.361305531281278, 9.494096639491161, 9.494096639491161, 9.361305531281278, 9.089905486307194, 8.666884820972172, 8.068430671450187, 7.251236084282354, 6.12841302867218, 4.4755600766830765, 0.0], [1.0784184994318154e-15, 4.143978973443475, 5.67437690395523, 6.714013296635386, 7.470664336597534, 8.02478077559014, 8.41646108206467, 8.667753894694668, 8.790706899649043, 8.790706899649043, 8.667753894694668, 8.41646108206467, 8.024780775590141, 7.470664336597534, 6.714013296635387, 5.674376903955231, 4.143978973443474, 0.0], [9.57467422477103e-16, 3.6792069763201423, 5.037961636652292, 5.960996597326015, 6.632784703083545, 7.124753673269025, 7.472504693557343, 7.695613516080911, 7.804776607034474, 7.804776607034474, 7.695613516080911, 7.472504693557343, 7.124753673269026, 6.632784703083545, 5.960996597326016, 5.037961636652292, 3.6792069763201414, 0.0], [8.057425547571569e-16, 3.096182239716297, 4.239622137098706, 5.0163885626542495, 5.58172191173902, 5.995731125622196, 6.288375855801743, 6.476129787088423, 6.567994372478235, 6.567994372478235, 6.476129787088423, 6.288375855801743, 5.995731125622197, 5.58172191173902, 5.01638856265425, 4.239622137098707, 3.0961822397162964, 0.0], [6.281204583601337e-16, 2.4136436583807366, 3.305017693686055, 3.910549672080518, 4.351257985495115, 4.6740008462938665, 4.902133443947784, 5.048497918161574, 5.1201113946267744, 5.1201113946267744, 5.048497918161574, 4.902133443947784, 4.674000846293867, 4.351257985495115, 3.9105496720805184, 3.3050176936860556, 2.413643658380736, 0.0], [4.3031005361218095e-16, 1.6535285839122027, 2.2641872622207173, 2.679022497435131, 2.9809410473704014, 3.2020443339849454, 3.358332429716511, 3.458603172227088, 3.5076638237103213, 3.5076638237103213, 3.458603172227088, 3.358332429716511, 3.202044333984946, 2.9809410473704014, 2.679022497435131, 2.2641872622207178, 1.6535285839122023, 0.0], [2.1866912968084137e-16, 0.8402677402288798, 1.150583989168121, 1.3613893354151259, 1.5148142112567402, 1.6271714821308951, 1.7065918479490225, 1.757546074589055, 1.782477051384411, 1.782477051384411, 1.757546074589055, 1.7065918479490225, 1.6271714821308954, 1.5148142112567402, 1.3613893354151259, 1.1505839891681213, 0.8402677402288797, 0.0], [2.9995195653237157e-31, 1.1526087521386858e-15, 1.5782745338105972e-15, 1.867439612331569e-15, 2.077894978192297e-15, 2.23201725086302e-15, 2.3409594419735527e-15, 2.4108541728694004e-15, 2.4450523940766866e-15, 2.4450523940766866e-15, 2.4108541728694004e-15, 2.3409594419735527e-15, 2.2320172508630206e-15, 2.077894978192297e-15, 1.8674396123315694e-15, 1.5782745338105974e-15, 1.1526087521386856e-15, 0.0]], \"z\": [[-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0], [-10.0, -8.823529411764705, -7.647058823529411, -6.470588235294118, -5.294117647058823, -4.11764705882353, -2.941176470588236, -1.7647058823529418, -0.588235294117647, 0.5882352941176482, 1.764705882352943, 2.9411764705882373, 4.117647058823529, 5.294117647058823, 6.470588235294117, 7.647058823529411, 8.823529411764707, 10.0]]}], {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('ef403284-6a59-48e2-b0f4-de24074c0eb6'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; });","title":"Plotting (interactive)"},{"location":"python/functions/","text":"Functions A function takes input parameters, executes a series of computations with those inputs and then returns a final output value. Functions give us an efficient way to save and reuse a block of code over and over again with different input values. In this section, we summarize the built-in functions in the standard Python library and then we discuss how to define our own functions. Built-in Functions The standard Python library has a collection of built-in functions ready for us to use. We have already seen a few of these functions in previous sections such as type() , print() and sum() . The following is a list of built-in functions that we'll use most often: Function Description print(object) print object to output type(object) return the type of object abs(x) return the absolute value of x (or modulus if x is complex) int(x) return the integer constructed from float x by truncating decimal len(sequence) return the length of the sequence sum(sequence) return the sum of the entries of sequence max(sequence) return the maximum value in sequence min(sequence) return the minimum value in sequence range(a,b,step) return the range object of integers from a to b (exclusive) by step list(sequence) return a list constructed from sequence sorted(sequence) return the sorted list from the items in sequence reversed(sequence) return the reversed iterator object from the items in sequence enumerate(sequence) return the enumerate object constructed from sequence zip(a,b) return an iterator that aggregates items from sequences a and b Use the function print() to display values: pi = 3.14159 print(pi) 3.14159 Use the function type() to see the datatype of a value: type(pi) float Use the function abs() to compute the absolute value of a real number: x = -2019 abs(x) 2019 Or compute the magnitude of a complex number: z = 3 - 4j abs(z) 5.0 Use the function int() to truncate a float into an int: pi = 3.14159 int(pi) 3 The function truncates floats always towards 0: c = -1.2345 int(c) -1 Use the function len() to compute the length of a sequence: primes = [2,3,5,7,11,13,17,19,23,29,31,37,41] len(primes) 13 Use the function sum() to compute the sum of a sequence: one_to_hundred = range(1,101) sum(one_to_hundred) 5050 Use the functions max() and min() to compute the maximum and minimum values in a sequence. random = [8,27,3,7,6,14,28,19] print(max(random)) print(min(random)) 28 3 Use the function list() to convert a sequence (such as a range or a tuple) into a list: list(range(0,10,2)) [0, 2, 4, 6, 8] Use the function sorted() to sort a sequence: sorted_random = sorted(random) print(random) print(sorted_random) [8, 27, 3, 7, 6, 14, 28, 19] [3, 6, 7, 8, 14, 19, 27, 28] Use the function reversed() to reverse the order of a sequence: reversed_random = list(reversed(random)) print(random) print(reversed_random) [8, 27, 3, 7, 6, 14, 28, 19] [19, 28, 14, 6, 7, 3, 27, 8] Use the function enumerate() to enumerate a sequence: squares = [n**2 for n in range(0,6)] print(squares) enum_squares = list(enumerate(squares)) print(enum_squares) [0, 1, 4, 9, 16, 25] [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)] Use the function zip() to combine sequences into a list of pairs: random_1 = [-2,4,0,5] random_2 = [7,-1,9,3] random_zip = list(zip(random_1,random_2)) print(random_zip) [(-2, 7), (4, -1), (0, 9), (5, 3)] Notice in the last three examples reversed() , enumerate() and zip() we use the function list() to create a list from the output of each function. This is because these functions return iterator objects (similar to range objects) which only yield values when explicitly told to do so. Defining Functions Let's begin with a simple example. Define a function which returns the average of a sequence of numbers: def average(x): \"Compute the average of the values in the sequence x.\" sum_x = sum(x) length_x = len(x) return sum_x / length_x The main points to observe are: Start the function definition with the def keyword. Follow def with the name of the function. Follow the function name with the list of input parameters separated by commas and within parentheses. End the def statement with a colon : . Indent the body of the function by 4 spaces. Use the return keyword to specify the output of the function (but it is not always necessary). The second line is a documentation string (enclosed in quotation marks \" ... \") which describes the function. In Python, code blocks are defined using indentation . This means that lines of code indented the same amount are considered one block. In the example above, the four indented lines below the def statement form the body of the function. Notice that there is no output when we execute the cell containing the function definition. This is because we've only defined the function and it's waiting for us to use it! We need to call the function with values for the input parameters and then the function will compute and return the output value. Let's test our function: average([1,2,3,4]) 2.5 The function returns the expected value. Success! Documentation Strings The first line after the def statement in a function definition should be a documentation string (or docstring). A docstring is text (enclosed in double quotes \" ... \" or triple quotes ''' ... ''' ) which describes your function. Use triple quotes for a multiline docstring. See the Python documentation for all the conventions related to documentation strings. A helpful feature of the Jupyter notebook is the question mark operator ? . This will display the docstring of a function. Keep this in mind when writing your docstrings: other people will read your docstring to learn how to use your function. For example, use the question mark ? to view the documentation for the built-in function sum() : sum? I recommend (but it's up to you) a style similar to NumPy's style guide for docstrings: def function_name(param1,param2,param3): '''First line is a one-line general summary. A longer paragraph describing the function and relevant equations or algorithms used in the function. Parameters ---------- param1 : datatype Describe the parameter. param2 : datatype Describe the parameter. param3 : datatype Describe the parameters and continue with more details if necessary on a new set of indented lines. Returns ------- datatype A description of the output of the function and also describe special behaviour. Examples -------- >>> function_name(1,2,3) 1.2345 ''' See these examples and these examples . Keyword Arguments When we define functions, we list the input parameters. These are called positional parameters (or positional arguments) because the position in the def statement determines which parameter is which. def poly(x,y): \"Compute x + y**2.\" return x + y**2 poly(1,2) 5 poly(2,1) 3 A keyword argument allows us to insert default values for some parameters and we call them by name and the order doesn't matter. def greeting(first_name,last_name,salutation='Hello, '): return \"{0}{1} {2}!\".format(salutation, first_name, last_name) greeting('Patrick','Walls') 'Hello, Patrick Walls!' greeting('Walls','Patrick') 'Hello, Walls Patrick!' greeting('LeBron','James',salutation='I love you ') 'I love you LeBron James!' In this function, first_name and last_name are positional arguments and saluation is a keyword argument. For example, the function pandas.read_csv in the pandas package has many keyword arguments: import pandas as pd pd.read_csv? So many keyword arguments! The keyword arguments I use most often are encoding , skiprows and usecols . Comments Comments in a Python program are plain text descriptions of Python code which explain code to the reader. Python will ignore lines which begin with the hash symbol # and so we use the hash symbol to write comments to explain the steps in a program. See the examples below. Examples Area of a Triangle Let's define a function called area_triangle which takes an input parameter vertices which is a list of tuples representing the vertices of a triangle and returns the area of the triangle using Heron's Formula : A = \\sqrt{s(s-a)(s-b)(s-c)} A = \\sqrt{s(s-a)(s-b)(s-c)} where a a , b b and c c are the side lengths and s s is the semiperimeter s = \\frac{a+b+c}{2} s = \\frac{a+b+c}{2} def area_triangle(vertices): '''Compute the area of the triangle with given vertices. Parameters ---------- vertices : list of tuples of numbers The vertices of a triangle [(x1,y1),(x2,y2),(x3,y3)]. Returns ------- float Area of the triangle computed by Heron's formula. Examples -------- >>> area_triangle([(0,0),(3,0),(3,4)]) 6.0 >>> area_triangle([(-1,2),(-3,-1),(4,1)]) 8.499999999999996 ''' # Find the x distance between vertices 0 and 1 a_x = abs(vertices[0][0] - vertices[1][0]) # Find the y distance between vertices 0 and 1 a_y = abs(vertices[0][1] - vertices[1][1]) # Compute length of side a a = (a_x**2 + a_y**2)**0.5 # Find the x distance between vertices 1 and 2 b_x = abs(vertices[1][0] - vertices[2][0]) # Find the y distance between vertices 1 and 2 b_y = abs(vertices[1][1] - vertices[2][1]) # Compute length of side b b = (b_x**2 + b_y**2)**0.5 # Find the x distance between vertices 0 and 2 c_x = abs(vertices[0][0] - vertices[2][0]) # Find the y distance between vertices 0 and 2 c_y = abs(vertices[0][1] - vertices[2][1]) # Compute length of side c c = (c_x**2 + c_y**2)**0.5 # Compute semiperimeter s = (a + b + c)/2 # Compute area area = (s*(s - a)*(s - b)*(s - c))**0.5 return area Let's test our function. We know that the area of a right angle triangle with sides of length 1 and hypotenuse \\sqrt{2} \\sqrt{2} has area 0.5 0.5 . area_triangle([(0,0),(0,1),(1,0)]) 0.49999999999999983 Let's test again on another triangle with base b=3 b=3 and height h=4 h=4 and therefore its area is A=3(4)/2=6 A=3(4)/2=6 . area_triangle([(0,0),(3,0),(1,4)]) 6.000000000000003 The function area_triangle returns the expected values. Success! Riemann Zeta Function The Riemann zeta function is the infinite sum \\zeta(s) = \\sum_{n = 1}^{\\infty} \\frac{1}{n^s} \\zeta(s) = \\sum_{n = 1}^{\\infty} \\frac{1}{n^s} Write a function called zeta which takes 2 input parameters s and N and returns the partial sum: \\sum_{n=1}^N \\frac{1}{n^s} \\sum_{n=1}^N \\frac{1}{n^s} def zeta(s,N): \"Compute the Nth partial sum of the zeta function at s.\" terms = [1/n**s for n in range(1,N+1)] partial_sum = sum(terms) return partial_sum Let's test our function on input values for which we know the result: zeta(1,1) 1.0 zeta(2,2) 1.25 Now let's use our function to approximate special values of the Riemann zeta function : \\zeta(2) = \\frac{\\pi^2}{6} \\hspace{10mm} \\text{and} \\hspace{10mm} \\zeta(4) = \\frac{\\pi^4}{90} \\zeta(2) = \\frac{\\pi^2}{6} \\hspace{10mm} \\text{and} \\hspace{10mm} \\zeta(4) = \\frac{\\pi^4}{90} Compute the partial sum for s=2 s=2 and N=100000 N=100000 : zeta(2,100000) 1.6449240668982423 Compare to an approximation of the special value \\pi^2/6 \\pi^2/6 : 3.14159265**2/6 1.6449340630890041 Compute the partial sum for s=4 s=4 and N=100000 N=100000 : zeta(4,100000) 1.082323233710861 Compare to an approximation of the special value \\pi^4/90 \\pi^4/90 : 3.14159265**4/90 1.0823232287641997 Harmonic Mean Write a function called harmonic_mean which takes an input parameter s , a list of numbers x_1, \\dots, x_n x_1, \\dots, x_n of length n n , and returns the harmonic mean of the sequence: \\frac{n}{\\frac{1}{x_1} + \\frac{1}{x_2} + \\cdots + \\frac{1}{x_n}} \\frac{n}{\\frac{1}{x_1} + \\frac{1}{x_2} + \\cdots + \\frac{1}{x_n}} def harmonic_mean(s): \"Compute the harmonic mean of the numbers in the sequence s.\" n = len(s) terms = [1/s[i] for i in range(0,n)] result = n/sum(terms) return result Let's test our function: harmonic_mean([1,1,1,1]) 1.0 harmonic_mean([1,2,3]) 1.6363636363636365 Riemann Sums Write a function called mn_integral which takes input parameters m , n , a , b and N and returns the (right) Riemann sum : $$ \\int_a^b f(x) \\, dx \\approx \\sum_{k=1}^N f(x_k) \\Delta x \\ \\ , \\ \\ f(x) = \\frac{x^m + 1}{x^n + 1} $$ and \\Delta x = (b-a)/N \\Delta x = (b-a)/N and x_k = a + k \\Delta x x_k = a + k \\Delta x . def mn_integral(m,n,a,b,N): '''Compute the (right) Riemann sum for the function f(x) = (x^m + 1)/(x^n + 1) on interval [a,b] with a partition of N subintervals of equal size. Parameters ---------- m , n : numbers Parameters in function f(x) = (x^m + 1)/(x^n + 1) a , b : numbers Limits of integration. N : integer Size of partition of interval [a,b]. Returns ------- float The (right) Riemann sum of f(x) from a to b using a partition of size N. Examples -------- >>> mn_integral(0,1,0,1,2) 1.1666666666666665 >>> mn_integral(1,2,0,1,100000) 1.1319717536649336 ''' # Compute the width of subintervals delta_x = (b - a)/N # Create N+1 evenly spaced x values from a to b x = [a + k*delta_x for k in range(0,N+1)] # Compute terms of the sum terms = [(x[k]**m + 1)/(x[k]**n + 1)*delta_x for k in range(1,N+1)] # Compute the sum riemann_sum = sum(terms) return riemann_sum Let's test our function on input for which we know the result. Let m=0 m=0 , n=1 n=1 , a=0 a=0 , b=1 b=1 and N=2 N=2 . Then x_0 = 0 x_0 = 0 , x_1 = 1/2 x_1 = 1/2 , x_2 = 1 x_2 = 1 and \\Delta x = 1/2 \\Delta x = 1/2 , and we compute: \\begin{aligned} \\sum_{k=1}^N f(x_k) \\Delta x &= \\sum_{k=1}^2 \\frac{x_k^0 + 1}{x_k^1 + 1} \\Delta x \\\\\\ &= \\frac{2}{(1/2) + 1} \\cdot \\frac{1}{2} + \\frac{2}{1 + 1} \\cdot \\frac{1}{2} \\\\\\ &= \\frac{7}{6} \\end{aligned} \\begin{aligned} \\sum_{k=1}^N f(x_k) \\Delta x &= \\sum_{k=1}^2 \\frac{x_k^0 + 1}{x_k^1 + 1} \\Delta x \\\\\\ &= \\frac{2}{(1/2) + 1} \\cdot \\frac{1}{2} + \\frac{2}{1 + 1} \\cdot \\frac{1}{2} \\\\\\ &= \\frac{7}{6} \\end{aligned} mn_integral(0,1,0,1,2) 1.1666666666666665 7/6 1.1666666666666667 Let's test our function on another example. Let m=1 m=1 , n=2 n=2 , a=0 a=0 , and b=1 b=1 . We can solve this integral exactly: \\begin{aligned} \\int_0^1 \\frac{x + 1}{x^2 + 1} dx &= \\int_0^1 \\frac{x}{x^2 + 1} dx + \\int_0^1 \\frac{1}{x^2 + 1} dx \\\\\\ &= \\left. \\left( \\frac{1}{2} \\ln(x^2 + 1) + \\arctan x \\right) \\right|_0^1 \\\\\\ &= \\frac{1}{2} \\ln(2) + \\frac{\\pi}{4} \\end{aligned} \\begin{aligned} \\int_0^1 \\frac{x + 1}{x^2 + 1} dx &= \\int_0^1 \\frac{x}{x^2 + 1} dx + \\int_0^1 \\frac{1}{x^2 + 1} dx \\\\\\ &= \\left. \\left( \\frac{1}{2} \\ln(x^2 + 1) + \\arctan x \\right) \\right|_0^1 \\\\\\ &= \\frac{1}{2} \\ln(2) + \\frac{\\pi}{4} \\end{aligned} Approximate this integral with a Riemann sum for N=100000 N=100000 : mn_integral(1,2,0,1,100000) 1.1319717536649336 Since \\pi \\approx 3.14159265 \\pi \\approx 3.14159265 and \\ln(2) \\approx 0.69314718 \\ln(2) \\approx 0.69314718 , we compare to the approximation: 0.5*0.69314718 + 3.14159265/4 1.1319717525000002 Our function computes the expected values! Exercises Write a function called power_mean which takes input parameters sequence and p where sequence is a list of positive real numbers x_1, \\dots, x_n x_1, \\dots, x_n and p is a nonzero number. The function returns the power mean with exponent p : \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} Plug in large positive values of p p and various lists of numbers to verify \\lim_{p \\to \\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\max \\{x_1, \\dots, x_n \\} \\lim_{p \\to \\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\max \\{x_1, \\dots, x_n \\} Plug in large negative values of p p and various lists of numbers to verify \\lim_{p \\to -\\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\min \\{x_1, \\dots, x_n \\} \\lim_{p \\to -\\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\min \\{x_1, \\dots, x_n \\} Write a function called arctan_taylor which takes input parameters x and N and return the Taylor polynomial of degree N N of the function \\arctan x \\arctan x evaluated at x : \\sum_{k=0}^N (-1)^k \\frac{x^{2k + 1}}{2k + 1} \\sum_{k=0}^N (-1)^k \\frac{x^{2k + 1}}{2k + 1} Write a function called zips which takes input parameters a and b , where a and b are lists of the equal length, and returns the list of tuples which aggregates the sequence. (In other words, write your own version of the built-in function zip() ... without using zip() of course.) For example zips([-1,3,4,0],[5,7,1,-9]) returns the list [(-1, 5), (3, 7), (4, 1), (0, -9)] . Write a function called sqrt_integral which takes input parameters u , p and N and returns the Riemann sum (using the midpoints x_k^\\* x_k^\\* of a partition of size N N ): \\int_0^u \\frac{1}{\\sqrt{1 + x^p}} dx \\approx \\sum_{k=1}^N \\frac{1}{\\sqrt{1 + (x_k^*)^p}} \\Delta x \\int_0^u \\frac{1}{\\sqrt{1 + x^p}} dx \\approx \\sum_{k=1}^N \\frac{1}{\\sqrt{1 + (x_k^*)^p}} \\Delta x where \\Delta x = u/N \\Delta x = u/N and x_k^* = (x_k + x_{k-1})/2 x_k^* = (x_k + x_{k-1})/2 for endpoints x_k = k \\Delta x x_k = k \\Delta x .","title":"Functions"},{"location":"python/functions/#functions","text":"A function takes input parameters, executes a series of computations with those inputs and then returns a final output value. Functions give us an efficient way to save and reuse a block of code over and over again with different input values. In this section, we summarize the built-in functions in the standard Python library and then we discuss how to define our own functions.","title":"Functions"},{"location":"python/functions/#built-in-functions","text":"The standard Python library has a collection of built-in functions ready for us to use. We have already seen a few of these functions in previous sections such as type() , print() and sum() . The following is a list of built-in functions that we'll use most often: Function Description print(object) print object to output type(object) return the type of object abs(x) return the absolute value of x (or modulus if x is complex) int(x) return the integer constructed from float x by truncating decimal len(sequence) return the length of the sequence sum(sequence) return the sum of the entries of sequence max(sequence) return the maximum value in sequence min(sequence) return the minimum value in sequence range(a,b,step) return the range object of integers from a to b (exclusive) by step list(sequence) return a list constructed from sequence sorted(sequence) return the sorted list from the items in sequence reversed(sequence) return the reversed iterator object from the items in sequence enumerate(sequence) return the enumerate object constructed from sequence zip(a,b) return an iterator that aggregates items from sequences a and b Use the function print() to display values: pi = 3.14159 print(pi) 3.14159 Use the function type() to see the datatype of a value: type(pi) float Use the function abs() to compute the absolute value of a real number: x = -2019 abs(x) 2019 Or compute the magnitude of a complex number: z = 3 - 4j abs(z) 5.0 Use the function int() to truncate a float into an int: pi = 3.14159 int(pi) 3 The function truncates floats always towards 0: c = -1.2345 int(c) -1 Use the function len() to compute the length of a sequence: primes = [2,3,5,7,11,13,17,19,23,29,31,37,41] len(primes) 13 Use the function sum() to compute the sum of a sequence: one_to_hundred = range(1,101) sum(one_to_hundred) 5050 Use the functions max() and min() to compute the maximum and minimum values in a sequence. random = [8,27,3,7,6,14,28,19] print(max(random)) print(min(random)) 28 3 Use the function list() to convert a sequence (such as a range or a tuple) into a list: list(range(0,10,2)) [0, 2, 4, 6, 8] Use the function sorted() to sort a sequence: sorted_random = sorted(random) print(random) print(sorted_random) [8, 27, 3, 7, 6, 14, 28, 19] [3, 6, 7, 8, 14, 19, 27, 28] Use the function reversed() to reverse the order of a sequence: reversed_random = list(reversed(random)) print(random) print(reversed_random) [8, 27, 3, 7, 6, 14, 28, 19] [19, 28, 14, 6, 7, 3, 27, 8] Use the function enumerate() to enumerate a sequence: squares = [n**2 for n in range(0,6)] print(squares) enum_squares = list(enumerate(squares)) print(enum_squares) [0, 1, 4, 9, 16, 25] [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)] Use the function zip() to combine sequences into a list of pairs: random_1 = [-2,4,0,5] random_2 = [7,-1,9,3] random_zip = list(zip(random_1,random_2)) print(random_zip) [(-2, 7), (4, -1), (0, 9), (5, 3)] Notice in the last three examples reversed() , enumerate() and zip() we use the function list() to create a list from the output of each function. This is because these functions return iterator objects (similar to range objects) which only yield values when explicitly told to do so.","title":"Built-in Functions"},{"location":"python/functions/#defining-functions","text":"Let's begin with a simple example. Define a function which returns the average of a sequence of numbers: def average(x): \"Compute the average of the values in the sequence x.\" sum_x = sum(x) length_x = len(x) return sum_x / length_x The main points to observe are: Start the function definition with the def keyword. Follow def with the name of the function. Follow the function name with the list of input parameters separated by commas and within parentheses. End the def statement with a colon : . Indent the body of the function by 4 spaces. Use the return keyword to specify the output of the function (but it is not always necessary). The second line is a documentation string (enclosed in quotation marks \" ... \") which describes the function. In Python, code blocks are defined using indentation . This means that lines of code indented the same amount are considered one block. In the example above, the four indented lines below the def statement form the body of the function. Notice that there is no output when we execute the cell containing the function definition. This is because we've only defined the function and it's waiting for us to use it! We need to call the function with values for the input parameters and then the function will compute and return the output value. Let's test our function: average([1,2,3,4]) 2.5 The function returns the expected value. Success!","title":"Defining Functions"},{"location":"python/functions/#documentation-strings","text":"The first line after the def statement in a function definition should be a documentation string (or docstring). A docstring is text (enclosed in double quotes \" ... \" or triple quotes ''' ... ''' ) which describes your function. Use triple quotes for a multiline docstring. See the Python documentation for all the conventions related to documentation strings. A helpful feature of the Jupyter notebook is the question mark operator ? . This will display the docstring of a function. Keep this in mind when writing your docstrings: other people will read your docstring to learn how to use your function. For example, use the question mark ? to view the documentation for the built-in function sum() : sum? I recommend (but it's up to you) a style similar to NumPy's style guide for docstrings: def function_name(param1,param2,param3): '''First line is a one-line general summary. A longer paragraph describing the function and relevant equations or algorithms used in the function. Parameters ---------- param1 : datatype Describe the parameter. param2 : datatype Describe the parameter. param3 : datatype Describe the parameters and continue with more details if necessary on a new set of indented lines. Returns ------- datatype A description of the output of the function and also describe special behaviour. Examples -------- >>> function_name(1,2,3) 1.2345 ''' See these examples and these examples .","title":"Documentation Strings"},{"location":"python/functions/#keyword-arguments","text":"When we define functions, we list the input parameters. These are called positional parameters (or positional arguments) because the position in the def statement determines which parameter is which. def poly(x,y): \"Compute x + y**2.\" return x + y**2 poly(1,2) 5 poly(2,1) 3 A keyword argument allows us to insert default values for some parameters and we call them by name and the order doesn't matter. def greeting(first_name,last_name,salutation='Hello, '): return \"{0}{1} {2}!\".format(salutation, first_name, last_name) greeting('Patrick','Walls') 'Hello, Patrick Walls!' greeting('Walls','Patrick') 'Hello, Walls Patrick!' greeting('LeBron','James',salutation='I love you ') 'I love you LeBron James!' In this function, first_name and last_name are positional arguments and saluation is a keyword argument. For example, the function pandas.read_csv in the pandas package has many keyword arguments: import pandas as pd pd.read_csv? So many keyword arguments! The keyword arguments I use most often are encoding , skiprows and usecols .","title":"Keyword Arguments"},{"location":"python/functions/#comments","text":"Comments in a Python program are plain text descriptions of Python code which explain code to the reader. Python will ignore lines which begin with the hash symbol # and so we use the hash symbol to write comments to explain the steps in a program. See the examples below.","title":"Comments"},{"location":"python/functions/#examples","text":"","title":"Examples"},{"location":"python/functions/#area-of-a-triangle","text":"Let's define a function called area_triangle which takes an input parameter vertices which is a list of tuples representing the vertices of a triangle and returns the area of the triangle using Heron's Formula : A = \\sqrt{s(s-a)(s-b)(s-c)} A = \\sqrt{s(s-a)(s-b)(s-c)} where a a , b b and c c are the side lengths and s s is the semiperimeter s = \\frac{a+b+c}{2} s = \\frac{a+b+c}{2} def area_triangle(vertices): '''Compute the area of the triangle with given vertices. Parameters ---------- vertices : list of tuples of numbers The vertices of a triangle [(x1,y1),(x2,y2),(x3,y3)]. Returns ------- float Area of the triangle computed by Heron's formula. Examples -------- >>> area_triangle([(0,0),(3,0),(3,4)]) 6.0 >>> area_triangle([(-1,2),(-3,-1),(4,1)]) 8.499999999999996 ''' # Find the x distance between vertices 0 and 1 a_x = abs(vertices[0][0] - vertices[1][0]) # Find the y distance between vertices 0 and 1 a_y = abs(vertices[0][1] - vertices[1][1]) # Compute length of side a a = (a_x**2 + a_y**2)**0.5 # Find the x distance between vertices 1 and 2 b_x = abs(vertices[1][0] - vertices[2][0]) # Find the y distance between vertices 1 and 2 b_y = abs(vertices[1][1] - vertices[2][1]) # Compute length of side b b = (b_x**2 + b_y**2)**0.5 # Find the x distance between vertices 0 and 2 c_x = abs(vertices[0][0] - vertices[2][0]) # Find the y distance between vertices 0 and 2 c_y = abs(vertices[0][1] - vertices[2][1]) # Compute length of side c c = (c_x**2 + c_y**2)**0.5 # Compute semiperimeter s = (a + b + c)/2 # Compute area area = (s*(s - a)*(s - b)*(s - c))**0.5 return area Let's test our function. We know that the area of a right angle triangle with sides of length 1 and hypotenuse \\sqrt{2} \\sqrt{2} has area 0.5 0.5 . area_triangle([(0,0),(0,1),(1,0)]) 0.49999999999999983 Let's test again on another triangle with base b=3 b=3 and height h=4 h=4 and therefore its area is A=3(4)/2=6 A=3(4)/2=6 . area_triangle([(0,0),(3,0),(1,4)]) 6.000000000000003 The function area_triangle returns the expected values. Success!","title":"Area of a Triangle"},{"location":"python/functions/#riemann-zeta-function","text":"The Riemann zeta function is the infinite sum \\zeta(s) = \\sum_{n = 1}^{\\infty} \\frac{1}{n^s} \\zeta(s) = \\sum_{n = 1}^{\\infty} \\frac{1}{n^s} Write a function called zeta which takes 2 input parameters s and N and returns the partial sum: \\sum_{n=1}^N \\frac{1}{n^s} \\sum_{n=1}^N \\frac{1}{n^s} def zeta(s,N): \"Compute the Nth partial sum of the zeta function at s.\" terms = [1/n**s for n in range(1,N+1)] partial_sum = sum(terms) return partial_sum Let's test our function on input values for which we know the result: zeta(1,1) 1.0 zeta(2,2) 1.25 Now let's use our function to approximate special values of the Riemann zeta function : \\zeta(2) = \\frac{\\pi^2}{6} \\hspace{10mm} \\text{and} \\hspace{10mm} \\zeta(4) = \\frac{\\pi^4}{90} \\zeta(2) = \\frac{\\pi^2}{6} \\hspace{10mm} \\text{and} \\hspace{10mm} \\zeta(4) = \\frac{\\pi^4}{90} Compute the partial sum for s=2 s=2 and N=100000 N=100000 : zeta(2,100000) 1.6449240668982423 Compare to an approximation of the special value \\pi^2/6 \\pi^2/6 : 3.14159265**2/6 1.6449340630890041 Compute the partial sum for s=4 s=4 and N=100000 N=100000 : zeta(4,100000) 1.082323233710861 Compare to an approximation of the special value \\pi^4/90 \\pi^4/90 : 3.14159265**4/90 1.0823232287641997","title":"Riemann Zeta Function"},{"location":"python/functions/#harmonic-mean","text":"Write a function called harmonic_mean which takes an input parameter s , a list of numbers x_1, \\dots, x_n x_1, \\dots, x_n of length n n , and returns the harmonic mean of the sequence: \\frac{n}{\\frac{1}{x_1} + \\frac{1}{x_2} + \\cdots + \\frac{1}{x_n}} \\frac{n}{\\frac{1}{x_1} + \\frac{1}{x_2} + \\cdots + \\frac{1}{x_n}} def harmonic_mean(s): \"Compute the harmonic mean of the numbers in the sequence s.\" n = len(s) terms = [1/s[i] for i in range(0,n)] result = n/sum(terms) return result Let's test our function: harmonic_mean([1,1,1,1]) 1.0 harmonic_mean([1,2,3]) 1.6363636363636365","title":"Harmonic Mean"},{"location":"python/functions/#riemann-sums","text":"Write a function called mn_integral which takes input parameters m , n , a , b and N and returns the (right) Riemann sum : $$ \\int_a^b f(x) \\, dx \\approx \\sum_{k=1}^N f(x_k) \\Delta x \\ \\ , \\ \\ f(x) = \\frac{x^m + 1}{x^n + 1} $$ and \\Delta x = (b-a)/N \\Delta x = (b-a)/N and x_k = a + k \\Delta x x_k = a + k \\Delta x . def mn_integral(m,n,a,b,N): '''Compute the (right) Riemann sum for the function f(x) = (x^m + 1)/(x^n + 1) on interval [a,b] with a partition of N subintervals of equal size. Parameters ---------- m , n : numbers Parameters in function f(x) = (x^m + 1)/(x^n + 1) a , b : numbers Limits of integration. N : integer Size of partition of interval [a,b]. Returns ------- float The (right) Riemann sum of f(x) from a to b using a partition of size N. Examples -------- >>> mn_integral(0,1,0,1,2) 1.1666666666666665 >>> mn_integral(1,2,0,1,100000) 1.1319717536649336 ''' # Compute the width of subintervals delta_x = (b - a)/N # Create N+1 evenly spaced x values from a to b x = [a + k*delta_x for k in range(0,N+1)] # Compute terms of the sum terms = [(x[k]**m + 1)/(x[k]**n + 1)*delta_x for k in range(1,N+1)] # Compute the sum riemann_sum = sum(terms) return riemann_sum Let's test our function on input for which we know the result. Let m=0 m=0 , n=1 n=1 , a=0 a=0 , b=1 b=1 and N=2 N=2 . Then x_0 = 0 x_0 = 0 , x_1 = 1/2 x_1 = 1/2 , x_2 = 1 x_2 = 1 and \\Delta x = 1/2 \\Delta x = 1/2 , and we compute: \\begin{aligned} \\sum_{k=1}^N f(x_k) \\Delta x &= \\sum_{k=1}^2 \\frac{x_k^0 + 1}{x_k^1 + 1} \\Delta x \\\\\\ &= \\frac{2}{(1/2) + 1} \\cdot \\frac{1}{2} + \\frac{2}{1 + 1} \\cdot \\frac{1}{2} \\\\\\ &= \\frac{7}{6} \\end{aligned} \\begin{aligned} \\sum_{k=1}^N f(x_k) \\Delta x &= \\sum_{k=1}^2 \\frac{x_k^0 + 1}{x_k^1 + 1} \\Delta x \\\\\\ &= \\frac{2}{(1/2) + 1} \\cdot \\frac{1}{2} + \\frac{2}{1 + 1} \\cdot \\frac{1}{2} \\\\\\ &= \\frac{7}{6} \\end{aligned} mn_integral(0,1,0,1,2) 1.1666666666666665 7/6 1.1666666666666667 Let's test our function on another example. Let m=1 m=1 , n=2 n=2 , a=0 a=0 , and b=1 b=1 . We can solve this integral exactly: \\begin{aligned} \\int_0^1 \\frac{x + 1}{x^2 + 1} dx &= \\int_0^1 \\frac{x}{x^2 + 1} dx + \\int_0^1 \\frac{1}{x^2 + 1} dx \\\\\\ &= \\left. \\left( \\frac{1}{2} \\ln(x^2 + 1) + \\arctan x \\right) \\right|_0^1 \\\\\\ &= \\frac{1}{2} \\ln(2) + \\frac{\\pi}{4} \\end{aligned} \\begin{aligned} \\int_0^1 \\frac{x + 1}{x^2 + 1} dx &= \\int_0^1 \\frac{x}{x^2 + 1} dx + \\int_0^1 \\frac{1}{x^2 + 1} dx \\\\\\ &= \\left. \\left( \\frac{1}{2} \\ln(x^2 + 1) + \\arctan x \\right) \\right|_0^1 \\\\\\ &= \\frac{1}{2} \\ln(2) + \\frac{\\pi}{4} \\end{aligned} Approximate this integral with a Riemann sum for N=100000 N=100000 : mn_integral(1,2,0,1,100000) 1.1319717536649336 Since \\pi \\approx 3.14159265 \\pi \\approx 3.14159265 and \\ln(2) \\approx 0.69314718 \\ln(2) \\approx 0.69314718 , we compare to the approximation: 0.5*0.69314718 + 3.14159265/4 1.1319717525000002 Our function computes the expected values!","title":"Riemann Sums"},{"location":"python/functions/#exercises","text":"Write a function called power_mean which takes input parameters sequence and p where sequence is a list of positive real numbers x_1, \\dots, x_n x_1, \\dots, x_n and p is a nonzero number. The function returns the power mean with exponent p : \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} Plug in large positive values of p p and various lists of numbers to verify \\lim_{p \\to \\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\max \\{x_1, \\dots, x_n \\} \\lim_{p \\to \\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\max \\{x_1, \\dots, x_n \\} Plug in large negative values of p p and various lists of numbers to verify \\lim_{p \\to -\\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\min \\{x_1, \\dots, x_n \\} \\lim_{p \\to -\\infty} \\left( \\frac{1}{n} \\sum_{i=1}^n x_i^p \\right)^{1/p} = \\min \\{x_1, \\dots, x_n \\} Write a function called arctan_taylor which takes input parameters x and N and return the Taylor polynomial of degree N N of the function \\arctan x \\arctan x evaluated at x : \\sum_{k=0}^N (-1)^k \\frac{x^{2k + 1}}{2k + 1} \\sum_{k=0}^N (-1)^k \\frac{x^{2k + 1}}{2k + 1} Write a function called zips which takes input parameters a and b , where a and b are lists of the equal length, and returns the list of tuples which aggregates the sequence. (In other words, write your own version of the built-in function zip() ... without using zip() of course.) For example zips([-1,3,4,0],[5,7,1,-9]) returns the list [(-1, 5), (3, 7), (4, 1), (0, -9)] . Write a function called sqrt_integral which takes input parameters u , p and N and returns the Riemann sum (using the midpoints x_k^\\* x_k^\\* of a partition of size N N ): \\int_0^u \\frac{1}{\\sqrt{1 + x^p}} dx \\approx \\sum_{k=1}^N \\frac{1}{\\sqrt{1 + (x_k^*)^p}} \\Delta x \\int_0^u \\frac{1}{\\sqrt{1 + x^p}} dx \\approx \\sum_{k=1}^N \\frac{1}{\\sqrt{1 + (x_k^*)^p}} \\Delta x where \\Delta x = u/N \\Delta x = u/N and x_k^* = (x_k + x_{k-1})/2 x_k^* = (x_k + x_{k-1})/2 for endpoints x_k = k \\Delta x x_k = k \\Delta x .","title":"Exercises"},{"location":"python/logic/","text":"Logic Boolean Values The boolean type has only two values: True and False . Let's assign a boolean value to a variable and verify the type using the built-in function type() : python_is_fun = True print(python_is_fun) True type(python_is_fun) bool Let's assign the value False to a variable and again verify the type: math_is_scary = False print(math_is_scary) False type(math_is_scary) bool Comparison Operators Comparison operators produce Boolean values as output. For example, if we have variables x and y with numeric values, we can evaluate the expression x < y and the result is a boolean value either True or False . Comparison Operator Description < strictly less than <= less than or equal > strictly greater than >= greater than or equal == equal != not equal For example: 1 == 2 False 1 < 2 True 2 == 2 True 3 != 3.14159 True 20.00000001 >= 20 True Boolean Operators We combine logical expressions using boolean operators and , or and not . Boolean Operator Description A and B returns True if both A and B are True A or B returns True if either A or B is True not A returns True if A is False For example: (1 < 2) and (3 != 5) True (1 < 2) and (3 < 1) False (1 < 2) or (3 < 1) True not (1000 <= 999) True if statements An if statement consists of one or more blocks of code such that only one block is executed depending on logical expressions. Let's do an example: # Determine if roots of polynomial ax^2 + bx + c = 0 # are real, repeated or complex using the # quadratic formula x = (-b \\pm \\sqrt{b^2 - 4ac})/2a a = 10 b = -234 c = 1984 discriminant = b**2 - 4*a*c if discriminant > 0: print(\"Discriminant =\", discriminant) print(\"Roots are real and distinct.\") elif discriminant < 0: print(\"Discriminant =\", discriminant) print(\"Roots are complex.\") else: print(\"Discriminant =\", discriminant) print(\"Roots are real and repeated.\") Discriminant = -24604 Roots are complex. The main points to observe are: Start with the if keyword. Write a logical expression (returning True or False ). End line with a colon : . Indent block 4 spaces after if statement. Include elif and else statements if needed. Only one of the blocks if , elif and else is executed. The block following an else statement will execute only if all other logical expressions before it are False . Examples Invertible Matrix Represent a 2 by 2 square matrix as a list of lists. For example, represent the matrix \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} as the list of lists [[2,-1],[5,7]] . Write a function called invertible which takes an input parameter M , a list of lists representing a 2 by 2 matrix, and returns True if the matrix M is invertible and False if not. def invertible(M): '''Determine if M is invertible. Parameters ---------- M : list of lists Representation of a 2 by 2 matrix M = [[a,b],[c,d]]. Returns ------- bool True if M is invertible and False if not. Examples -------- >>> invertible([[1,2],[3,4]]) True ''' # A matrix M is invertible if and only if # the determinant is not zero where # det(M) = ad - bc for M = [[a,b],[c,d]] determinant = M[0][0] * M[1][1] - M[0][1] * M[1][0] if determinant != 0: return True else: return False Let's test our function: invertible([[1,2],[3,4]]) True invertible([[1,1],[3,3]]) False Concavity of a Polynomial Write a function called concave_up which takes input parameters p and a where p is a list representing a polynomial p(x) p(x) and a is a number, and returns True if the function p(x) p(x) is concave up at x=a x=a (ie. its second derivative is positive at x=a x=a , p''(a) > 0 p''(a) > 0 ). We'll use the second derivative test for polynomials. In particular, if we have a polynomial of degree n n p(x) = c_0 + c_1 x + c_2 x^2 + \\cdots + c_n x^n p(x) = c_0 + c_1 x + c_2 x^2 + \\cdots + c_n x^n then the second derivative of p(x) p(x) at x=a x=a is the sum p''(a) = 2(1) c_2 + 3(2)c_3 a + 4(3)c_4 a^2 + \\cdots + n(n-1)c_n a^{n-2} p''(a) = 2(1) c_2 + 3(2)c_3 a + 4(3)c_4 a^2 + \\cdots + n(n-1)c_n a^{n-2} def concave_up(p,a): '''Determine if the polynomial p(x) is concave up at x=a. Parameters ---------- p : list of numbers List [a_0,a_1,a_2,...,a_n] represents the polynomial p(x) = a_0 + a_1*x + a_2*x**2 + ... + a_n*x**n Returns ------- bool True if p(x) is concave up at x=a (ie. p''(a) > 0) and False otherwise. Examples -------- >>> concave_up([1,0,-2],0) False >>> concave_up([1,0,2],0) True ''' # Degree of the polynomial p(x) degree = len(p) - 1 # p''(a) == 0 if degree of p(x) is less than 2 if degree < 2: return False else: # Compute the second derivative p''(a) DDp_a = sum([k*(k-1)*p[k]*a**(k-2) for k in range(2,degree + 1)]) if DDp_a > 0: return True else: return False Let's test our function on p(x) = 1 + x - x^3 p(x) = 1 + x - x^3 at x=2 x=2 . Since p''(x) = -6x p''(x) = -6x and p''(2) = -12 < 0 p''(2) = -12 < 0 , the polynomial is concave down at x=2 x=2 . p = [1,1,0,-1] a = 2 concavity = concave_up(p,a) print(concavity) False Exercises The discriminant of a cubic polynomial p(x) = ax^3 + bx^2 + cx + d p(x) = ax^3 + bx^2 + cx + d is \\Delta = b^2c^2 - 4ac^3 - 4b^3d - 27a^2d^2 + 18abcd \\Delta = b^2c^2 - 4ac^3 - 4b^3d - 27a^2d^2 + 18abcd The discriminant gives us information about the roots of the polynomial p(x) p(x) : if \\Delta > 0 \\Delta > 0 , then p(x) p(x) has 3 distinct real roots if \\Delta < 0 \\Delta < 0 , then p(x) p(x) has 2 distinct complex roots and 1 real root if \\Delta = 0 \\Delta = 0 , then p(x) p(x) has at least 2 (real or complex) roots which are the same Represent a cubic polynomial p(x) = ax^3 + bx^2 + cx + d p(x) = ax^3 + bx^2 + cx + d as a list [d,c,b,a] of numbers. (Note the order of the coefficients is increasing degree.) For example, the polynomial p(x) = x^3 - x + 1 p(x) = x^3 - x + 1 is [1,-1,0,1] . Write a function called cubic_roots which takes an input parameter p , a list of length 4 representing a cubic polynomial, and returns True if p(x) p(x) has 3 real distinct roots and False otherwise. Represent a 2 by 2 square matrix as a list of lists. For example, represent the matrix \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} as the list of lists [[2,-1],[5,7]] . Write a function called inverse_a which takes an input parameter a and returns a list of lists representing the inverse of the matrix \\begin{bmatrix} 1 & a \\\\\\ a & -1 \\end{bmatrix} \\begin{bmatrix} 1 & a \\\\\\ a & -1 \\end{bmatrix} Write a function called real_eigenvalues which takes an input parameter M , a list of lists representing a 2 by 2 matrix (as in the previous exercise), and returns True if the eigenvalues of the matrix M are real numebrs and False if not.","title":"Logic"},{"location":"python/logic/#logic","text":"","title":"Logic"},{"location":"python/logic/#boolean-values","text":"The boolean type has only two values: True and False . Let's assign a boolean value to a variable and verify the type using the built-in function type() : python_is_fun = True print(python_is_fun) True type(python_is_fun) bool Let's assign the value False to a variable and again verify the type: math_is_scary = False print(math_is_scary) False type(math_is_scary) bool","title":"Boolean Values"},{"location":"python/logic/#comparison-operators","text":"Comparison operators produce Boolean values as output. For example, if we have variables x and y with numeric values, we can evaluate the expression x < y and the result is a boolean value either True or False . Comparison Operator Description < strictly less than <= less than or equal > strictly greater than >= greater than or equal == equal != not equal For example: 1 == 2 False 1 < 2 True 2 == 2 True 3 != 3.14159 True 20.00000001 >= 20 True","title":"Comparison Operators"},{"location":"python/logic/#boolean-operators","text":"We combine logical expressions using boolean operators and , or and not . Boolean Operator Description A and B returns True if both A and B are True A or B returns True if either A or B is True not A returns True if A is False For example: (1 < 2) and (3 != 5) True (1 < 2) and (3 < 1) False (1 < 2) or (3 < 1) True not (1000 <= 999) True","title":"Boolean Operators"},{"location":"python/logic/#if-statements","text":"An if statement consists of one or more blocks of code such that only one block is executed depending on logical expressions. Let's do an example: # Determine if roots of polynomial ax^2 + bx + c = 0 # are real, repeated or complex using the # quadratic formula x = (-b \\pm \\sqrt{b^2 - 4ac})/2a a = 10 b = -234 c = 1984 discriminant = b**2 - 4*a*c if discriminant > 0: print(\"Discriminant =\", discriminant) print(\"Roots are real and distinct.\") elif discriminant < 0: print(\"Discriminant =\", discriminant) print(\"Roots are complex.\") else: print(\"Discriminant =\", discriminant) print(\"Roots are real and repeated.\") Discriminant = -24604 Roots are complex. The main points to observe are: Start with the if keyword. Write a logical expression (returning True or False ). End line with a colon : . Indent block 4 spaces after if statement. Include elif and else statements if needed. Only one of the blocks if , elif and else is executed. The block following an else statement will execute only if all other logical expressions before it are False .","title":"if statements"},{"location":"python/logic/#examples","text":"","title":"Examples"},{"location":"python/logic/#invertible-matrix","text":"Represent a 2 by 2 square matrix as a list of lists. For example, represent the matrix \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} as the list of lists [[2,-1],[5,7]] . Write a function called invertible which takes an input parameter M , a list of lists representing a 2 by 2 matrix, and returns True if the matrix M is invertible and False if not. def invertible(M): '''Determine if M is invertible. Parameters ---------- M : list of lists Representation of a 2 by 2 matrix M = [[a,b],[c,d]]. Returns ------- bool True if M is invertible and False if not. Examples -------- >>> invertible([[1,2],[3,4]]) True ''' # A matrix M is invertible if and only if # the determinant is not zero where # det(M) = ad - bc for M = [[a,b],[c,d]] determinant = M[0][0] * M[1][1] - M[0][1] * M[1][0] if determinant != 0: return True else: return False Let's test our function: invertible([[1,2],[3,4]]) True invertible([[1,1],[3,3]]) False","title":"Invertible Matrix"},{"location":"python/logic/#concavity-of-a-polynomial","text":"Write a function called concave_up which takes input parameters p and a where p is a list representing a polynomial p(x) p(x) and a is a number, and returns True if the function p(x) p(x) is concave up at x=a x=a (ie. its second derivative is positive at x=a x=a , p''(a) > 0 p''(a) > 0 ). We'll use the second derivative test for polynomials. In particular, if we have a polynomial of degree n n p(x) = c_0 + c_1 x + c_2 x^2 + \\cdots + c_n x^n p(x) = c_0 + c_1 x + c_2 x^2 + \\cdots + c_n x^n then the second derivative of p(x) p(x) at x=a x=a is the sum p''(a) = 2(1) c_2 + 3(2)c_3 a + 4(3)c_4 a^2 + \\cdots + n(n-1)c_n a^{n-2} p''(a) = 2(1) c_2 + 3(2)c_3 a + 4(3)c_4 a^2 + \\cdots + n(n-1)c_n a^{n-2} def concave_up(p,a): '''Determine if the polynomial p(x) is concave up at x=a. Parameters ---------- p : list of numbers List [a_0,a_1,a_2,...,a_n] represents the polynomial p(x) = a_0 + a_1*x + a_2*x**2 + ... + a_n*x**n Returns ------- bool True if p(x) is concave up at x=a (ie. p''(a) > 0) and False otherwise. Examples -------- >>> concave_up([1,0,-2],0) False >>> concave_up([1,0,2],0) True ''' # Degree of the polynomial p(x) degree = len(p) - 1 # p''(a) == 0 if degree of p(x) is less than 2 if degree < 2: return False else: # Compute the second derivative p''(a) DDp_a = sum([k*(k-1)*p[k]*a**(k-2) for k in range(2,degree + 1)]) if DDp_a > 0: return True else: return False Let's test our function on p(x) = 1 + x - x^3 p(x) = 1 + x - x^3 at x=2 x=2 . Since p''(x) = -6x p''(x) = -6x and p''(2) = -12 < 0 p''(2) = -12 < 0 , the polynomial is concave down at x=2 x=2 . p = [1,1,0,-1] a = 2 concavity = concave_up(p,a) print(concavity) False","title":"Concavity of a Polynomial"},{"location":"python/logic/#exercises","text":"The discriminant of a cubic polynomial p(x) = ax^3 + bx^2 + cx + d p(x) = ax^3 + bx^2 + cx + d is \\Delta = b^2c^2 - 4ac^3 - 4b^3d - 27a^2d^2 + 18abcd \\Delta = b^2c^2 - 4ac^3 - 4b^3d - 27a^2d^2 + 18abcd The discriminant gives us information about the roots of the polynomial p(x) p(x) : if \\Delta > 0 \\Delta > 0 , then p(x) p(x) has 3 distinct real roots if \\Delta < 0 \\Delta < 0 , then p(x) p(x) has 2 distinct complex roots and 1 real root if \\Delta = 0 \\Delta = 0 , then p(x) p(x) has at least 2 (real or complex) roots which are the same Represent a cubic polynomial p(x) = ax^3 + bx^2 + cx + d p(x) = ax^3 + bx^2 + cx + d as a list [d,c,b,a] of numbers. (Note the order of the coefficients is increasing degree.) For example, the polynomial p(x) = x^3 - x + 1 p(x) = x^3 - x + 1 is [1,-1,0,1] . Write a function called cubic_roots which takes an input parameter p , a list of length 4 representing a cubic polynomial, and returns True if p(x) p(x) has 3 real distinct roots and False otherwise. Represent a 2 by 2 square matrix as a list of lists. For example, represent the matrix \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} \\begin{bmatrix} 2 & -1 \\\\\\ 5 & 7 \\end{bmatrix} as the list of lists [[2,-1],[5,7]] . Write a function called inverse_a which takes an input parameter a and returns a list of lists representing the inverse of the matrix \\begin{bmatrix} 1 & a \\\\\\ a & -1 \\end{bmatrix} \\begin{bmatrix} 1 & a \\\\\\ a & -1 \\end{bmatrix} Write a function called real_eigenvalues which takes an input parameter M , a list of lists representing a 2 by 2 matrix (as in the previous exercise), and returns True if the eigenvalues of the matrix M are real numebrs and False if not.","title":"Exercises"},{"location":"python/loops/","text":"Loops for Loops A for loop allows us to execute a block of code multiple times with some parameters updated each time through the loop. A for loop begins with the for statement: iterable = [1,2,3] for item in iterable: # code block indented 4 spaces print(item) 1 2 3 The main points to observe are: for and in keywords iterable is a sequence object such as a list, tuple or range item is a variable which takes each value in iterable end for statement with a colon : code block indented 4 spaces which executes once for each value in iterable For example, let's print n^2 n^2 for n n from 0 to 5: for n in [0,1,2,3,4,5]: square = n**2 print(n,'squared is',square) print('The for loop is complete!') 0 squared is 0 1 squared is 1 2 squared is 4 3 squared is 9 4 squared is 16 5 squared is 25 The for loop is complete! Copy and paste this code and any of the examples below into the Python visualizer to see each step in a for loop! while Loops What if we want to execute a block of code multiple times but we don't know exactly how many times? We can't write a for loop because this requires us to set the length of the loop in advance. This is a situation when a while loop is useful. The following example illustrates a while loop : n = 5 while n > 0: print(n) n = n - 1 5 4 3 2 1 The main points to observe are: while keyword a logical expression followed by a colon : loop executes its code block if the logical expression evaluates to True update the variable in the logical expression each time through the loop BEWARE! If the logical expression always evaluates to True , then you get an infinite loop ! We prefer for loops over while loops because of the last point. A for loop will never result in an infinite loop. If a loop can be constructed with for or while , we'll always choose for . Constructing Sequences There are several ways to construct a sequence of values and to save them as a Python list. We have already seen Python's list comprehension syntax. There is also the append list method described below. Sequences by a Formula If a sequence is given by a formula then we can use a list comprehension to construct it. For example, the sequence of squares from 1 to 100 can be constructed using a list comprehension: squares = [d**2 for d in range(1,11)] print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] However, we can achieve the same result with a for loop and the append method for lists: # Intialize an empty list squares = [] for d in range(1,11): # Append the next square to the list squares.append(d**2) print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] In fact, the two examples above are equivalent. The purpose of list comprehensions is to simplify and compress the syntax into a one-line construction. Recursive Sequences We can only use a list comprehension to construct a sequence when the sequence values are defined by a formula. But what if we want to construct a sequence where the next value depends on previous values? This is called a recursive sequence . For example, consider the Fibonacci sequence : x_1 = 1, x_2 = 1, x_3 = 2, x_4 = 3, x_5 = 5, ... x_1 = 1, x_2 = 1, x_3 = 2, x_4 = 3, x_5 = 5, ... where x_{n} = x_{n-1} + x_{n-2} x_{n} = x_{n-1} + x_{n-2} We can't use a list comprehension to build the list of Fibonacci numbers, and so we must use a for loop with the append method instead. For example, the first 15 Fibonacci numbers are: fibonacci_numbers = [1,1] for n in range(2,15): fibonacci_n = fibonacci_numbers[n-1] + fibonacci_numbers[n-2] fibonacci_numbers.append(fibonacci_n) print(fibonacci_numbers) [1, 1, 2] [1, 1, 2, 3] [1, 1, 2, 3, 5] [1, 1, 2, 3, 5, 8] [1, 1, 2, 3, 5, 8, 13] [1, 1, 2, 3, 5, 8, 13, 21] [1, 1, 2, 3, 5, 8, 13, 21, 34] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] Computing Sums Suppose we want to compute the sum of a sequence of numbers x_0 x_0 , x_1 x_1 , x_2 x_2 , x_3 x_3 , \\dots \\dots , x_n x_n . There are at least two approaches: Compute the entire sequence, store it as a list [x_0,x_1,x_2,\\dots,x_n] [x_0,x_1,x_2,\\dots,x_n] and then use the built-in function sum . Initialize a variable with value 0 (and name it result for example), create and add each element in the sequence to result one at a time. The advantage of the second approach is that we don't need to store all the values at once. For example, here are two ways to write a function which computes the sum of squares. For the first approach, use a list comprehension: def sum_of_squares_1(N): \"Compute the sum of squares 1**2 + 2**2 + ... + N**2.\" return sum([n**2 for n in range(1,N + 1)]) sum_of_squares_1(4) 30 For the second approach, use a for loop with the initialize-and-update construction: def sum_of_squares_2(N): \"Compute the sum of squares 1**2 + 2**2 + ... + N**2.\" # Initialize the output value to 0 result = 0 for n in range(1,N + 1): # Update the result by adding the next term result = result + n**2 return result sum_of_squares_2(4) 30 Again, both methods yield the same result however the second uses less memory! Computing Products There is no built-in function to compute products of sequences therefore we'll use an initialize-and-update construction similar to the example above for computing sums. Write a function called factorial which takes a positive integer N N and return the factorial N! N! . def factorial(N): \"Compute N! = N(N-1) ... (2)(1) for N >= 1.\" # Initialize the output variable to 1 product = 1 for n in range(2,N + 1): # Update the output variable product = product * n return product Let's test our function for input values for which we know the result: factorial(2) 2 factorial(5) 120 We can use our function to approximate e e using the Taylor series for e^x e^x : e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} For example, let's compute the 100th partial sum of the series with x=1 x=1 : sum([1/factorial(k) for k in range(0,101)]) 2.7182818284590455 Searching for Solutions We can use for loops to search for integer solutions of equations. For example, suppose we would like to find all representations of a positive integer N N as a sum of two squares . In other words, we want to find all integer solutions (x,y) (x,y) of the equation: x^2 + y^2 = N x^2 + y^2 = N Write a function called reps_sum_squares which takes an integer N N and finds all representations of N N as a sum of squares x^2 + y^2 = N x^2 + y^2 = N for 0 \\leq x \\leq y 0 \\leq x \\leq y . The function returns the representations as a list of tuples. For example, if N = 50 N = 50 then 1^2 + 7^2 = 50 1^2 + 7^2 = 50 and 5^2 + 5^2 = 50 5^2 + 5^2 = 50 and the function returns the list [(1, 7),(5, 5)] . Let's outline our approach before we write any code: Given x \\leq y x \\leq y , the largest possible value for x x is \\sqrt{\\frac{N}{2}} \\sqrt{\\frac{N}{2}} For x \\leq \\sqrt{\\frac{N}{2}} x \\leq \\sqrt{\\frac{N}{2}} , the pair (x,y) (x,y) is a solution if N - x^2 N - x^2 is a square Define a helper function called is_square to test if an integer is square def is_square(n): \"Determine if the integer n is a square.\" if round(n**0.5)**2 == n: return True else: return False def reps_sum_squares(N): '''Find all representations of N as a sum of squares x**2 + y**2 = N. Parameters ---------- N : integer Returns ------- reps : list of tuples of integers List of tuples (x,y) of positive integers such that x**2 + y**2 = N. Examples -------- >>> reps_sum_squares(1105) [(4, 33), (9, 32), (12, 31), (23, 24)] ''' reps = [] if is_square(N/2): # If N/2 is a square, search up to x = (N/2)**0.5 max_x = round((N/2)**0.5) else: # If N/2 is not a square, search up to x = floor((N/2)**0.5) max_x = int((N/2)**0.5) for x in range(0,max_x + 1): y_squared = N - x**2 if is_square(y_squared): y = round(y_squared**0.5) # Append solution (x,y) to list of solutions reps.append((x,y)) return reps reps_sum_squares(1105) [(4, 33), (9, 32), (12, 31), (23, 24)] What is the smallest integer which can be expressed as the sum of squares in 5 different ways? N = 1105 num_reps = 4 while num_reps < 5: N = N + 1 reps = reps_sum_squares(N) num_reps = len(reps) print(N,':',reps_sum_squares(N)) 4225 : [(0, 65), (16, 63), (25, 60), (33, 56), (39, 52)] Examples Prime Numbers A positive integer is prime if it is divisible only by 1 and itself. Write a function called is_prime which takes an input parameter n and returns True or False depending on whether n is prime or not. Let's outline our approach before we write any code: An integer d d divides n n if there is no remainder of n n divided by d d . Use the modulus operator % to compute the remainder. If d d divides n n then n = d q n = d q for some integer q q and either d \\leq \\sqrt{n} d \\leq \\sqrt{n} or q \\leq \\sqrt{n} q \\leq \\sqrt{n} (and not both), therefore we need only test if d d divides n n for integers d \\leq \\sqrt{n} d \\leq \\sqrt{n} def is_prime(n): \"Determine whether or not n is a prime number.\" if n <= 1: return False # Test if d divides n for d <= n**0.5 for d in range(2,round(n**0.5) + 1): if n % d == 0: # n is divisible by d and so n is not prime return False # If we exit the for loop, then n is not divisible by any d # and therefore n is prime return True Let's test our function on the first 30 numbers: for n in range(0,31): if is_prime(n): print(n,'is prime!') 2 is prime! 3 is prime! 5 is prime! 7 is prime! 11 is prime! 13 is prime! 17 is prime! 19 is prime! 23 is prime! 29 is prime! Our function works! Let's find all the primes between 20,000 and 20,100. for n in range(20000,20100): if is_prime(n): print(n,'is prime!') 20011 is prime! 20021 is prime! 20023 is prime! 20029 is prime! 20047 is prime! 20051 is prime! 20063 is prime! 20071 is prime! 20089 is prime! Divisors Let's write a function called divisors which takes a positive integer N N and returns the list of positive integers which divide N N . def divisors(N): \"Return the list of divisors of N.\" # Initialize the list of divisors (which always includes 1) divisor_list = [1] # Check division by d for d <= N/2 for d in range(2,N // 2 + 1): if N % d == 0: divisor_list.append(d) # N divides itself and so we append N to the list of divisors divisor_list.append(N) return divisor_list Let's test our function: divisors(10) [1, 2, 5, 10] divisors(100) [1, 2, 4, 5, 10, 20, 25, 50, 100] divisors(59) [1, 59] Collatz Conjecture Let a a be a positive integer and consider the recursive sequence where x_0 = a x_0 = a and x_{n+1} = \\left\\\\{ \\begin{array}{cl} x_n/2 & \\text{if } x_n \\text{ is even} \\\\\\\\ 3x_n+1 & \\text{if } x_n \\text{ is odd} \\end{array} \\\\right. x_{n+1} = \\left\\\\{ \\begin{array}{cl} x_n/2 & \\text{if } x_n \\text{ is even} \\\\\\\\ 3x_n+1 & \\text{if } x_n \\text{ is odd} \\end{array} \\\\right. The Collatz conjecture states that this sequence will always reach 1. For example, if a = 10 a = 10 then x_0 = 10 x_0 = 10 , x_1 = 5 x_1 = 5 , x_2 = 16 x_2 = 16 , x_3 = 8 x_3 = 8 , x_4 = 4 x_4 = 4 , x_5 = 2 x_5 = 2 and x_6 = 1 x_6 = 1 . Write a function called collatz which takes one input parameter a and returns the sequence of integers defined above and ending with the first occurrence x_n=1 x_n=1 . def collatz(a): \"Compute the Collatz sequence starting at a and ending at 1.\" # Initialize list with first value a sequence = [a] # Compute values until we reach 1 while sequence[-1] > 1: # Check if the last element in the list is even if sequence[-1] % 2 == 0: # Compute and append the new value sequence.append(sequence[-1] // 2) else: # Compute and append the new value sequence.append(3*sequence[-1] + 1) return sequence Let's test our function: print(collatz(10)) [10, 5, 16, 8, 4, 2, 1] collatz(22) [22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] The Collatz conjecture is quite amazing. No matter where we start, the sequence always terminates at 1! a = 123456789 seq = collatz(a) print(\"Collatz sequence for a =\",a) print(\"begins with\",seq[:5]) print(\"ends with\",seq[-5:]) print(\"and has\",len(seq),\"terms.\") Collatz sequence for a = 123456789 begins with [123456789, 370370368, 185185184, 92592592, 46296296] ends with [16, 8, 4, 2, 1] and has 178 terms. Which a < 1000 a < 1000 produces the longest sequence? max_length = 1 a_max = 1 for a in range(1,1001): seq_length = len(collatz(a)) if seq_length > max_length: max_length = seq_length a_max = a print('Longest sequence begins with a =',a_max,'and has length',max_length) Longest sequence begins with a = 871 and has length 179 Exercises Fermat's theorem on the sum of two squares states that every prime number p p of the form 4k+1 4k+1 can be expressed as the sum of two squares. For example, 5 = 2^2 + 1^2 5 = 2^2 + 1^2 and 13 = 3^2 + 2^2 13 = 3^2 + 2^2 . Find the smallest prime greater than 2019 2019 of the form 4k+1 4k+1 and write it as a sum of squares. (Hint: Use the functions is_prime and reps_sum_squares from this section.) What is the smallest prime number which can be represented as a sum of squares in 2 different ways? What is the smallest integer which can be represented as a sum of squares in 3 different ways? Write a function called primes_between which takes two integer inputs a a and b b and returns the list of primes in the closed interval [a,b] [a,b] . Write a function called primes_d_mod_N which takes four integer inputs a a , b b , d d and N N and returns the list of primes in the closed interval [a,b] [a,b] which are congruent to d d mod N N (this means that the prime has remainder d d after division by N N ). This kind of list is called primes in an arithmetic progression . Write a function called reciprocal_recursion which takes three positive integers x_0 x_0 , x_1 x_1 and N N and returns the sequence [x_0,x_1,x_2,\\dots,x_N] [x_0,x_1,x_2,\\dots,x_N] where x_n = \\frac{1}{x_{n-1}} + \\frac{1}{x_{n-2}} x_n = \\frac{1}{x_{n-1}} + \\frac{1}{x_{n-2}} Write a function called root_sequence which takes input parameters a a and N N , both positive integers, and returns the N N th term x_N x_N in the sequence: \\begin{align} x_0 &= a \\\\\\ x_n &= 1 + \\sqrt{x_{n-1}} \\end{align} \\begin{align} x_0 &= a \\\\\\ x_n &= 1 + \\sqrt{x_{n-1}} \\end{align} Does the sequence converge to different values for different starting values a a ? Write a function called fib_less_than which takes one input N N and returns the list of Fibonacci numbers less than N N . Write a function called fibonacci_primes which takes an input parameter N N and returns the list of Fibonacci numbers less than N N which are also prime numbers. Let w(N) w(N) be the number of ways N N can be expressed as a sum of two squares x^2 + y^2 = N x^2 + y^2 = N with 1 \\leq x \\leq y 1 \\leq x \\leq y . Then \\lim_{N \\to \\infty} \\frac{1}{N} \\sum_{n=1}^{N} w(n) = \\frac{\\pi}{8} \\lim_{N \\to \\infty} \\frac{1}{N} \\sum_{n=1}^{N} w(n) = \\frac{\\pi}{8} Compute the left side of the formula for N=100 N=100 and compare the result to \\pi / 8 \\pi / 8 . A list of positive integers [a,b,c] [a,b,c] (with 1 \\leq a < b 1 \\leq a < b ) are a Pythagorean triple if a^2 + b^2 = c^2 a^2 + b^2 = c^2 . Write a function called py_triples which takes an input parameter N N and returns the list of Pythagorean triples [a,b,c] with c \\leq N c \\leq N .","title":"Loops"},{"location":"python/loops/#loops","text":"","title":"Loops"},{"location":"python/loops/#for-loops","text":"A for loop allows us to execute a block of code multiple times with some parameters updated each time through the loop. A for loop begins with the for statement: iterable = [1,2,3] for item in iterable: # code block indented 4 spaces print(item) 1 2 3 The main points to observe are: for and in keywords iterable is a sequence object such as a list, tuple or range item is a variable which takes each value in iterable end for statement with a colon : code block indented 4 spaces which executes once for each value in iterable For example, let's print n^2 n^2 for n n from 0 to 5: for n in [0,1,2,3,4,5]: square = n**2 print(n,'squared is',square) print('The for loop is complete!') 0 squared is 0 1 squared is 1 2 squared is 4 3 squared is 9 4 squared is 16 5 squared is 25 The for loop is complete! Copy and paste this code and any of the examples below into the Python visualizer to see each step in a for loop!","title":"for Loops"},{"location":"python/loops/#while-loops","text":"What if we want to execute a block of code multiple times but we don't know exactly how many times? We can't write a for loop because this requires us to set the length of the loop in advance. This is a situation when a while loop is useful. The following example illustrates a while loop : n = 5 while n > 0: print(n) n = n - 1 5 4 3 2 1 The main points to observe are: while keyword a logical expression followed by a colon : loop executes its code block if the logical expression evaluates to True update the variable in the logical expression each time through the loop BEWARE! If the logical expression always evaluates to True , then you get an infinite loop ! We prefer for loops over while loops because of the last point. A for loop will never result in an infinite loop. If a loop can be constructed with for or while , we'll always choose for .","title":"while Loops"},{"location":"python/loops/#constructing-sequences","text":"There are several ways to construct a sequence of values and to save them as a Python list. We have already seen Python's list comprehension syntax. There is also the append list method described below.","title":"Constructing Sequences"},{"location":"python/loops/#sequences-by-a-formula","text":"If a sequence is given by a formula then we can use a list comprehension to construct it. For example, the sequence of squares from 1 to 100 can be constructed using a list comprehension: squares = [d**2 for d in range(1,11)] print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] However, we can achieve the same result with a for loop and the append method for lists: # Intialize an empty list squares = [] for d in range(1,11): # Append the next square to the list squares.append(d**2) print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] In fact, the two examples above are equivalent. The purpose of list comprehensions is to simplify and compress the syntax into a one-line construction.","title":"Sequences by a Formula"},{"location":"python/loops/#recursive-sequences","text":"We can only use a list comprehension to construct a sequence when the sequence values are defined by a formula. But what if we want to construct a sequence where the next value depends on previous values? This is called a recursive sequence . For example, consider the Fibonacci sequence : x_1 = 1, x_2 = 1, x_3 = 2, x_4 = 3, x_5 = 5, ... x_1 = 1, x_2 = 1, x_3 = 2, x_4 = 3, x_5 = 5, ... where x_{n} = x_{n-1} + x_{n-2} x_{n} = x_{n-1} + x_{n-2} We can't use a list comprehension to build the list of Fibonacci numbers, and so we must use a for loop with the append method instead. For example, the first 15 Fibonacci numbers are: fibonacci_numbers = [1,1] for n in range(2,15): fibonacci_n = fibonacci_numbers[n-1] + fibonacci_numbers[n-2] fibonacci_numbers.append(fibonacci_n) print(fibonacci_numbers) [1, 1, 2] [1, 1, 2, 3] [1, 1, 2, 3, 5] [1, 1, 2, 3, 5, 8] [1, 1, 2, 3, 5, 8, 13] [1, 1, 2, 3, 5, 8, 13, 21] [1, 1, 2, 3, 5, 8, 13, 21, 34] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]","title":"Recursive Sequences"},{"location":"python/loops/#computing-sums","text":"Suppose we want to compute the sum of a sequence of numbers x_0 x_0 , x_1 x_1 , x_2 x_2 , x_3 x_3 , \\dots \\dots , x_n x_n . There are at least two approaches: Compute the entire sequence, store it as a list [x_0,x_1,x_2,\\dots,x_n] [x_0,x_1,x_2,\\dots,x_n] and then use the built-in function sum . Initialize a variable with value 0 (and name it result for example), create and add each element in the sequence to result one at a time. The advantage of the second approach is that we don't need to store all the values at once. For example, here are two ways to write a function which computes the sum of squares. For the first approach, use a list comprehension: def sum_of_squares_1(N): \"Compute the sum of squares 1**2 + 2**2 + ... + N**2.\" return sum([n**2 for n in range(1,N + 1)]) sum_of_squares_1(4) 30 For the second approach, use a for loop with the initialize-and-update construction: def sum_of_squares_2(N): \"Compute the sum of squares 1**2 + 2**2 + ... + N**2.\" # Initialize the output value to 0 result = 0 for n in range(1,N + 1): # Update the result by adding the next term result = result + n**2 return result sum_of_squares_2(4) 30 Again, both methods yield the same result however the second uses less memory!","title":"Computing Sums"},{"location":"python/loops/#computing-products","text":"There is no built-in function to compute products of sequences therefore we'll use an initialize-and-update construction similar to the example above for computing sums. Write a function called factorial which takes a positive integer N N and return the factorial N! N! . def factorial(N): \"Compute N! = N(N-1) ... (2)(1) for N >= 1.\" # Initialize the output variable to 1 product = 1 for n in range(2,N + 1): # Update the output variable product = product * n return product Let's test our function for input values for which we know the result: factorial(2) 2 factorial(5) 120 We can use our function to approximate e e using the Taylor series for e^x e^x : e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} For example, let's compute the 100th partial sum of the series with x=1 x=1 : sum([1/factorial(k) for k in range(0,101)]) 2.7182818284590455","title":"Computing Products"},{"location":"python/loops/#searching-for-solutions","text":"We can use for loops to search for integer solutions of equations. For example, suppose we would like to find all representations of a positive integer N N as a sum of two squares . In other words, we want to find all integer solutions (x,y) (x,y) of the equation: x^2 + y^2 = N x^2 + y^2 = N Write a function called reps_sum_squares which takes an integer N N and finds all representations of N N as a sum of squares x^2 + y^2 = N x^2 + y^2 = N for 0 \\leq x \\leq y 0 \\leq x \\leq y . The function returns the representations as a list of tuples. For example, if N = 50 N = 50 then 1^2 + 7^2 = 50 1^2 + 7^2 = 50 and 5^2 + 5^2 = 50 5^2 + 5^2 = 50 and the function returns the list [(1, 7),(5, 5)] . Let's outline our approach before we write any code: Given x \\leq y x \\leq y , the largest possible value for x x is \\sqrt{\\frac{N}{2}} \\sqrt{\\frac{N}{2}} For x \\leq \\sqrt{\\frac{N}{2}} x \\leq \\sqrt{\\frac{N}{2}} , the pair (x,y) (x,y) is a solution if N - x^2 N - x^2 is a square Define a helper function called is_square to test if an integer is square def is_square(n): \"Determine if the integer n is a square.\" if round(n**0.5)**2 == n: return True else: return False def reps_sum_squares(N): '''Find all representations of N as a sum of squares x**2 + y**2 = N. Parameters ---------- N : integer Returns ------- reps : list of tuples of integers List of tuples (x,y) of positive integers such that x**2 + y**2 = N. Examples -------- >>> reps_sum_squares(1105) [(4, 33), (9, 32), (12, 31), (23, 24)] ''' reps = [] if is_square(N/2): # If N/2 is a square, search up to x = (N/2)**0.5 max_x = round((N/2)**0.5) else: # If N/2 is not a square, search up to x = floor((N/2)**0.5) max_x = int((N/2)**0.5) for x in range(0,max_x + 1): y_squared = N - x**2 if is_square(y_squared): y = round(y_squared**0.5) # Append solution (x,y) to list of solutions reps.append((x,y)) return reps reps_sum_squares(1105) [(4, 33), (9, 32), (12, 31), (23, 24)] What is the smallest integer which can be expressed as the sum of squares in 5 different ways? N = 1105 num_reps = 4 while num_reps < 5: N = N + 1 reps = reps_sum_squares(N) num_reps = len(reps) print(N,':',reps_sum_squares(N)) 4225 : [(0, 65), (16, 63), (25, 60), (33, 56), (39, 52)]","title":"Searching for Solutions"},{"location":"python/loops/#examples","text":"","title":"Examples"},{"location":"python/loops/#prime-numbers","text":"A positive integer is prime if it is divisible only by 1 and itself. Write a function called is_prime which takes an input parameter n and returns True or False depending on whether n is prime or not. Let's outline our approach before we write any code: An integer d d divides n n if there is no remainder of n n divided by d d . Use the modulus operator % to compute the remainder. If d d divides n n then n = d q n = d q for some integer q q and either d \\leq \\sqrt{n} d \\leq \\sqrt{n} or q \\leq \\sqrt{n} q \\leq \\sqrt{n} (and not both), therefore we need only test if d d divides n n for integers d \\leq \\sqrt{n} d \\leq \\sqrt{n} def is_prime(n): \"Determine whether or not n is a prime number.\" if n <= 1: return False # Test if d divides n for d <= n**0.5 for d in range(2,round(n**0.5) + 1): if n % d == 0: # n is divisible by d and so n is not prime return False # If we exit the for loop, then n is not divisible by any d # and therefore n is prime return True Let's test our function on the first 30 numbers: for n in range(0,31): if is_prime(n): print(n,'is prime!') 2 is prime! 3 is prime! 5 is prime! 7 is prime! 11 is prime! 13 is prime! 17 is prime! 19 is prime! 23 is prime! 29 is prime! Our function works! Let's find all the primes between 20,000 and 20,100. for n in range(20000,20100): if is_prime(n): print(n,'is prime!') 20011 is prime! 20021 is prime! 20023 is prime! 20029 is prime! 20047 is prime! 20051 is prime! 20063 is prime! 20071 is prime! 20089 is prime!","title":"Prime Numbers"},{"location":"python/loops/#divisors","text":"Let's write a function called divisors which takes a positive integer N N and returns the list of positive integers which divide N N . def divisors(N): \"Return the list of divisors of N.\" # Initialize the list of divisors (which always includes 1) divisor_list = [1] # Check division by d for d <= N/2 for d in range(2,N // 2 + 1): if N % d == 0: divisor_list.append(d) # N divides itself and so we append N to the list of divisors divisor_list.append(N) return divisor_list Let's test our function: divisors(10) [1, 2, 5, 10] divisors(100) [1, 2, 4, 5, 10, 20, 25, 50, 100] divisors(59) [1, 59]","title":"Divisors"},{"location":"python/loops/#collatz-conjecture","text":"Let a a be a positive integer and consider the recursive sequence where x_0 = a x_0 = a and x_{n+1} = \\left\\\\{ \\begin{array}{cl} x_n/2 & \\text{if } x_n \\text{ is even} \\\\\\\\ 3x_n+1 & \\text{if } x_n \\text{ is odd} \\end{array} \\\\right. x_{n+1} = \\left\\\\{ \\begin{array}{cl} x_n/2 & \\text{if } x_n \\text{ is even} \\\\\\\\ 3x_n+1 & \\text{if } x_n \\text{ is odd} \\end{array} \\\\right. The Collatz conjecture states that this sequence will always reach 1. For example, if a = 10 a = 10 then x_0 = 10 x_0 = 10 , x_1 = 5 x_1 = 5 , x_2 = 16 x_2 = 16 , x_3 = 8 x_3 = 8 , x_4 = 4 x_4 = 4 , x_5 = 2 x_5 = 2 and x_6 = 1 x_6 = 1 . Write a function called collatz which takes one input parameter a and returns the sequence of integers defined above and ending with the first occurrence x_n=1 x_n=1 . def collatz(a): \"Compute the Collatz sequence starting at a and ending at 1.\" # Initialize list with first value a sequence = [a] # Compute values until we reach 1 while sequence[-1] > 1: # Check if the last element in the list is even if sequence[-1] % 2 == 0: # Compute and append the new value sequence.append(sequence[-1] // 2) else: # Compute and append the new value sequence.append(3*sequence[-1] + 1) return sequence Let's test our function: print(collatz(10)) [10, 5, 16, 8, 4, 2, 1] collatz(22) [22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] The Collatz conjecture is quite amazing. No matter where we start, the sequence always terminates at 1! a = 123456789 seq = collatz(a) print(\"Collatz sequence for a =\",a) print(\"begins with\",seq[:5]) print(\"ends with\",seq[-5:]) print(\"and has\",len(seq),\"terms.\") Collatz sequence for a = 123456789 begins with [123456789, 370370368, 185185184, 92592592, 46296296] ends with [16, 8, 4, 2, 1] and has 178 terms. Which a < 1000 a < 1000 produces the longest sequence? max_length = 1 a_max = 1 for a in range(1,1001): seq_length = len(collatz(a)) if seq_length > max_length: max_length = seq_length a_max = a print('Longest sequence begins with a =',a_max,'and has length',max_length) Longest sequence begins with a = 871 and has length 179","title":"Collatz Conjecture"},{"location":"python/loops/#exercises","text":"Fermat's theorem on the sum of two squares states that every prime number p p of the form 4k+1 4k+1 can be expressed as the sum of two squares. For example, 5 = 2^2 + 1^2 5 = 2^2 + 1^2 and 13 = 3^2 + 2^2 13 = 3^2 + 2^2 . Find the smallest prime greater than 2019 2019 of the form 4k+1 4k+1 and write it as a sum of squares. (Hint: Use the functions is_prime and reps_sum_squares from this section.) What is the smallest prime number which can be represented as a sum of squares in 2 different ways? What is the smallest integer which can be represented as a sum of squares in 3 different ways? Write a function called primes_between which takes two integer inputs a a and b b and returns the list of primes in the closed interval [a,b] [a,b] . Write a function called primes_d_mod_N which takes four integer inputs a a , b b , d d and N N and returns the list of primes in the closed interval [a,b] [a,b] which are congruent to d d mod N N (this means that the prime has remainder d d after division by N N ). This kind of list is called primes in an arithmetic progression . Write a function called reciprocal_recursion which takes three positive integers x_0 x_0 , x_1 x_1 and N N and returns the sequence [x_0,x_1,x_2,\\dots,x_N] [x_0,x_1,x_2,\\dots,x_N] where x_n = \\frac{1}{x_{n-1}} + \\frac{1}{x_{n-2}} x_n = \\frac{1}{x_{n-1}} + \\frac{1}{x_{n-2}} Write a function called root_sequence which takes input parameters a a and N N , both positive integers, and returns the N N th term x_N x_N in the sequence: \\begin{align} x_0 &= a \\\\\\ x_n &= 1 + \\sqrt{x_{n-1}} \\end{align} \\begin{align} x_0 &= a \\\\\\ x_n &= 1 + \\sqrt{x_{n-1}} \\end{align} Does the sequence converge to different values for different starting values a a ? Write a function called fib_less_than which takes one input N N and returns the list of Fibonacci numbers less than N N . Write a function called fibonacci_primes which takes an input parameter N N and returns the list of Fibonacci numbers less than N N which are also prime numbers. Let w(N) w(N) be the number of ways N N can be expressed as a sum of two squares x^2 + y^2 = N x^2 + y^2 = N with 1 \\leq x \\leq y 1 \\leq x \\leq y . Then \\lim_{N \\to \\infty} \\frac{1}{N} \\sum_{n=1}^{N} w(n) = \\frac{\\pi}{8} \\lim_{N \\to \\infty} \\frac{1}{N} \\sum_{n=1}^{N} w(n) = \\frac{\\pi}{8} Compute the left side of the formula for N=100 N=100 and compare the result to \\pi / 8 \\pi / 8 . A list of positive integers [a,b,c] [a,b,c] (with 1 \\leq a < b 1 \\leq a < b ) are a Pythagorean triple if a^2 + b^2 = c^2 a^2 + b^2 = c^2 . Write a function called py_triples which takes an input parameter N N and returns the list of Pythagorean triples [a,b,c] with c \\leq N c \\leq N .","title":"Exercises"},{"location":"python/modules-packages/","text":"Modules and Packages Under construction","title":"Modules and Packages"},{"location":"python/modules-packages/#modules-and-packages","text":"Under construction","title":"Modules and Packages"},{"location":"python/numbers/","text":"Numbers The main numeric types in Python are integers, floating point numbers and complex numbers. The syntax for arithmetic operators are: addition + , subtraction - , multiplication * , division / and exponentiation ** . Integers Add integers: 8 + 12 20 Subtract integers: 2019 - 21 1998 Multiply integers: 45 * 11 495 Divide integers (and notice that division of integers always returns a float): 100 / 4 25.0 Compute powers of integers: 2**10 1024 Use the built-in function type() to verify the type of a Python object: type(42) int Floating Point Numbers A floating point number (or float) is a real number written in decimal form. Python stores floats and integers in different ways and if we combine integers and floats using arithmetic operations the result is always a float. Approximate \\sqrt{2} \\, \\sqrt{2} \\, : 2**0.5 1.4142135623730951 Approximate 2 \\pi 2 \\pi : 2 * 3.14159 6.28318 Use scientific notation to create 0.00001 0.00001 : 1e-5 1e-05 Again, use the type() function to verify the type of a number: type(42) int type(42.0) float Complex Numbers Use the built-in function complex() to create a complex number in Python or use the letter j for j = \\sqrt{-1} j = \\sqrt{-1} . The built-in function complex() takes 2 parameters defining the real and imaginary part of the complex number. Create the complex number 1 + j 1 + j : complex(1,1) (1+1j) Add complex numbers: (1 + 2j) + (2 - 3j) (3-1j) Multiply complex numbers: (2 - 1j) * (5 + 2j) (12-1j) Use the type() function to verify the type of a number: type(2 - 7j) complex Arithmetic Operators The syntax for arithmetic operators in Python are: Operator Description + addition - subtraction * multiplication / division ** exponentiation % remainder (or modulo) // integer division Notice that division of integers always returns a float: 4 / 3 1.3333333333333333 Even if the mathematical result is an integer: 4 / 2 2.0 Use parentheses to group combinations of arithmetic operations: 5 * (4 + 3) - 2 33 An integer power of an integer is again an integer: 2**4 16 An exponent involving a float is a float: 9**0.5 3.0 The remainder operator computes the remainder of division of integers: 11 % 4 3 Integer division is: 11 // 4 2 Examples Taylor Approximation The Taylor series of the exponential function e^x e^x is given by e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} Compute the Taylor polynomial of degree 5 evaluated at x = 1 x = 1 to find an approximation of e e e \\approx \\frac{1}{0!} + \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\frac{1}{4!} + \\frac{1}{5!} e \\approx \\frac{1}{0!} + \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\frac{1}{4!} + \\frac{1}{5!} 1 + 1 + 1/2 + 1/(3*2) + 1/(4*3*2) + 1/(5*4*3*2) 2.7166666666666663 Ramanujan's \\pi \\pi Formula Srinivasa Ramanujan discovered the following beautiful (and very rapidly converging) series representation of \\pi \\pi \\frac{1}{\\pi} = \\frac{2 \\sqrt{2}}{99^2} \\sum_{k = 0}^{\\infty} \\frac{(4k)!}{k!^4} \\frac{1103 + 26390k}{396^{4k}} \\frac{1}{\\pi} = \\frac{2 \\sqrt{2}}{99^2} \\sum_{k = 0}^{\\infty} \\frac{(4k)!}{k!^4} \\frac{1103 + 26390k}{396^{4k}} Let's find an approximation of \\pi \\pi by computing the reciprocal of the sum of the first 3 terms of the series: \\pi \\approx \\frac{99^2}{2 \\sqrt{2}} \\frac{1}{\\left( 1103 + 4! \\frac{1103 + 26390}{396^{4}} + \\frac{8!}{2^4} \\frac{1103 + 26390(2)}{396^{8}} \\right)} \\pi \\approx \\frac{99^2}{2 \\sqrt{2}} \\frac{1}{\\left( 1103 + 4! \\frac{1103 + 26390}{396^{4}} + \\frac{8!}{2^4} \\frac{1103 + 26390(2)}{396^{8}} \\right)} 99**2 / (2 * 2**0.5) / (1103 + 4*3*2 * (26390 + 1103) / 396**4 + 8*7*6*5*4*3*2 / 2**4 * (26390*2 + 1103) / 396**8) 3.141592653589793 These are exactly the first 16 digits of \\pi \\pi . Exercises The Taylor series of \\cos x \\cos x is given by \\cos x = \\sum_{k=0}^{\\infty} (-1)^k \\frac{x^{2k}}{(2k)!} \\cos x = \\sum_{k=0}^{\\infty} (-1)^k \\frac{x^{2k}}{(2k)!} Compute the Taylor polynomial of degree 6 evaluated at x=2 x=2 : \\cos(2) \\approx 1 - \\frac{2^2}{2!} + \\frac{2^4}{4!} - \\frac{2^6}{6!} \\cos(2) \\approx 1 - \\frac{2^2}{2!} + \\frac{2^4}{4!} - \\frac{2^6}{6!} The Riemann zeta function is the infinite series \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} and is intimately related to prime numbers by the Euler product formula \\sum_{n=1}^{\\infty} \\frac{1}{n^s} = \\prod_p \\left( \\frac{1}{1 - p^{-s}} \\right) \\sum_{n=1}^{\\infty} \\frac{1}{n^s} = \\prod_p \\left( \\frac{1}{1 - p^{-s}} \\right) where the product is over all primes p = 2,3,5,7,11,13,\\dots p = 2,3,5,7,11,13,\\dots Compute the 5th partial sum for s=2 s=2 1 + \\frac{1}{2^2} + \\frac{1}{3^2} + \\frac{1}{4^2} + \\frac{1}{5^2} 1 + \\frac{1}{2^2} + \\frac{1}{3^2} + \\frac{1}{4^2} + \\frac{1}{5^2} Compute the 5th partial product for s=2 s=2 \\left( \\frac{1}{1 - 2^{-2}} \\right) \\left( \\frac{1}{1 - 3^{-2}} \\right) \\left( \\frac{1}{1 - 5^{-2}} \\right) \\left( \\frac{1}{1 - 7^{-2}} \\right) \\left( \\frac{1}{1 - 11^{-2}} \\right) \\left( \\frac{1}{1 - 2^{-2}} \\right) \\left( \\frac{1}{1 - 3^{-2}} \\right) \\left( \\frac{1}{1 - 5^{-2}} \\right) \\left( \\frac{1}{1 - 7^{-2}} \\right) \\left( \\frac{1}{1 - 11^{-2}} \\right) Given Euler's special value formula \\zeta(2) = \\frac{\\pi^2}{6} \\zeta(2) = \\frac{\\pi^2}{6} which converges more quickly: the infinite series or product? The continued fraction for \\sqrt{2} \\sqrt{2} is given by \\sqrt{2} = 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\ddots}}}} \\sqrt{2} = 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\ddots}}}} Compute the following (partial) continued fraction to approximate \\sqrt{2} \\sqrt{2} \\sqrt{2} \\approx 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2}}}} \\sqrt{2} \\approx 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2}}}}","title":"Numbers"},{"location":"python/numbers/#numbers","text":"The main numeric types in Python are integers, floating point numbers and complex numbers. The syntax for arithmetic operators are: addition + , subtraction - , multiplication * , division / and exponentiation ** .","title":"Numbers"},{"location":"python/numbers/#integers","text":"Add integers: 8 + 12 20 Subtract integers: 2019 - 21 1998 Multiply integers: 45 * 11 495 Divide integers (and notice that division of integers always returns a float): 100 / 4 25.0 Compute powers of integers: 2**10 1024 Use the built-in function type() to verify the type of a Python object: type(42) int","title":"Integers"},{"location":"python/numbers/#floating-point-numbers","text":"A floating point number (or float) is a real number written in decimal form. Python stores floats and integers in different ways and if we combine integers and floats using arithmetic operations the result is always a float. Approximate \\sqrt{2} \\, \\sqrt{2} \\, : 2**0.5 1.4142135623730951 Approximate 2 \\pi 2 \\pi : 2 * 3.14159 6.28318 Use scientific notation to create 0.00001 0.00001 : 1e-5 1e-05 Again, use the type() function to verify the type of a number: type(42) int type(42.0) float","title":"Floating Point Numbers"},{"location":"python/numbers/#complex-numbers","text":"Use the built-in function complex() to create a complex number in Python or use the letter j for j = \\sqrt{-1} j = \\sqrt{-1} . The built-in function complex() takes 2 parameters defining the real and imaginary part of the complex number. Create the complex number 1 + j 1 + j : complex(1,1) (1+1j) Add complex numbers: (1 + 2j) + (2 - 3j) (3-1j) Multiply complex numbers: (2 - 1j) * (5 + 2j) (12-1j) Use the type() function to verify the type of a number: type(2 - 7j) complex","title":"Complex Numbers"},{"location":"python/numbers/#arithmetic-operators","text":"The syntax for arithmetic operators in Python are: Operator Description + addition - subtraction * multiplication / division ** exponentiation % remainder (or modulo) // integer division Notice that division of integers always returns a float: 4 / 3 1.3333333333333333 Even if the mathematical result is an integer: 4 / 2 2.0 Use parentheses to group combinations of arithmetic operations: 5 * (4 + 3) - 2 33 An integer power of an integer is again an integer: 2**4 16 An exponent involving a float is a float: 9**0.5 3.0 The remainder operator computes the remainder of division of integers: 11 % 4 3 Integer division is: 11 // 4 2","title":"Arithmetic Operators"},{"location":"python/numbers/#examples","text":"","title":"Examples"},{"location":"python/numbers/#taylor-approximation","text":"The Taylor series of the exponential function e^x e^x is given by e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} e^x = \\sum_{k=0}^{\\infty} \\frac{x^k}{k!} Compute the Taylor polynomial of degree 5 evaluated at x = 1 x = 1 to find an approximation of e e e \\approx \\frac{1}{0!} + \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\frac{1}{4!} + \\frac{1}{5!} e \\approx \\frac{1}{0!} + \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\frac{1}{4!} + \\frac{1}{5!} 1 + 1 + 1/2 + 1/(3*2) + 1/(4*3*2) + 1/(5*4*3*2) 2.7166666666666663","title":"Taylor Approximation"},{"location":"python/numbers/#ramanujans-pipi-formula","text":"Srinivasa Ramanujan discovered the following beautiful (and very rapidly converging) series representation of \\pi \\pi \\frac{1}{\\pi} = \\frac{2 \\sqrt{2}}{99^2} \\sum_{k = 0}^{\\infty} \\frac{(4k)!}{k!^4} \\frac{1103 + 26390k}{396^{4k}} \\frac{1}{\\pi} = \\frac{2 \\sqrt{2}}{99^2} \\sum_{k = 0}^{\\infty} \\frac{(4k)!}{k!^4} \\frac{1103 + 26390k}{396^{4k}} Let's find an approximation of \\pi \\pi by computing the reciprocal of the sum of the first 3 terms of the series: \\pi \\approx \\frac{99^2}{2 \\sqrt{2}} \\frac{1}{\\left( 1103 + 4! \\frac{1103 + 26390}{396^{4}} + \\frac{8!}{2^4} \\frac{1103 + 26390(2)}{396^{8}} \\right)} \\pi \\approx \\frac{99^2}{2 \\sqrt{2}} \\frac{1}{\\left( 1103 + 4! \\frac{1103 + 26390}{396^{4}} + \\frac{8!}{2^4} \\frac{1103 + 26390(2)}{396^{8}} \\right)} 99**2 / (2 * 2**0.5) / (1103 + 4*3*2 * (26390 + 1103) / 396**4 + 8*7*6*5*4*3*2 / 2**4 * (26390*2 + 1103) / 396**8) 3.141592653589793 These are exactly the first 16 digits of \\pi \\pi .","title":"Ramanujan's \\pi\\pi Formula"},{"location":"python/numbers/#exercises","text":"The Taylor series of \\cos x \\cos x is given by \\cos x = \\sum_{k=0}^{\\infty} (-1)^k \\frac{x^{2k}}{(2k)!} \\cos x = \\sum_{k=0}^{\\infty} (-1)^k \\frac{x^{2k}}{(2k)!} Compute the Taylor polynomial of degree 6 evaluated at x=2 x=2 : \\cos(2) \\approx 1 - \\frac{2^2}{2!} + \\frac{2^4}{4!} - \\frac{2^6}{6!} \\cos(2) \\approx 1 - \\frac{2^2}{2!} + \\frac{2^4}{4!} - \\frac{2^6}{6!} The Riemann zeta function is the infinite series \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} and is intimately related to prime numbers by the Euler product formula \\sum_{n=1}^{\\infty} \\frac{1}{n^s} = \\prod_p \\left( \\frac{1}{1 - p^{-s}} \\right) \\sum_{n=1}^{\\infty} \\frac{1}{n^s} = \\prod_p \\left( \\frac{1}{1 - p^{-s}} \\right) where the product is over all primes p = 2,3,5,7,11,13,\\dots p = 2,3,5,7,11,13,\\dots Compute the 5th partial sum for s=2 s=2 1 + \\frac{1}{2^2} + \\frac{1}{3^2} + \\frac{1}{4^2} + \\frac{1}{5^2} 1 + \\frac{1}{2^2} + \\frac{1}{3^2} + \\frac{1}{4^2} + \\frac{1}{5^2} Compute the 5th partial product for s=2 s=2 \\left( \\frac{1}{1 - 2^{-2}} \\right) \\left( \\frac{1}{1 - 3^{-2}} \\right) \\left( \\frac{1}{1 - 5^{-2}} \\right) \\left( \\frac{1}{1 - 7^{-2}} \\right) \\left( \\frac{1}{1 - 11^{-2}} \\right) \\left( \\frac{1}{1 - 2^{-2}} \\right) \\left( \\frac{1}{1 - 3^{-2}} \\right) \\left( \\frac{1}{1 - 5^{-2}} \\right) \\left( \\frac{1}{1 - 7^{-2}} \\right) \\left( \\frac{1}{1 - 11^{-2}} \\right) Given Euler's special value formula \\zeta(2) = \\frac{\\pi^2}{6} \\zeta(2) = \\frac{\\pi^2}{6} which converges more quickly: the infinite series or product? The continued fraction for \\sqrt{2} \\sqrt{2} is given by \\sqrt{2} = 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\ddots}}}} \\sqrt{2} = 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\ddots}}}} Compute the following (partial) continued fraction to approximate \\sqrt{2} \\sqrt{2} \\sqrt{2} \\approx 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2}}}} \\sqrt{2} \\approx 1 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2 + \\frac{1}{2}}}}","title":"Exercises"},{"location":"python/sequences/","text":"Sequences The main sequence types in Python are lists, tuples and range objects. The main differences between these sequence objects are: Lists are mutable and their elements are usually homogeneous (things of the same type making a list of similar objects) Tuples are immutable and their elements are usually heterogeneous (things of different types making a tuple describing a single structure) Range objects are efficient sequences of integers (commonly used in for loops), use a small amount of memory and yield items only when needed Lists Create a list using square brackets [ ... ] with items separated by commas. For example, create a list of square integers, assign it to a variable and use the built-in function print() to display the list: squares = [1,4,9,16,25] print(squares) [1, 4, 9, 16, 25] Lists may contain data of any type including other lists: points = [[0,0],[0,1],[1,1],[0,1]] print(points) [[0, 0], [0, 1], [1, 1], [0, 1]] Index Access the elements of a list by their index: primes = [2,3,5,7,11,13,17,19,23,29] print(primes[0]) 2 Notice that lists are indexed starting at 0: print(primes[1]) print(primes[2]) print(primes[6]) 3 5 17 Use negative indices to access elements starting from the end of the list: print(primes[-1]) print(primes[-2]) 29 23 Since lists are mutable, we may assign new values to entries in a list: primes[0] = -1 print(primes) [-1, 3, 5, 7, 11, 13, 17, 19, 23, 29] Use multiple indices to access entries in a list of lists: pairs = [[0,1],[2,3],[4,5],[6,7]] print(pairs[2][1]) 5 Slice Create a new list from a sublist (called a slice): fibonacci = [1,1,2,3,5,8,13,21,34,55,89,144] print(fibonacci[4:7]) print(fibonacci[6:]) print(fibonacci[:-2]) [5, 8, 13] [13, 21, 34, 55, 89, 144] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] Notice in the example fibonacci[4:7] the slice begins at index 4 and goes up to but not including index 7. This makes sense since the length of the slice is then 7 - 4 = 3. A slice can skip over entries in a list. For example, create a slice from every third entry from index 0 to 11: print(fibonacci[0:11:3]) [1, 3, 13, 55] Concatenate The addition operator + concatenates lists: one = [1] two = [2,2] three = [3,3,3] numbers = one + two + three print(numbers) [1, 2, 2, 3, 3, 3] Append Add a value to the end of a list using the append() list method: squares = [1,4,9,16,25] squares.append(36) print(squares) [1, 4, 9, 16, 25, 36] What is an object method? First, an object in Python (such as a list) contains data as well as functions (called methods) to manipulate that data. Everything in Python is an object! The list squares in the cell above contains the integer entries (the data) but it also has methods like append() to manipulate the data. We'll see more about objects and methods later on. For now, see the documentation for a complete list of list methods . Tuples Create a tuple with parentheses ( ... ) : today = (2019,7,11) print(today) (2019, 7, 11) Indexing, slicing and concatenating work for tuples in the exact same way as for lists: print(today[0]) print(today[-1]) print(today[1:3]) 2019 11 (7, 11) Range Objects Create a range object with the built-in function range() . The parameters a , b and step in range(a,b,step) are integers and the function creates an object which represents the sequence of integers from a to b (exclusively) incremented by step . (The parameter step may be omitted and is equal to 1 by default.) digits_range = range(0,10) print(digits_range) range(0, 10) Notice that a range object does not display the values of its entries when printed. This is because a range object is an efficient sequence which yields values only when needed. Use the built-in function list() to convert a range object to a list: digits_range = range(0,10) digits_list = list(digits_range) print(digits_list) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Create a range of even integers and convert it to a list: even_list = list(range(0,10,2)) print(even_list) [0, 2, 4, 6, 8] Unpacking a Sequence One of the features of a Python sequence is unpacking where we assign all the entries of a sequence to variables in a single operation. For example, create a tuple representing a date and unpack the data as year , month and and day : today = (2019,7,11) year, month, day = today print(year) print(month) print(day) 2019 7 11 List Comprehensions The built-in function range() is an efficient tool for creating sequences of integers but what about an arbitrary sequence? It is very inefficient to create a sequence by manually typing the numbers. For example, simply typing out the numbers from 1 to 20 takes a long time! numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] print(numbers) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] Python has a beautiful syntax for creating lists called list comprehensions . The syntax is: [expression for item in iterable] where: iterable is a range, list, tuple, or any kind of sequence object item is a variable name which takes each value in the iterable expression is a Python expression which is calculated for each value of item Use a list comprehension to create the list from 1 to 20: numbers = [n for n in range(1,21)] print(numbers) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] Create the list of square integers from 1 1 to 100 100 : squares = [n**2 for n in range(1,11)] print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] Create the periodic sequence 0,1,2,0,1,2,0,1,2,\\dots 0,1,2,0,1,2,0,1,2,\\dots of length 21 (using the remainder operator % ): zero_one_two = [n%3 for n in range(0,21)] print(zero_one_two) [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] Built-in Functions for Sequences Python has several built-in functions for computing with sequences. For example, compute the length of a list: len([1,2,3]) 3 Compute the sum, maximum and minimum of a list of numbers: random = [3,-5,7,8,-1] print(sum(random)) print(max(random)) print(min(random)) 12 8 -5 Sort the list: sorted(random) [-5, -1, 3, 7, 8] Sum the numbers from 1 to 100: one_to_hundred = range(1,101) print(sum(one_to_hundred)) 5050 Examples Triangular Numbers The formula for the sum of integers from 1 to N N (also known as triangular numbers ) is given by: \\sum_{k=1}^N k = \\frac{N(N+1)}{2} \\sum_{k=1}^N k = \\frac{N(N+1)}{2} Let's verify the formula for N=1000 N=1000 : N = 1000 left_side = sum([k for k in range(1,N+1)]) right_side = N*(N+1)/2 print(left_side) print(right_side) 500500 500500.0 Notice the results agree (although the right side is a float since we used division). Sum of Squares The sum of squares (a special case of a geometric series ) is given by the formula: \\sum_{k=1}^N k^2 = \\frac{N(N+1)(2N+1)}{6} \\sum_{k=1}^N k^2 = \\frac{N(N+1)(2N+1)}{6} Let's verify the formula for N=2000 N=2000 : N = 2000 left_side = sum([k**2 for k in range(1,N+1)]) right_side = N*(N+1)*(2*N+1)/6 print(left_side) print(right_side) 2668667000 2668667000.0 Riemann Zeta Function The Riemann zeta function is the infinite series \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} Its values are very mysterious! Let's verify the special value formula \\zeta(4) = \\sum_{n=1}^{\\infty} \\frac{1}{n^4} = \\frac{\\pi^4}{90} \\zeta(4) = \\sum_{n=1}^{\\infty} \\frac{1}{n^4} = \\frac{\\pi^4}{90} Compute the 1000th partial sum of the series: terms = [1/n**4 for n in range(1,1001)] sum(terms) 1.082323233378306 Compare to an approximation of \\frac{\\pi^4}{90} \\frac{\\pi^4}{90} : 3.14159**4/90 1.082319576918468 Exercises The Maclaurin series of \\arctan(x) \\arctan(x) is \\arctan(x) = \\sum_{n = 0}^{\\infty} \\frac{(-1)^nx^{2n + 1}}{2n+1} \\arctan(x) = \\sum_{n = 0}^{\\infty} \\frac{(-1)^nx^{2n + 1}}{2n+1} Substituting x = 1 x = 1 gives a series representation of \\pi/4 \\pi/4 . Compute the 5000th partial sum of the series to approximate \\pi/4 \\pi/4 . Compute the 2000th partial sum of the alternating harmonic series : \\sum_{n=1}^{\\infty}\\frac{(-1)^n}{n} \\sum_{n=1}^{\\infty}\\frac{(-1)^n}{n} Write a list comprehension to create the list of lists: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49]] [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49]]","title":"Sequences"},{"location":"python/sequences/#sequences","text":"The main sequence types in Python are lists, tuples and range objects. The main differences between these sequence objects are: Lists are mutable and their elements are usually homogeneous (things of the same type making a list of similar objects) Tuples are immutable and their elements are usually heterogeneous (things of different types making a tuple describing a single structure) Range objects are efficient sequences of integers (commonly used in for loops), use a small amount of memory and yield items only when needed","title":"Sequences"},{"location":"python/sequences/#lists","text":"Create a list using square brackets [ ... ] with items separated by commas. For example, create a list of square integers, assign it to a variable and use the built-in function print() to display the list: squares = [1,4,9,16,25] print(squares) [1, 4, 9, 16, 25] Lists may contain data of any type including other lists: points = [[0,0],[0,1],[1,1],[0,1]] print(points) [[0, 0], [0, 1], [1, 1], [0, 1]]","title":"Lists"},{"location":"python/sequences/#index","text":"Access the elements of a list by their index: primes = [2,3,5,7,11,13,17,19,23,29] print(primes[0]) 2 Notice that lists are indexed starting at 0: print(primes[1]) print(primes[2]) print(primes[6]) 3 5 17 Use negative indices to access elements starting from the end of the list: print(primes[-1]) print(primes[-2]) 29 23 Since lists are mutable, we may assign new values to entries in a list: primes[0] = -1 print(primes) [-1, 3, 5, 7, 11, 13, 17, 19, 23, 29] Use multiple indices to access entries in a list of lists: pairs = [[0,1],[2,3],[4,5],[6,7]] print(pairs[2][1]) 5","title":"Index"},{"location":"python/sequences/#slice","text":"Create a new list from a sublist (called a slice): fibonacci = [1,1,2,3,5,8,13,21,34,55,89,144] print(fibonacci[4:7]) print(fibonacci[6:]) print(fibonacci[:-2]) [5, 8, 13] [13, 21, 34, 55, 89, 144] [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] Notice in the example fibonacci[4:7] the slice begins at index 4 and goes up to but not including index 7. This makes sense since the length of the slice is then 7 - 4 = 3. A slice can skip over entries in a list. For example, create a slice from every third entry from index 0 to 11: print(fibonacci[0:11:3]) [1, 3, 13, 55]","title":"Slice"},{"location":"python/sequences/#concatenate","text":"The addition operator + concatenates lists: one = [1] two = [2,2] three = [3,3,3] numbers = one + two + three print(numbers) [1, 2, 2, 3, 3, 3]","title":"Concatenate"},{"location":"python/sequences/#append","text":"Add a value to the end of a list using the append() list method: squares = [1,4,9,16,25] squares.append(36) print(squares) [1, 4, 9, 16, 25, 36] What is an object method? First, an object in Python (such as a list) contains data as well as functions (called methods) to manipulate that data. Everything in Python is an object! The list squares in the cell above contains the integer entries (the data) but it also has methods like append() to manipulate the data. We'll see more about objects and methods later on. For now, see the documentation for a complete list of list methods .","title":"Append"},{"location":"python/sequences/#tuples","text":"Create a tuple with parentheses ( ... ) : today = (2019,7,11) print(today) (2019, 7, 11) Indexing, slicing and concatenating work for tuples in the exact same way as for lists: print(today[0]) print(today[-1]) print(today[1:3]) 2019 11 (7, 11)","title":"Tuples"},{"location":"python/sequences/#range-objects","text":"Create a range object with the built-in function range() . The parameters a , b and step in range(a,b,step) are integers and the function creates an object which represents the sequence of integers from a to b (exclusively) incremented by step . (The parameter step may be omitted and is equal to 1 by default.) digits_range = range(0,10) print(digits_range) range(0, 10) Notice that a range object does not display the values of its entries when printed. This is because a range object is an efficient sequence which yields values only when needed. Use the built-in function list() to convert a range object to a list: digits_range = range(0,10) digits_list = list(digits_range) print(digits_list) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Create a range of even integers and convert it to a list: even_list = list(range(0,10,2)) print(even_list) [0, 2, 4, 6, 8]","title":"Range Objects"},{"location":"python/sequences/#unpacking-a-sequence","text":"One of the features of a Python sequence is unpacking where we assign all the entries of a sequence to variables in a single operation. For example, create a tuple representing a date and unpack the data as year , month and and day : today = (2019,7,11) year, month, day = today print(year) print(month) print(day) 2019 7 11","title":"Unpacking a Sequence"},{"location":"python/sequences/#list-comprehensions","text":"The built-in function range() is an efficient tool for creating sequences of integers but what about an arbitrary sequence? It is very inefficient to create a sequence by manually typing the numbers. For example, simply typing out the numbers from 1 to 20 takes a long time! numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] print(numbers) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] Python has a beautiful syntax for creating lists called list comprehensions . The syntax is: [expression for item in iterable] where: iterable is a range, list, tuple, or any kind of sequence object item is a variable name which takes each value in the iterable expression is a Python expression which is calculated for each value of item Use a list comprehension to create the list from 1 to 20: numbers = [n for n in range(1,21)] print(numbers) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] Create the list of square integers from 1 1 to 100 100 : squares = [n**2 for n in range(1,11)] print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] Create the periodic sequence 0,1,2,0,1,2,0,1,2,\\dots 0,1,2,0,1,2,0,1,2,\\dots of length 21 (using the remainder operator % ): zero_one_two = [n%3 for n in range(0,21)] print(zero_one_two) [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]","title":"List Comprehensions"},{"location":"python/sequences/#built-in-functions-for-sequences","text":"Python has several built-in functions for computing with sequences. For example, compute the length of a list: len([1,2,3]) 3 Compute the sum, maximum and minimum of a list of numbers: random = [3,-5,7,8,-1] print(sum(random)) print(max(random)) print(min(random)) 12 8 -5 Sort the list: sorted(random) [-5, -1, 3, 7, 8] Sum the numbers from 1 to 100: one_to_hundred = range(1,101) print(sum(one_to_hundred)) 5050","title":"Built-in Functions for Sequences"},{"location":"python/sequences/#examples","text":"","title":"Examples"},{"location":"python/sequences/#triangular-numbers","text":"The formula for the sum of integers from 1 to N N (also known as triangular numbers ) is given by: \\sum_{k=1}^N k = \\frac{N(N+1)}{2} \\sum_{k=1}^N k = \\frac{N(N+1)}{2} Let's verify the formula for N=1000 N=1000 : N = 1000 left_side = sum([k for k in range(1,N+1)]) right_side = N*(N+1)/2 print(left_side) print(right_side) 500500 500500.0 Notice the results agree (although the right side is a float since we used division).","title":"Triangular Numbers"},{"location":"python/sequences/#sum-of-squares","text":"The sum of squares (a special case of a geometric series ) is given by the formula: \\sum_{k=1}^N k^2 = \\frac{N(N+1)(2N+1)}{6} \\sum_{k=1}^N k^2 = \\frac{N(N+1)(2N+1)}{6} Let's verify the formula for N=2000 N=2000 : N = 2000 left_side = sum([k**2 for k in range(1,N+1)]) right_side = N*(N+1)*(2*N+1)/6 print(left_side) print(right_side) 2668667000 2668667000.0","title":"Sum of Squares"},{"location":"python/sequences/#riemann-zeta-function","text":"The Riemann zeta function is the infinite series \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} \\zeta(s) = \\sum_{n=1}^{\\infty} \\frac{1}{n^s} Its values are very mysterious! Let's verify the special value formula \\zeta(4) = \\sum_{n=1}^{\\infty} \\frac{1}{n^4} = \\frac{\\pi^4}{90} \\zeta(4) = \\sum_{n=1}^{\\infty} \\frac{1}{n^4} = \\frac{\\pi^4}{90} Compute the 1000th partial sum of the series: terms = [1/n**4 for n in range(1,1001)] sum(terms) 1.082323233378306 Compare to an approximation of \\frac{\\pi^4}{90} \\frac{\\pi^4}{90} : 3.14159**4/90 1.082319576918468","title":"Riemann Zeta Function"},{"location":"python/sequences/#exercises","text":"The Maclaurin series of \\arctan(x) \\arctan(x) is \\arctan(x) = \\sum_{n = 0}^{\\infty} \\frac{(-1)^nx^{2n + 1}}{2n+1} \\arctan(x) = \\sum_{n = 0}^{\\infty} \\frac{(-1)^nx^{2n + 1}}{2n+1} Substituting x = 1 x = 1 gives a series representation of \\pi/4 \\pi/4 . Compute the 5000th partial sum of the series to approximate \\pi/4 \\pi/4 . Compute the 2000th partial sum of the alternating harmonic series : \\sum_{n=1}^{\\infty}\\frac{(-1)^n}{n} \\sum_{n=1}^{\\infty}\\frac{(-1)^n}{n} Write a list comprehension to create the list of lists: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49]] [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49]]","title":"Exercises"},{"location":"python/text/","text":"Text Under construction","title":"Text"},{"location":"python/text/#text","text":"Under construction","title":"Text"},{"location":"python/variables/","text":"Variables Just like the familiar variables x x and y y in mathematics, we use variables in programming to easily manipulate values. In this section, we introduce the assignment operator = , namespaces and naming conventions for variables. Assign Values to Variables We assign a value to a variable using the assignment operator = . For example, assign the integer 2 to the variable x : x = 2 The assignment operator does not produce any output and so the cell above does not produce any output in a Jupyter notebook. Use the built-in function print to display the value assigned to a variable: print(x) 2 Compute new values using variables and operators: 1 + x + x**2 + x**3 15 Use the built-in function type to verify the datatype of the value assigned to a variable: pi = 3.14159 type(pi) float Naming Conventions We can use any set of letters, numbers and underscores to make variable names however a variable name cannot begin with a number. There are many different kinds of naming conventions and we refer to the Style Guide for Python Code (PEP8) for a summary. In this book we use lower_case_with_underscores variable names and single lowercase letter variable names such as x . It is good practice to use descriptive variable names to make your code more readable for other people. For example, the distance from Vancouver to Halifax along the Trans-Canada Highway is approximately 5799 kilometres. We write the following code to convert this value to miles: distance_km = 5799 miles_per_km = 0.6214 distance_miles = distance_km * miles_per_km print(distance_miles) 3603.4986 Names to Avoid It is good practice to use variable names which describe the value assigned to it. However there are words that we should not use as variable names because these words already have special meaning in Python. Reserved Words Summarized below are the reserved words in Python 3 . Python will raise an error if you try to assign a value to any of these keywords and so you must avoid these as variable names. False class finally is return None continue for lambda try True def from nonlocal while and del global not with as elif if or yield assert else import pass break except in raise Built-in Function Names There are several functions which are included in the standard Python library. Do not use the names of these functions as variable names otherwise the reference to the built-in function will be lost. For example, do not use sum , min , max , list or sorted as a variable name. See the full list of builtin functions . Jupyter Magic: whos The Jupyer magic command whos lists all variables in the current Jupyter notebook and their types: x = 2 pi = 3.14159 distance_km = 5799 miles_per_km = 0.6214 distance_miles = distance_km * miles_per_km whos Variable Type Data/Info ----------------------------------- distance_km int 5799 distance_miles float 3603.4986 miles_per_km float 0.6214 pi float 3.14159 x int 2","title":"Variables"},{"location":"python/variables/#variables","text":"Just like the familiar variables x x and y y in mathematics, we use variables in programming to easily manipulate values. In this section, we introduce the assignment operator = , namespaces and naming conventions for variables.","title":"Variables"},{"location":"python/variables/#assign-values-to-variables","text":"We assign a value to a variable using the assignment operator = . For example, assign the integer 2 to the variable x : x = 2 The assignment operator does not produce any output and so the cell above does not produce any output in a Jupyter notebook. Use the built-in function print to display the value assigned to a variable: print(x) 2 Compute new values using variables and operators: 1 + x + x**2 + x**3 15 Use the built-in function type to verify the datatype of the value assigned to a variable: pi = 3.14159 type(pi) float","title":"Assign Values to Variables"},{"location":"python/variables/#naming-conventions","text":"We can use any set of letters, numbers and underscores to make variable names however a variable name cannot begin with a number. There are many different kinds of naming conventions and we refer to the Style Guide for Python Code (PEP8) for a summary. In this book we use lower_case_with_underscores variable names and single lowercase letter variable names such as x . It is good practice to use descriptive variable names to make your code more readable for other people. For example, the distance from Vancouver to Halifax along the Trans-Canada Highway is approximately 5799 kilometres. We write the following code to convert this value to miles: distance_km = 5799 miles_per_km = 0.6214 distance_miles = distance_km * miles_per_km print(distance_miles) 3603.4986","title":"Naming Conventions"},{"location":"python/variables/#names-to-avoid","text":"It is good practice to use variable names which describe the value assigned to it. However there are words that we should not use as variable names because these words already have special meaning in Python.","title":"Names to Avoid"},{"location":"python/variables/#reserved-words","text":"Summarized below are the reserved words in Python 3 . Python will raise an error if you try to assign a value to any of these keywords and so you must avoid these as variable names. False class finally is return None continue for lambda try True def from nonlocal while and del global not with as elif if or yield assert else import pass break except in raise","title":"Reserved Words"},{"location":"python/variables/#built-in-function-names","text":"There are several functions which are included in the standard Python library. Do not use the names of these functions as variable names otherwise the reference to the built-in function will be lost. For example, do not use sum , min , max , list or sorted as a variable name. See the full list of builtin functions .","title":"Built-in Function Names"},{"location":"python/variables/#jupyter-magic-whos","text":"The Jupyer magic command whos lists all variables in the current Jupyter notebook and their types: x = 2 pi = 3.14159 distance_km = 5799 miles_per_km = 0.6214 distance_miles = distance_km * miles_per_km whos Variable Type Data/Info ----------------------------------- distance_km int 5799 distance_miles float 3603.4986 miles_per_km float 0.6214 pi float 3.14159 x int 2","title":"Jupyter Magic: whos"}]}