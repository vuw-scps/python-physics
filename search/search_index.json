{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Short Python tutorials for physics (under construction) Acknowledgments and further resources This website is currently a template copied from the excellent resources at http://www.math.ubc.ca/~pwalls/math-python/ and the associated notebooks . We gratefully acknowledge contributions from William Holmes-Hewett and Campbell Matthews for the 200-level tutorials. Planned content General Python programming installation, first steps numerical libraries for loops, conditionals, etc. basic plotting Recipes for data import, plotting import data from text files, batch processing basic data manipulations, Pandas, tidy data plotting, error bars, chart types, grammar of graphics, tuning matplotlib, plotly Recipes for simple numerical modelling peak finding integration differentiation special functions linear and nonlinear optimisation SVD, PCA solving ODEs Worked-through examples from our Physics labs phys221 \u2022 Molecular speeds phys304 \u2022 Relaxation method in 2D phys304 \u2022 Spherical harmonics For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Build and deploy to gh-pages. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Short Python tutorials for physics"},{"location":"#short-python-tutorials-for-physics","text":"(under construction)","title":"Short Python tutorials for physics"},{"location":"#acknowledgments-and-further-resources","text":"This website is currently a template copied from the excellent resources at http://www.math.ubc.ca/~pwalls/math-python/ and the associated notebooks . We gratefully acknowledge contributions from William Holmes-Hewett and Campbell Matthews for the 200-level tutorials.","title":"Acknowledgments and further resources"},{"location":"#planned-content","text":"","title":"Planned content"},{"location":"#general-python-programming","text":"installation, first steps numerical libraries for loops, conditionals, etc. basic plotting","title":"General Python programming"},{"location":"#recipes-for-data-import-plotting","text":"import data from text files, batch processing basic data manipulations, Pandas, tidy data plotting, error bars, chart types, grammar of graphics, tuning matplotlib, plotly","title":"Recipes for data import, plotting"},{"location":"#recipes-for-simple-numerical-modelling","text":"peak finding integration differentiation special functions linear and nonlinear optimisation SVD, PCA solving ODEs","title":"Recipes for simple numerical modelling"},{"location":"#worked-through-examples-from-our-physics-labs","text":"phys221 \u2022 Molecular speeds phys304 \u2022 Relaxation method in 2D phys304 \u2022 Spherical harmonics For full documentation visit mkdocs.org .","title":"Worked-through examples from our Physics labs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - Build and deploy to gh-pages. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"phys221/Multiplots/","text":"Molecular Speeds lab Python data analysis - multiple gas dataset processing This Python workshop was originally developed by VUW Physics students William Holmes-Hewett and Campbell Matthews. Thanks to both of them for their energy and enthusiam in making this resource. Start a new code file in the folder that you have saved all of the .csv files. You can take a look at the example code you have been given or just start from scratch and workthrough from here. Importing modules Let's begin by importing all the modules we will need at the top of the code and adding in the variables that we know we will need for the analysis. import numpy as np from matplotlib import pyplot as plt from math import log import math Setting up variables and constants required later V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 What we are going to do here is run a for loop over all the code we wrote for all files in a specific folder. This will be the folder we are in, so make sure that's where you are and you have all the data from the workshop folder. New moldues for file organisation To start with we need to import the other modules we are going to use. os (or Miscellaneous Operating system interfaces) let's us look up file paths and folder locations. Glob lets us find all files matching a pattern. These are file organisation tools. You can look up more about them if you like. import os import glob The first thing we want to do is set the location of our folder which is where the script is stored i.e. CWD or current working directory. This is one of the reasons why we made our .py code in the same folder as the data. You could use a different folder but that would be trickier. Although certinaly doable. folder=os.getcwd() File formats Now we know where the files are stored we need to set the pattern (or type of files) for Glob to look for. fileformat=folder+str('/*.csv') This will make the script only look for csv files in the correct folder. We now want to create an array of the filenames, these are named after the gases and mass numbers. files=glob.glob(fileformat) print(files) ['/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Nitrogen 28.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Argon 38.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Sulphur Dioxide 64.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Krypton 84.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Oxygen 32.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Neon 17.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Carbon Dioxide 40.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Chlorine 71.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Methane 16.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Fluorine 38.csv'] Building the arrays Create an array of masses from filenames to use later, as filenames are strings we need to set them as intergers. Note that -ve indicies run from the end. masses=[int(f[-6:-4]) for f in files] It might not be totally clear what this is doing unless we print the output. print(files) ['/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Nitrogen 28.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Argon 38.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Sulphur Dioxide 64.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Krypton 84.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Oxygen 32.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Neon 17.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Carbon Dioxide 40.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Chlorine 71.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Methane 16.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Fluorine 38.csv'] argh!!! depending on your filing system this might look horrible... I think it becomes clearer if we print the output of the array. print(masses) [28, 38, 64, 84, 32, 17, 40, 71, 16, 38] Hopefully this helps to see what has gone on. We have taken the string from the file name and turned them into an integer. To do this we counted back from the end of the file name. We now need to find out how many files we have in the folder. We know how to do that already. n=len(files) We also need to create an empty array to populate later. v=np.zeros(n) Applying the previous code to multiple files We now want to simply run though the previous code (in the single gas experiment) for all of the files in the folder. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] note, we no longer have cats... ;-) compare this to your previous code. It is the same, just compressed. Now I am adding on to this and plotting the data. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers <matplotlib.collections.PathCollection at 0x7fb708a83750> Analysis #now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity') Putting these last two parts together we find (this will be what comes up in Spyder). for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers #now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity') Compare this to your results from the PHYS223 lab. What are the advantages of using the Python script? Download this page as a Jupyter notebook or as a standalone Python script .","title":"Molecular Speeds lab Python data analysis - multiple gas dataset processing"},{"location":"phys221/Multiplots/#molecular-speeds-lab-python-data-analysis-multiple-gas-dataset-processing","text":"This Python workshop was originally developed by VUW Physics students William Holmes-Hewett and Campbell Matthews. Thanks to both of them for their energy and enthusiam in making this resource. Start a new code file in the folder that you have saved all of the .csv files. You can take a look at the example code you have been given or just start from scratch and workthrough from here.","title":"Molecular Speeds lab Python data analysis - multiple gas dataset processing"},{"location":"phys221/Multiplots/#importing-modules","text":"Let's begin by importing all the modules we will need at the top of the code and adding in the variables that we know we will need for the analysis. import numpy as np from matplotlib import pyplot as plt from math import log import math","title":"Importing modules"},{"location":"phys221/Multiplots/#setting-up-variables-and-constants-required-later","text":"V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 What we are going to do here is run a for loop over all the code we wrote for all files in a specific folder. This will be the folder we are in, so make sure that's where you are and you have all the data from the workshop folder.","title":"Setting up variables and constants required later"},{"location":"phys221/Multiplots/#new-moldues-for-file-organisation","text":"To start with we need to import the other modules we are going to use. os (or Miscellaneous Operating system interfaces) let's us look up file paths and folder locations. Glob lets us find all files matching a pattern. These are file organisation tools. You can look up more about them if you like. import os import glob The first thing we want to do is set the location of our folder which is where the script is stored i.e. CWD or current working directory. This is one of the reasons why we made our .py code in the same folder as the data. You could use a different folder but that would be trickier. Although certinaly doable. folder=os.getcwd()","title":"New moldues for file organisation"},{"location":"phys221/Multiplots/#file-formats","text":"Now we know where the files are stored we need to set the pattern (or type of files) for Glob to look for. fileformat=folder+str('/*.csv') This will make the script only look for csv files in the correct folder. We now want to create an array of the filenames, these are named after the gases and mass numbers. files=glob.glob(fileformat) print(files) ['/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Nitrogen 28.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Argon 38.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Sulphur Dioxide 64.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Krypton 84.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Oxygen 32.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Neon 17.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Carbon Dioxide 40.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Chlorine 71.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Methane 16.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Fluorine 38.csv']","title":"File formats"},{"location":"phys221/Multiplots/#building-the-arrays","text":"Create an array of masses from filenames to use later, as filenames are strings we need to set them as intergers. Note that -ve indicies run from the end. masses=[int(f[-6:-4]) for f in files] It might not be totally clear what this is doing unless we print the output. print(files) ['/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Nitrogen 28.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Argon 38.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Sulphur Dioxide 64.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Krypton 84.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Oxygen 32.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Neon 17.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Carbon Dioxide 40.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Chlorine 71.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Methane 16.csv', '/Users/auguieba/Documents/vuw-scps/python-physics/notebooks/phys221/Fluorine 38.csv'] argh!!! depending on your filing system this might look horrible... I think it becomes clearer if we print the output of the array. print(masses) [28, 38, 64, 84, 32, 17, 40, 71, 16, 38] Hopefully this helps to see what has gone on. We have taken the string from the file name and turned them into an integer. To do this we counted back from the end of the file name. We now need to find out how many files we have in the folder. We know how to do that already. n=len(files) We also need to create an empty array to populate later. v=np.zeros(n)","title":"Building the arrays"},{"location":"phys221/Multiplots/#applying-the-previous-code-to-multiple-files","text":"We now want to simply run though the previous code (in the single gas experiment) for all of the files in the folder. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] note, we no longer have cats... ;-) compare this to your previous code. It is the same, just compressed. Now I am adding on to this and plotting the data. for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers <matplotlib.collections.PathCollection at 0x7fb708a83750>","title":"Applying the previous code to multiple files"},{"location":"phys221/Multiplots/#analysis","text":"#now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity') Putting these last two parts together we find (this will be what comes up in Spyder). for j in range(n): #we need to indent all this code and change the argument in genfromtext #to files[j] rawdata=np.genfromtxt(files[j], delimiter=',') time=rawdata[:,0] pressure=rawdata[:,1] baseP=min(rawdata[:,1]) P_minus_baseP=[i-0.99*baseP for i in pressure] res=[abs(i-ef_begin) for i in P_minus_baseP] minres=min(res) for i in range (len(res)): if res[i]==minres: Peff_index=i break LogP=[log(i) for i in P_minus_baseP] fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) m=fit[0] c=fit[1] #now we put each of these in one of the spots in the vector v v[j]=-4*V*m/A #now lets print v ######################print(v) #we can then plot v as a function of mass number plt.scatter(masses,v) #we can now create a theoritical line to match these to #first we need a range of mass numbers #now we simply complete the theoritical calculation vtheory=[math.sqrt(8/math.pi*1.38*(10**-23)*300/i/(1.67*10**-27)) for i in range(10,90)] #and plot the result on our plot plt.plot(range(10,90),vtheory,'k--') #we can add some labels plt.xlabel('Mass Number') plt.ylabel('Velocity') Text(0, 0.5, 'Velocity') Compare this to your results from the PHYS223 lab. What are the advantages of using the Python script? Download this page as a Jupyter notebook or as a standalone Python script .","title":"Analysis"},{"location":"phys221/Single_exp/","text":"Molecular Speeds lab Python data analysis - single gas dataset processing This Python workshop was originally developed by VUW Physics students William Holmes-Hewett and Campbell Matthews. Thanks to both of them for their energy and enthusiam in making this resource. Making use of folders Start a new Code in the folder that contains the file \u2018Nitrogen 28.dat\u2019 We have given you an example of the full code that you can download at the end here. Remember that we can 'comment out' code by using a # so the program won't try to run it. As you run through you may want to comment out some of the print commands that are in to check that the code was working along the way. Setting up The first thing we want to do is define some constants that we will use later on. These will be the volume of the bulb, the area of the opening and the pressure at which the effusion regime begins. You were asked to calculate some of these in the pre-workshop exercise. The pre-workshop exercise also serves as a reminder of the PHYS223 lab that this data analysis is based on. So let\u2019s write the first piece of the code and set up same values to use later on (note capital V we are using here). V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 Let\u2019s check that worked by printing one of the variables. You can print them all if you like. print(V) 0.0020299999999999997 Importing packages To start of with we need to call up the packages that help us handle our data. Packages are groups of functions that can be imported all at the same time for later use. The package we want is called \u2018numpy\u2019 so let\u2019s import that now. import numpy as np Now we want to import a module to help with plotting. Note that some of this code here may be in a slightly different order to the example .py code that we have given in the folder on Blackboard. Does that matter? from matplotlib import pyplot as plt Importing the data files We also want to load up the data that we have in our data file. This could be a .txt file, a .csv or a .dat for example. In this case we have a .dat file. Later we will use a .csv. If you remember back to the experiment, the data is pressure as a function of time. Now we want to use numpy to import our data, the command we are going to use is called \u2018genfromtext\u2019. We will import the data into a variable, called rawdata: rawdata=np.genfromtxt(\"Nitrogen 28.dat\", delimiter=\"cat\") Hold on... What's this cat? Note that the delimiter argument tells Python how the data is separated, just to prove a point I\u2019ve replaced all the commas, which are normally used to separate data, with the word \u2018cat\u2019. You can see this if you open the file in excel or something similar. This seems silly, does it really help me learn? Hopefully. And think back to this when you move onto the multiple data example next. Now let\u2019s print the variable \u2018rawdata\u2019 print(rawdata) [[0.00000000e+00 3.91587981e+00] [1.00000000e+00 3.90860622e+00] [2.00000000e+00 3.89163795e+00] ... [2.28100000e+03 6.10025760e-02] [2.28200000e+03 6.10025760e-02] [2.28300000e+03 6.24196670e-02]] This looks good and along the lines of what you expect. It really makes sense to throw in a few tests here and there to make sure that the code is doing what you expect. Using arrays and vectors Now we want to split this array up into two vectors, one for time and one for pressure, we can do that using the indexing we learned before. Note, when I say before, I mean in the first year lab and/or the introduction material that is loaded on Blackboard. time=rawdata[:,0] pressure=rawdata[:,1] This [ : ,0] means [ first_row:last_row , column_0 ]. If you have a 2-dimensional list/matrix/array, this notation will give you all the values in column 0 (from all rows). We should probably test what's happening here, just to be sure... print(time) print(pressure) [0.000e+00 1.000e+00 2.000e+00 ... 2.281e+03 2.282e+03 2.283e+03] [3.91587981 3.90860622 3.89163795 ... 0.06100258 0.06100258 0.06241967] Plotting the data It's quite tricky to see what's really going on here, so let's plot it to get a better idea. plt.figure(1) plt.plot(time,pressure) plt.xlabel(\"time (s)\") plt.ylabel(\"Pressure (Pa)\") Text(0, 0.5, 'Pressure (Pa)') Note that I am planning on having multiple figures so I have given this one a number. This should help as we move along. I even remembered to label my axes and to put in units! Making use of built in functions If you remember back to the experiment (and what we actually have to do to from the basis of our analysis here) we need to find the minimum pressure we reached. To do this we will use an inbuilt python function \u2018min\u2019 and set the result as a new variable \u2018baseP\u2019. baseP=min(rawdata[:,1]) print(baseP) 0.061002576 Have a bit of a think about what that function is doing. It is going from the first data point and last data point in our pressure column (here 1) and finding the minimum. If you want to know more you can easily google this function and see how it operates. We are now going to use a list comprehension to subtract the base pressure from each value in \u2018Pressure\u2019 as we will need to take the log of this later (everyone remembers the experiment and you all definitely read ahead to see where this is going...). We therefore want to avoid 0 values, and as baseP is in \u2018Pressure\u2019 it will return a zero, so we can just multiply it by 0.99 to avoid this. P_minus_baseP=[i-0.99*baseP for i in pressure] print(P_minus_baseP) - do this at your peril. It gives a big list... Now we have our pressure minus base pressure we need to find the point at which the effusion regime begins, to do this we are going to make a new vector of residuals. We already know the pressure at which the effusion regime begins, we called it \u2018ef_begin\u2019, what we don't know is the INDEX of this value in the pressure vector. We are going to find this using residuals. Making use of loops This vector \u2018Res\u2019 will be a vector where we take the value we are looking for \u2018ef_begin\u2019 from all values of the pressure vector the smallest value of this vector will have an index equal to that of when the effusion regime begins, in the vector \u2018Pressure\u2019. res=[abs(i-ef_begin) for i in P_minus_baseP] You should recognise the list comprehension in the line above. This was in the reminder tutorial and is a neat way of writing a for loop. We've made a new array as described above. We now need to take the minimum value. minres=min(res) print(minres) 0.00043142575999999266 I get 0.00043142575999999266, you should get something similar\u2026. Or the same. We now need to find the index of the minimum value, for this we will use a for loop, we want the loop to run for as many entries as we have in res so we can make it run for \u2018len(res)\u2019 we then want to use an if statement, so when \u2018res[i]=minres\u2019 we assign that \u2018i\u2019 to a variable, then stop. Just take a moment and think that through. Can you write it yourself before you scroll down? * * * * for i in range (len(res)): if res[i]==minres: Peff_index=i break print(Peff_index) 691 Now we have the value of the index where the effusion regime begins we can move on. Using the math module The next step is to take the log of our data, to do this we need to import another module called \u2018math\u2019. Maybe we could have added that to the top with numpy and matplotlib, but here we are... from math import log import math We are going to use another list comprehension to create a new vector with all the logged values LogP=[log(i) for i in P_minus_baseP] print(LogP) - if you want to check things. I find it better to plot. Especially as you have your own data from the PHYS223 lab that you can double check against. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") Text(0, 0.5, 'log Pressure (Pa)') We can also plot only the data after we reach the effusion regime, on the same figure, the \u2018r\u2019 makes it red. plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fb6a11b7fd0>] Actually, in spyder that just plots ontop of the existing plot. In the Jupyter workbook environment things happen a little differently. So, if you are in Sypder I expect you have something that looks like this: plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fb6c06a49d0>] Here in the Jupyter environment I had to put them together in one code section. So if anyone is using Jupyter you will have to do what I just did here. Fitting Now I want to fit a trend line to the section of the data in the effusion regime. To do this I'll use a fitting tool and create a new variable. fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) It is worth having a bit of a think about what this polyfit is doing. It is a numpy function. polyfit(x,y, degree of polynomial). What is 1400 representing? Why is that the cut-off? Maybe take a look at your own lab report. But the plot here is helpful too I think. Now is probably a good time for another print... print(fit[0]) print(fit[1]) -0.0032100701686121782 0.8597164594476661 We were fitting a straight line! The fit function returns two values, one is the gradient and one is the intercept, we can make these into their own variable. m=fit[0] c=fit[1] Now we can plot this. plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fb6c07ff050>] For me, I need to plot it ontop of the existing plots again. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fb6d0a1ce50>] Hopefully you can see it all, and the small black dashes. You can look up the plot instructions to see what k means. Final analysis We now can calculate the velocity of the nitrogen from the fit. Which remember, is the reason we\u2019ve done all this work... and let's print it. v=-4*V*m/A print(v) 469.5579056720142 Do you get the same? Does it agree with your lab report? Download this page as a Jupyter notebook or as a standalone Python script .","title":"Molecular Speeds lab Python data analysis - single gas dataset processing"},{"location":"phys221/Single_exp/#molecular-speeds-lab-python-data-analysis-single-gas-dataset-processing","text":"This Python workshop was originally developed by VUW Physics students William Holmes-Hewett and Campbell Matthews. Thanks to both of them for their energy and enthusiam in making this resource.","title":"Molecular Speeds lab Python data analysis - single gas dataset processing"},{"location":"phys221/Single_exp/#making-use-of-folders","text":"Start a new Code in the folder that contains the file \u2018Nitrogen 28.dat\u2019 We have given you an example of the full code that you can download at the end here. Remember that we can 'comment out' code by using a # so the program won't try to run it. As you run through you may want to comment out some of the print commands that are in to check that the code was working along the way.","title":"Making use of folders"},{"location":"phys221/Single_exp/#setting-up","text":"The first thing we want to do is define some constants that we will use later on. These will be the volume of the bulb, the area of the opening and the pressure at which the effusion regime begins. You were asked to calculate some of these in the pre-workshop exercise. The pre-workshop exercise also serves as a reminder of the PHYS223 lab that this data analysis is based on. So let\u2019s write the first piece of the code and set up same values to use later on (note capital V we are using here). V=2.03*10**-3 A=5.55113*10**-8 ef_begin=0.26 Let\u2019s check that worked by printing one of the variables. You can print them all if you like. print(V) 0.0020299999999999997","title":"Setting up"},{"location":"phys221/Single_exp/#importing-packages","text":"To start of with we need to call up the packages that help us handle our data. Packages are groups of functions that can be imported all at the same time for later use. The package we want is called \u2018numpy\u2019 so let\u2019s import that now. import numpy as np Now we want to import a module to help with plotting. Note that some of this code here may be in a slightly different order to the example .py code that we have given in the folder on Blackboard. Does that matter? from matplotlib import pyplot as plt","title":"Importing packages"},{"location":"phys221/Single_exp/#importing-the-data-files","text":"We also want to load up the data that we have in our data file. This could be a .txt file, a .csv or a .dat for example. In this case we have a .dat file. Later we will use a .csv. If you remember back to the experiment, the data is pressure as a function of time. Now we want to use numpy to import our data, the command we are going to use is called \u2018genfromtext\u2019. We will import the data into a variable, called rawdata: rawdata=np.genfromtxt(\"Nitrogen 28.dat\", delimiter=\"cat\") Hold on... What's this cat? Note that the delimiter argument tells Python how the data is separated, just to prove a point I\u2019ve replaced all the commas, which are normally used to separate data, with the word \u2018cat\u2019. You can see this if you open the file in excel or something similar. This seems silly, does it really help me learn? Hopefully. And think back to this when you move onto the multiple data example next. Now let\u2019s print the variable \u2018rawdata\u2019 print(rawdata) [[0.00000000e+00 3.91587981e+00] [1.00000000e+00 3.90860622e+00] [2.00000000e+00 3.89163795e+00] ... [2.28100000e+03 6.10025760e-02] [2.28200000e+03 6.10025760e-02] [2.28300000e+03 6.24196670e-02]] This looks good and along the lines of what you expect. It really makes sense to throw in a few tests here and there to make sure that the code is doing what you expect.","title":"Importing the data files"},{"location":"phys221/Single_exp/#using-arrays-and-vectors","text":"Now we want to split this array up into two vectors, one for time and one for pressure, we can do that using the indexing we learned before. Note, when I say before, I mean in the first year lab and/or the introduction material that is loaded on Blackboard. time=rawdata[:,0] pressure=rawdata[:,1] This [ : ,0] means [ first_row:last_row , column_0 ]. If you have a 2-dimensional list/matrix/array, this notation will give you all the values in column 0 (from all rows). We should probably test what's happening here, just to be sure... print(time) print(pressure) [0.000e+00 1.000e+00 2.000e+00 ... 2.281e+03 2.282e+03 2.283e+03] [3.91587981 3.90860622 3.89163795 ... 0.06100258 0.06100258 0.06241967]","title":"Using arrays and vectors"},{"location":"phys221/Single_exp/#plotting-the-data","text":"It's quite tricky to see what's really going on here, so let's plot it to get a better idea. plt.figure(1) plt.plot(time,pressure) plt.xlabel(\"time (s)\") plt.ylabel(\"Pressure (Pa)\") Text(0, 0.5, 'Pressure (Pa)') Note that I am planning on having multiple figures so I have given this one a number. This should help as we move along. I even remembered to label my axes and to put in units!","title":"Plotting the data"},{"location":"phys221/Single_exp/#making-use-of-built-in-functions","text":"If you remember back to the experiment (and what we actually have to do to from the basis of our analysis here) we need to find the minimum pressure we reached. To do this we will use an inbuilt python function \u2018min\u2019 and set the result as a new variable \u2018baseP\u2019. baseP=min(rawdata[:,1]) print(baseP) 0.061002576 Have a bit of a think about what that function is doing. It is going from the first data point and last data point in our pressure column (here 1) and finding the minimum. If you want to know more you can easily google this function and see how it operates. We are now going to use a list comprehension to subtract the base pressure from each value in \u2018Pressure\u2019 as we will need to take the log of this later (everyone remembers the experiment and you all definitely read ahead to see where this is going...). We therefore want to avoid 0 values, and as baseP is in \u2018Pressure\u2019 it will return a zero, so we can just multiply it by 0.99 to avoid this. P_minus_baseP=[i-0.99*baseP for i in pressure] print(P_minus_baseP) - do this at your peril. It gives a big list... Now we have our pressure minus base pressure we need to find the point at which the effusion regime begins, to do this we are going to make a new vector of residuals. We already know the pressure at which the effusion regime begins, we called it \u2018ef_begin\u2019, what we don't know is the INDEX of this value in the pressure vector. We are going to find this using residuals.","title":"Making use of built in functions"},{"location":"phys221/Single_exp/#making-use-of-loops","text":"This vector \u2018Res\u2019 will be a vector where we take the value we are looking for \u2018ef_begin\u2019 from all values of the pressure vector the smallest value of this vector will have an index equal to that of when the effusion regime begins, in the vector \u2018Pressure\u2019. res=[abs(i-ef_begin) for i in P_minus_baseP] You should recognise the list comprehension in the line above. This was in the reminder tutorial and is a neat way of writing a for loop. We've made a new array as described above. We now need to take the minimum value. minres=min(res) print(minres) 0.00043142575999999266 I get 0.00043142575999999266, you should get something similar\u2026. Or the same. We now need to find the index of the minimum value, for this we will use a for loop, we want the loop to run for as many entries as we have in res so we can make it run for \u2018len(res)\u2019 we then want to use an if statement, so when \u2018res[i]=minres\u2019 we assign that \u2018i\u2019 to a variable, then stop. Just take a moment and think that through. Can you write it yourself before you scroll down? * * * * for i in range (len(res)): if res[i]==minres: Peff_index=i break print(Peff_index) 691 Now we have the value of the index where the effusion regime begins we can move on.","title":"Making use of loops"},{"location":"phys221/Single_exp/#using-the-math-module","text":"The next step is to take the log of our data, to do this we need to import another module called \u2018math\u2019. Maybe we could have added that to the top with numpy and matplotlib, but here we are... from math import log import math We are going to use another list comprehension to create a new vector with all the logged values LogP=[log(i) for i in P_minus_baseP] print(LogP) - if you want to check things. I find it better to plot. Especially as you have your own data from the PHYS223 lab that you can double check against. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") Text(0, 0.5, 'log Pressure (Pa)') We can also plot only the data after we reach the effusion regime, on the same figure, the \u2018r\u2019 makes it red. plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fb6a11b7fd0>] Actually, in spyder that just plots ontop of the existing plot. In the Jupyter workbook environment things happen a little differently. So, if you are in Sypder I expect you have something that looks like this: plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") [<matplotlib.lines.Line2D at 0x7fb6c06a49d0>] Here in the Jupyter environment I had to put them together in one code section. So if anyone is using Jupyter you will have to do what I just did here.","title":"Using the math module"},{"location":"phys221/Single_exp/#fitting","text":"Now I want to fit a trend line to the section of the data in the effusion regime. To do this I'll use a fitting tool and create a new variable. fit=np.polyfit(time[Peff_index:1400],LogP[Peff_index:1400],1) It is worth having a bit of a think about what this polyfit is doing. It is a numpy function. polyfit(x,y, degree of polynomial). What is 1400 representing? Why is that the cut-off? Maybe take a look at your own lab report. But the plot here is helpful too I think. Now is probably a good time for another print... print(fit[0]) print(fit[1]) -0.0032100701686121782 0.8597164594476661 We were fitting a straight line! The fit function returns two values, one is the gradient and one is the intercept, we can make these into their own variable. m=fit[0] c=fit[1] Now we can plot this. plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fb6c07ff050>] For me, I need to plot it ontop of the existing plots again. plt.figure(2) plt.plot(time,LogP) plt.xlabel(\"time (s)\") plt.ylabel(\"log Pressure (Pa)\") plt.plot(time[Peff_index:],LogP[Peff_index:],\"r\") plt.plot(time[Peff_index:1400],time[Peff_index:1400]*m+c, \"k--\") [<matplotlib.lines.Line2D at 0x7fb6d0a1ce50>] Hopefully you can see it all, and the small black dashes. You can look up the plot instructions to see what k means.","title":"Fitting"},{"location":"phys221/Single_exp/#final-analysis","text":"We now can calculate the velocity of the nitrogen from the fit. Which remember, is the reason we\u2019ve done all this work... and let's print it. v=-4*V*m/A print(v) 469.5579056720142 Do you get the same? Does it agree with your lab report? Download this page as a Jupyter notebook or as a standalone Python script .","title":"Final analysis"},{"location":"phys304/Ylm/","text":"Visualising spherical harmonics. Example adapted from https://scipython.com/book/chapter-8-scipy/examples/visualizing-the-spherical-harmonics/ . Required dependencies We load the usual dependencies numpy and scipy , and import the sph_harm function from scipy 's special functions to calculate spherical harmonics of any degree and order. import numpy as np import scipy as sp from scipy.special import sph_harm Spherical grid We'll evaluate the function on a grid of (\\theta, \\phi) (\\theta, \\phi) values, and calculate the corresponding cartesian coordinates (x,y,z) (x,y,z) for plotting. R = 10. # arbitrary radius Np = 36 # number of steps along phi Nt = 18 # number of steps along theta theta = -np.arccos(np.linspace(-1, 1, Nt)) # uniform steps along cos(theta) phi = np.linspace(0, 2*np.pi, Np) theta, phi = np.meshgrid(theta, phi) x = R * np.sin(theta) * np.cos(phi) y = R * np.sin(theta) * np.sin(phi) z = R * np.cos(theta) Spherical harmonics Note that sph_harm harmfully takes the opposite convention to ours with regards to the meaning of theta and phi in the help page. l = 5 m = 3 Ylm = 1/R**(l+1) * sph_harm(m, l, phi, theta).real Plotting (static) We first use matplotlib to create a 3D surface plot, rescaling the scalar values to a colour palette defined to map on the interval [0,1] [0,1] . import matplotlib.pyplot as plt from matplotlib import cm, colors from mpl_toolkits.mplot3d import Axes3D fmax, fmin = Ylm.max(), Ylm.min() Ylm = (Ylm - fmin)/(fmax - fmin) # Set the aspect ratio to 1 so our sphere looks spherical fig = plt.figure(figsize=plt.figaspect(1.)) ax = fig.add_subplot(111, projection='3d') ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=cm.seismic(Ylm)) # Turn off the axis planes ax.set_axis_off() plt.show() Plotting (interactive) With the Jupyter notebook, or in the ipython console, you can create an interactive version of this plot using the Plotly library. import plotly.graph_objects as go #import chart_studio.plotly as py fig = go.Figure() fig.add_trace(go.Surface(x=x, y=y, z=z, surfacecolor=Ylm, showscale=False, colorscale='PrGN')) # fig.show() # note: interactive output doesn't work on this website, but run it in Jupyter or Spyder fig.show(renderer='png') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Ylm"},{"location":"phys304/Ylm/#required-dependencies","text":"We load the usual dependencies numpy and scipy , and import the sph_harm function from scipy 's special functions to calculate spherical harmonics of any degree and order. import numpy as np import scipy as sp from scipy.special import sph_harm","title":"Required dependencies"},{"location":"phys304/Ylm/#spherical-grid","text":"We'll evaluate the function on a grid of (\\theta, \\phi) (\\theta, \\phi) values, and calculate the corresponding cartesian coordinates (x,y,z) (x,y,z) for plotting. R = 10. # arbitrary radius Np = 36 # number of steps along phi Nt = 18 # number of steps along theta theta = -np.arccos(np.linspace(-1, 1, Nt)) # uniform steps along cos(theta) phi = np.linspace(0, 2*np.pi, Np) theta, phi = np.meshgrid(theta, phi) x = R * np.sin(theta) * np.cos(phi) y = R * np.sin(theta) * np.sin(phi) z = R * np.cos(theta)","title":"Spherical grid"},{"location":"phys304/Ylm/#spherical-harmonics","text":"Note that sph_harm harmfully takes the opposite convention to ours with regards to the meaning of theta and phi in the help page. l = 5 m = 3 Ylm = 1/R**(l+1) * sph_harm(m, l, phi, theta).real","title":"Spherical harmonics"},{"location":"phys304/Ylm/#plotting-static","text":"We first use matplotlib to create a 3D surface plot, rescaling the scalar values to a colour palette defined to map on the interval [0,1] [0,1] . import matplotlib.pyplot as plt from matplotlib import cm, colors from mpl_toolkits.mplot3d import Axes3D fmax, fmin = Ylm.max(), Ylm.min() Ylm = (Ylm - fmin)/(fmax - fmin) # Set the aspect ratio to 1 so our sphere looks spherical fig = plt.figure(figsize=plt.figaspect(1.)) ax = fig.add_subplot(111, projection='3d') ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=cm.seismic(Ylm)) # Turn off the axis planes ax.set_axis_off() plt.show()","title":"Plotting (static)"},{"location":"phys304/Ylm/#plotting-interactive","text":"With the Jupyter notebook, or in the ipython console, you can create an interactive version of this plot using the Plotly library. import plotly.graph_objects as go #import chart_studio.plotly as py fig = go.Figure() fig.add_trace(go.Surface(x=x, y=y, z=z, surfacecolor=Ylm, showscale=False, colorscale='PrGN')) # fig.show() # note: interactive output doesn't work on this website, but run it in Jupyter or Spyder fig.show(renderer='png') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Plotting (interactive)"},{"location":"phys304/Ylm_interactive/","text":"Interactive visualisation of spherical harmonics. Required dependencies We import the sph_harm function from scipy 's special functions to calculate spherical harmonics of any degree and order, and plotly for the interactive 3D display. import numpy as np import scipy as sp from scipy.special import sph_harm import plotly.graph_objects as go import plotly.io as pio # pio.renderers.default = \"browser\" Spherical harmonics We'll evaluate the scalar harmonic Y_{lm} Y_{lm} on a grid of (\\theta, \\phi) (\\theta, \\phi) values, and multiply by the corresponding radial function over a grid of r r values. l = 5 m = 3 R = 10. Np = 36 Nt = 36 Nr=10 rhalf=Nr//2 -1 r = np.linspace(0.99*R, 1.01*R, Nr) theta = np.linspace(0, np.pi, Nt) phi = np.linspace(0, 2*np.pi, Np) d_r = r[1]-r[0] d_theta = theta[1]-theta[0] d_phi = phi[1]-phi[0] theta, phi, r = np.meshgrid(theta, phi, r) Ylm = 1/r**(l+1) * sph_harm(m, l, phi, theta).real Gradient \u2013 magnetic field From that 3D array representing the scalar potential we can evaluate a numerical gradient in spherical coordinates, which represents the vector magnetic field. # prefactors oneoverr = 1/r oneoverrsintheta = 1/(r*np.sin(theta)+1e-12) costheta = np.cos(theta)[:,:,rhalf] sintheta = np.sin(theta)[:,:,rhalf] cosphi = np.cos(phi)[:,:,rhalf] sinphi = np.sin(phi)[:,:,rhalf] xx = R*sintheta*cosphi yy = R*sintheta*sinphi zz = R*costheta def field_gradient(Y): deriv = np.gradient(Y) ## from partial derivatives to spherical gradient dVt = deriv[1] dVp = deriv[0] dVr = deriv[2] Br = -dVr[:,:,rhalf] * 1/d_r Bt = -oneoverr[:,:,rhalf] * dVt[:,:,rhalf] * 1/d_theta Bp = -oneoverrsintheta[:,:,rhalf] * dVp[:,:,rhalf] * 1/d_phi Bx = sintheta*cosphi*Br + costheta*cosphi*Bt - sinphi*Bp By = sintheta*sinphi*Br + costheta*sinphi*Bt + cosphi*Bp Bz = costheta*Br - sintheta*Bt u=np.where(np.isfinite(Bx), Bx, 0) v=np.where(np.isfinite(By), By, 0) w=np.where(np.isfinite(Bz), Bz, 0) B2 = u**2 + v**2 + w**2 maxB = np.sqrt(np.max(B2)) return(u/maxB, v/maxB, w/maxB) u, v, w = field_gradient(Ylm) Plotting We use plotly to produce an interactive 3D surface plot, and add arrows to represent the vector field at a given radial distance. Rout = 1.1 sizeref = 0.8 step = 1 fig = go.Figure() fig.add_trace(go.Surface(x=xx, y=yy, z=zz, surfacecolor=Ylm[:,:,rhalf], showscale=False, colorscale='RdBu')) fig.add_trace(go.Cone( x=Rout*np.concatenate(xx[::step, ::step]), y=Rout*np.concatenate(yy[::step, ::step]), z=Rout*np.concatenate(zz[::step, ::step]), u=np.concatenate(u[::step, ::step]), v=np.concatenate(v[::step, ::step]), w=np.concatenate(w[::step, ::step]), showlegend=False, showscale=False, colorscale=[(0, \"orange\"), (0.5, \"orange\"), (1, \"orange\")], sizemode=\"absolute\", sizeref=sizeref)) fig.update_layout(title_text=\"Y({0},{1})\".format(l,m),showlegend=False) # set annotations white for clarity fig.update_layout(scene = dict( xaxis = dict( nticks=0, color='white', backgroundcolor=\"white\", gridcolor=\"white\", showbackground=False, zerolinecolor=\"white\",), yaxis = dict( color='white', backgroundcolor=\"white\", gridcolor=\"white\", showbackground=False, zerolinecolor=\"white\"), zaxis = dict( color='white', backgroundcolor=\"white\", gridcolor=\"white\", showbackground=False, zerolinecolor=\"white\",),), width=1200, margin=dict( r=10, l=100, b=10, t=10) ) # fig.show() # use this in interactive notebook fig.show(renderer='svg') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Ylm interactive"},{"location":"phys304/Ylm_interactive/#required-dependencies","text":"We import the sph_harm function from scipy 's special functions to calculate spherical harmonics of any degree and order, and plotly for the interactive 3D display. import numpy as np import scipy as sp from scipy.special import sph_harm import plotly.graph_objects as go import plotly.io as pio # pio.renderers.default = \"browser\"","title":"Required dependencies"},{"location":"phys304/Ylm_interactive/#spherical-harmonics","text":"We'll evaluate the scalar harmonic Y_{lm} Y_{lm} on a grid of (\\theta, \\phi) (\\theta, \\phi) values, and multiply by the corresponding radial function over a grid of r r values. l = 5 m = 3 R = 10. Np = 36 Nt = 36 Nr=10 rhalf=Nr//2 -1 r = np.linspace(0.99*R, 1.01*R, Nr) theta = np.linspace(0, np.pi, Nt) phi = np.linspace(0, 2*np.pi, Np) d_r = r[1]-r[0] d_theta = theta[1]-theta[0] d_phi = phi[1]-phi[0] theta, phi, r = np.meshgrid(theta, phi, r) Ylm = 1/r**(l+1) * sph_harm(m, l, phi, theta).real","title":"Spherical harmonics"},{"location":"phys304/Ylm_interactive/#gradient-magnetic-field","text":"From that 3D array representing the scalar potential we can evaluate a numerical gradient in spherical coordinates, which represents the vector magnetic field. # prefactors oneoverr = 1/r oneoverrsintheta = 1/(r*np.sin(theta)+1e-12) costheta = np.cos(theta)[:,:,rhalf] sintheta = np.sin(theta)[:,:,rhalf] cosphi = np.cos(phi)[:,:,rhalf] sinphi = np.sin(phi)[:,:,rhalf] xx = R*sintheta*cosphi yy = R*sintheta*sinphi zz = R*costheta def field_gradient(Y): deriv = np.gradient(Y) ## from partial derivatives to spherical gradient dVt = deriv[1] dVp = deriv[0] dVr = deriv[2] Br = -dVr[:,:,rhalf] * 1/d_r Bt = -oneoverr[:,:,rhalf] * dVt[:,:,rhalf] * 1/d_theta Bp = -oneoverrsintheta[:,:,rhalf] * dVp[:,:,rhalf] * 1/d_phi Bx = sintheta*cosphi*Br + costheta*cosphi*Bt - sinphi*Bp By = sintheta*sinphi*Br + costheta*sinphi*Bt + cosphi*Bp Bz = costheta*Br - sintheta*Bt u=np.where(np.isfinite(Bx), Bx, 0) v=np.where(np.isfinite(By), By, 0) w=np.where(np.isfinite(Bz), Bz, 0) B2 = u**2 + v**2 + w**2 maxB = np.sqrt(np.max(B2)) return(u/maxB, v/maxB, w/maxB) u, v, w = field_gradient(Ylm)","title":"Gradient \u2013 magnetic field"},{"location":"phys304/Ylm_interactive/#plotting","text":"We use plotly to produce an interactive 3D surface plot, and add arrows to represent the vector field at a given radial distance. Rout = 1.1 sizeref = 0.8 step = 1 fig = go.Figure() fig.add_trace(go.Surface(x=xx, y=yy, z=zz, surfacecolor=Ylm[:,:,rhalf], showscale=False, colorscale='RdBu')) fig.add_trace(go.Cone( x=Rout*np.concatenate(xx[::step, ::step]), y=Rout*np.concatenate(yy[::step, ::step]), z=Rout*np.concatenate(zz[::step, ::step]), u=np.concatenate(u[::step, ::step]), v=np.concatenate(v[::step, ::step]), w=np.concatenate(w[::step, ::step]), showlegend=False, showscale=False, colorscale=[(0, \"orange\"), (0.5, \"orange\"), (1, \"orange\")], sizemode=\"absolute\", sizeref=sizeref)) fig.update_layout(title_text=\"Y({0},{1})\".format(l,m),showlegend=False) # set annotations white for clarity fig.update_layout(scene = dict( xaxis = dict( nticks=0, color='white', backgroundcolor=\"white\", gridcolor=\"white\", showbackground=False, zerolinecolor=\"white\",), yaxis = dict( color='white', backgroundcolor=\"white\", gridcolor=\"white\", showbackground=False, zerolinecolor=\"white\"), zaxis = dict( color='white', backgroundcolor=\"white\", gridcolor=\"white\", showbackground=False, zerolinecolor=\"white\",),), width=1200, margin=dict( r=10, l=100, b=10, t=10) ) # fig.show() # use this in interactive notebook fig.show(renderer='svg') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Plotting"},{"location":"phys304/relaxation/","text":"Relaxation method to solve the Laplace equation in 2D import scipy as sp import numpy as np import matplotlib.pyplot as plt import matplotlib.cm as cm Rectangular grid We'll calculate the potential on a N_x\\times N_y N_x\\times N_y grid of (x,y) (x,y) values. Nx = 50 Ny = 50 xv = np.linspace(0, 50, Nx) yv = np.linspace(0, 10, Ny) x, y = np.meshgrid(xv, yv) Boundary conditions ## initialise our matrix of potential V with random values V = np.random.rand(Ny+1, Nx+1) ## set boundary conditions Vmax = -1.0 V[0,:] = 0.0 V[Ny,:] = 0.0 V[:-1,0] = Vmax*np.sin(3*np.pi*yv/max(yv)) V[:,Nx] = 0 Vini = V.copy() Iterations relaxation method: iteratively replace value at point by average of 4 neighbours Niter = 5000 Vlist = list() # collect all iterations Vlist.append(V.copy()) # note: make an explicit copy, otherwise we'll get the same object for it in range(1, Niter): Vtmp = V for ix in range(1, Nx): for iy in range(1, Ny): V[iy,ix] = 0.25*(Vlist[it-1][iy+1,ix] + Vlist[it-1][iy-1,ix] + Vlist[it-1][iy,ix+1] + Vlist[it-1][iy,ix-1]) Vlist.append(V.copy()) # save current iteration Plotting fig = plt.figure() ax1 = fig.add_subplot(121) ax1.imshow(Vini, interpolation='nearest', cmap=cm.Greys_r) ax2 = fig.add_subplot(122) ax2.imshow(Vlist[-1], interpolation='nearest', cmap=cm.Greys_r) plt.show() import plotly.graph_objects as go fig = go.Figure(data=[go.Surface(z=Vlist[-1], colorscale='PrGN')]) fig.update_layout(title='Relaxed solution', autosize=False, width=800, height=800, margin=dict(l=65, r=50, b=100, t=90), scene = { 'camera_eye': {\"x\": -1, \"y\": -1, \"z\": 0.5}, \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 0.8} }) fig.show(renderer='png') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Relaxation"},{"location":"phys304/relaxation/#relaxation-method-to-solve-the-laplace-equation-in-2d","text":"import scipy as sp import numpy as np import matplotlib.pyplot as plt import matplotlib.cm as cm","title":"Relaxation method to solve the Laplace equation in 2D"},{"location":"phys304/relaxation/#rectangular-grid","text":"We'll calculate the potential on a N_x\\times N_y N_x\\times N_y grid of (x,y) (x,y) values. Nx = 50 Ny = 50 xv = np.linspace(0, 50, Nx) yv = np.linspace(0, 10, Ny) x, y = np.meshgrid(xv, yv)","title":"Rectangular grid"},{"location":"phys304/relaxation/#boundary-conditions","text":"## initialise our matrix of potential V with random values V = np.random.rand(Ny+1, Nx+1) ## set boundary conditions Vmax = -1.0 V[0,:] = 0.0 V[Ny,:] = 0.0 V[:-1,0] = Vmax*np.sin(3*np.pi*yv/max(yv)) V[:,Nx] = 0 Vini = V.copy()","title":"Boundary conditions"},{"location":"phys304/relaxation/#iterations","text":"relaxation method: iteratively replace value at point by average of 4 neighbours Niter = 5000 Vlist = list() # collect all iterations Vlist.append(V.copy()) # note: make an explicit copy, otherwise we'll get the same object for it in range(1, Niter): Vtmp = V for ix in range(1, Nx): for iy in range(1, Ny): V[iy,ix] = 0.25*(Vlist[it-1][iy+1,ix] + Vlist[it-1][iy-1,ix] + Vlist[it-1][iy,ix+1] + Vlist[it-1][iy,ix-1]) Vlist.append(V.copy()) # save current iteration","title":"Iterations"},{"location":"phys304/relaxation/#plotting","text":"fig = plt.figure() ax1 = fig.add_subplot(121) ax1.imshow(Vini, interpolation='nearest', cmap=cm.Greys_r) ax2 = fig.add_subplot(122) ax2.imshow(Vlist[-1], interpolation='nearest', cmap=cm.Greys_r) plt.show() import plotly.graph_objects as go fig = go.Figure(data=[go.Surface(z=Vlist[-1], colorscale='PrGN')]) fig.update_layout(title='Relaxed solution', autosize=False, width=800, height=800, margin=dict(l=65, r=50, b=100, t=90), scene = { 'camera_eye': {\"x\": -1, \"y\": -1, \"z\": 0.5}, \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 0.8} }) fig.show(renderer='png') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Plotting"},{"location":"phys415/fresnel/","text":"Fresnel reflection and transmission at an interface import cmath import matplotlib.pyplot as plt import numpy as np import scipy as sp wavelength = 633.0 n1 = 1.5 n2 = 1.0 Fresnel coefficients For a given incident angle, we compute the wavevectors in both media, the in-plane wavevector, the complex reflection and transmission coefficients for p and s polarisations, and return the intensity coefficients. def fresnel(theta): k0 = 2*np.pi/wavelength k1 = n1 * k0 k2 = n2 * k0 k_x = k1 * cmath.sin(theta) k1_z = np.sqrt(k1**2 - k_x**2) k2_z = np.sqrt(k2**2 - k_x**2) eps1 = n1**2 eps2 = n2**2 ap = k1_z / eps1 bp = k2_z / eps2 rp = (ap - bp) / (ap + bp) tp = 2 * ap / (ap + bp) rs = (k1_z - k2_z) / (k1_z + k2_z) ts = 2 * k1_z / (k1_z + k2_z) Rs = abs(rs)**2 Rp = abs(rp)**2 Ts = abs(ts)**2 * np.real(k2_z/k1_z) Tp = 1 - Rp return(Rp,Rs,Tp,Ts) Loop over incident angle We create a vector of incident angles from 0 to pi/2 (excluding exact normal incidence as the denominators blow up), and call the function defined above. Ntheta = 180 atheta = np.linspace(0.001, np.pi/2-0.001, Ntheta) arp = np.zeros(Ntheta) ars = np.zeros(Ntheta) atp = np.zeros(Ntheta) ats = np.zeros(Ntheta) for it in range(Ntheta): rp,rs,tp,ts = fresnel(atheta[it]) arp[it] = rp; ars[it] = rs; atp[it] = tp; ats[it] = ts; Plotting atheta_deg = atheta * 180/np.pi plt.figure() plt.plot(atheta_deg, arp, '-k') plt.plot(atheta_deg, ars,'--k') plt.plot(atheta_deg, atp, '-k') plt.plot(atheta_deg, ats, '--k') plt.show() We note the following features: p-polarisation has a minimum in reflectivity (Brewster angle) both polarisations yield complete reflection above ~42 degrees (total internal reflection), where the complex amplitude reflection coefficient becomes purely imaginary reflection at normal incidence is the same for both polarisations (as it must be, since they're both equivalent when the plane of incidence cannot be defined) Download this page as a Jupyter notebook or as a standalone Python script .","title":"Fresnel"},{"location":"phys415/fresnel/#fresnel-reflection-and-transmission-at-an-interface","text":"import cmath import matplotlib.pyplot as plt import numpy as np import scipy as sp wavelength = 633.0 n1 = 1.5 n2 = 1.0","title":"Fresnel reflection and transmission at an interface"},{"location":"phys415/fresnel/#fresnel-coefficients","text":"For a given incident angle, we compute the wavevectors in both media, the in-plane wavevector, the complex reflection and transmission coefficients for p and s polarisations, and return the intensity coefficients. def fresnel(theta): k0 = 2*np.pi/wavelength k1 = n1 * k0 k2 = n2 * k0 k_x = k1 * cmath.sin(theta) k1_z = np.sqrt(k1**2 - k_x**2) k2_z = np.sqrt(k2**2 - k_x**2) eps1 = n1**2 eps2 = n2**2 ap = k1_z / eps1 bp = k2_z / eps2 rp = (ap - bp) / (ap + bp) tp = 2 * ap / (ap + bp) rs = (k1_z - k2_z) / (k1_z + k2_z) ts = 2 * k1_z / (k1_z + k2_z) Rs = abs(rs)**2 Rp = abs(rp)**2 Ts = abs(ts)**2 * np.real(k2_z/k1_z) Tp = 1 - Rp return(Rp,Rs,Tp,Ts)","title":"Fresnel coefficients"},{"location":"phys415/fresnel/#loop-over-incident-angle","text":"We create a vector of incident angles from 0 to pi/2 (excluding exact normal incidence as the denominators blow up), and call the function defined above. Ntheta = 180 atheta = np.linspace(0.001, np.pi/2-0.001, Ntheta) arp = np.zeros(Ntheta) ars = np.zeros(Ntheta) atp = np.zeros(Ntheta) ats = np.zeros(Ntheta) for it in range(Ntheta): rp,rs,tp,ts = fresnel(atheta[it]) arp[it] = rp; ars[it] = rs; atp[it] = tp; ats[it] = ts;","title":"Loop over incident angle"},{"location":"phys415/fresnel/#plotting","text":"atheta_deg = atheta * 180/np.pi plt.figure() plt.plot(atheta_deg, arp, '-k') plt.plot(atheta_deg, ars,'--k') plt.plot(atheta_deg, atp, '-k') plt.plot(atheta_deg, ats, '--k') plt.show() We note the following features: p-polarisation has a minimum in reflectivity (Brewster angle) both polarisations yield complete reflection above ~42 degrees (total internal reflection), where the complex amplitude reflection coefficient becomes purely imaginary reflection at normal incidence is the same for both polarisations (as it must be, since they're both equivalent when the plane of incidence cannot be defined) Download this page as a Jupyter notebook or as a standalone Python script .","title":"Plotting"},{"location":"phys415/multilayer/","text":"Matrix formulation of Fresnel coefficients for multilayers import cmath import matplotlib.pyplot as plt import numpy as np import scipy as sp For a given incident angle and wavelength, we compute the wavevectors k_i k_i in all media the in-plane wavevector k_x k_x the k_z k_z components in all media From there we iterate over the number of interfaces and compute the matrix associated with each interface, and its product with the matrix from previous iterations. The multi-interface complex reflection and transmission coefficients are obtained from the elements M_{11} M_{11} and M_{21} M_{21} def multilayer(wavelength, theta, epsilon, thickness, polarisation): Nlay = len(epsilon) k0 = 2*np.pi/wavelength n1 = cmath.sqrt(epsilon[0]) k1 = n1 * k0 k_x = k1 * cmath.sin(theta) k = [cmath.sqrt(epsi)*k0 for epsi in epsilon] kz = [cmath.sqrt(ki**2 - k_x**2) for ki in k] ## calculate the transition matrix M M11 = M22 = 1.0 + 0j M21 = M12 = 0.0 + 0j Mi11 = Mi12 = Mi21 = Mi22 = 1 + 0j # empty 2x2 complex matrix M = np.zeros([2,2])+0j M_tmp = np.zeros([2,2])+0j for il in range(Nlay-1): if polarisation == 'p': Ki = (epsilon[il] / epsilon[il+1]) * (kz[il+1] / kz[il]) elif polarisation == 's': Ki = kz[il+1] / kz[il] phasei = np.exp(1j*thickness[il]*kz[il]) Mi11 = 0.5*(1+Ki) / phasei Mi21 = 0.5*(1-Ki) * phasei Mi12 = 0.5*(1-Ki) / phasei Mi22 = 0.5*(1+Ki) * phasei M_tmp[0,0] = 0.5*(1+Ki) / phasei M_tmp[1,0] = 0.5*(1-Ki) * phasei M_tmp[0,1] = 0.5*(1-Ki) / phasei M_tmp[1,1] = 0.5*(1+Ki) * phasei M = M * M_tmp M11new = M11*Mi11 + M12*Mi21 M21new = M21*Mi11 + M22*Mi21 M12new = M11*Mi12 + M12*Mi22 M22new = M21*Mi12 + M22*Mi22 M11 = M11new M12 = M12new M21 = M21new M22 = M22new t = 1 / M11 r = M21 * t R = abs(r)**2 T = 1 - R return(R, T) Boring example of a single interface Check that we reproduce the results from single-interface Fresnel coefficients. epsilon = (1.5**2, 1.5**2, 1.0**2) thickness = (1e3, 50, 1e3) polarisation = 'p' theta = np.pi/4 wavelength=633.0 r, t = multilayer(wavelength, theta, epsilon, thickness, polarisation) Ntheta = 360 atheta = np.linspace(0.001, np.pi/2-0.001, Ntheta) arp = np.zeros(Ntheta) ars = np.zeros(Ntheta) atp = np.zeros(Ntheta) ats = np.zeros(Ntheta) for it in range(Ntheta): theta = atheta[it] rp, tp = multilayer(wavelength, theta, epsilon, thickness, 'p') rs, ts = multilayer(wavelength, theta, epsilon, thickness, 's') arp[it] = rp; ars[it] = rs; atp[it] = tp; ats[it] = ts; atheta_deg = atheta * 180/np.pi plt.figure() plt.plot(atheta_deg, arp, '-k') plt.plot(atheta_deg, ars,'--k') plt.show() Distributed Bragg Reflector This is a multilayer where the optical thickness of each layer is \\lambda/4 \\lambda/4 , leading to constructive interference in the reflection coefficient around the central wavelength. We define a helper function to return arrays of epsilon and thickness for such structures. def dbr(lambda0, n1, n2, N): d1 = lambda0 / 4 / n1 d2 = lambda0 / 4 / n2 thickness = np.concatenate([[d1,d2] for _ in range(N)]) epsilon = np.concatenate([[n1**2,n2**2] for _ in range(N)]) return(epsilon, thickness) Nlambda = 200 wavelength = np.linspace(300, 900, Nlambda) ar1 = np.zeros(Nlambda) s1 = dbr(600, 2.0,1.5, 10) for it in range(Nlambda): rp1, tp = multilayer(wavelength[it], 0.0, s1[0], s1[1], 'p') ar1[it] = rp1 plt.figure() plt.plot(wavelength, ar1) plt.show() Drude model for the dielectric function of metals Our next structure adds a gold layer on top of the DBR; because gold is very dispersive in the visible (it is yellow, for one thing), we need a wavelength-dependent dielectric function, defined below. # this is approximately like gold in the red-near-IR part of the spectrum def drude(wavelength, omega_p, gamma_p, epsilon_inf): omega = 2*np.pi*1e9 * 2.99792458e8 / wavelength epsilon = epsilon_inf - omega_p**2 / (omega**2 + 1j * omega * gamma_p) return(epsilon) import math import matplotlib.pyplot as plt Nlambda = 200 wavelength = np.linspace(400, 800, Nlambda) e = [drude(l, 1e16, 1e14, 1) for l in wavelength] plt.figure() plt.plot(wavelength, np.real(e), '-k') plt.plot(wavelength, np.imag(e), '-k') plt.show() Tamm plasmon structure Let's see what happens to the reflectivity of our DBR when we add a thin gold film on top. A mirror on top of a mirror, essentially. This structure supports optical modes called Tamm plasmons. def tamm(lambda0, n1, n2, N, dm, epsm, nleft, nright): s1 = dbr(lambda0, n1, n2, N) epsilon = np.append(epsm, s1[0]) epsilon = np.append(nleft**2, epsilon) epsilon = np.append(epsilon, nright**2) thickness = np.append(dm, s1[1]) thickness = np.append(100, thickness) return(epsilon, thickness) We now compare the results for the bare DBR, and the DBR coated with gold. Nlambda = 300 wavelength = np.linspace(300, 900, Nlambda) ar1 = np.zeros(Nlambda) ar2 = np.zeros(Nlambda) ar3 = np.zeros(Nlambda) s1 = dbr(600, 2.0,1.5, 10) for it in range(Nlambda): rp1, tp = multilayer(wavelength[it], 0.0, s1[0], s1[1], 'p') epsm = drude(wavelength[it], 1e16, 1e14, 1) s2 = tamm(600, 2.0, 1.5, 10, 40, epsm, 1.0, 1.5) rp2, tp = multilayer(wavelength[it], 0.0, s2[0], s2[1], 'p') # air/gold interface for reference epsilon = (1.0**2, epsm, 1.5**2) thickness = (1e3, 40, 1e3) rp3, tp = multilayer(wavelength[it], 0.0, epsilon, thickness, 'p') ar1[it] = rp1; ar2[it] = rp2;ar3[it] = rp3; plt.figure() plt.plot(wavelength, ar1, '--k') plt.plot(wavelength, ar2, '-k') plt.plot(wavelength, ar3, ':k') plt.show() Download this page as a Jupyter notebook or as a standalone Python script .","title":"Multilayer"},{"location":"phys415/multilayer/#matrix-formulation-of-fresnel-coefficients-for-multilayers","text":"import cmath import matplotlib.pyplot as plt import numpy as np import scipy as sp For a given incident angle and wavelength, we compute the wavevectors k_i k_i in all media the in-plane wavevector k_x k_x the k_z k_z components in all media From there we iterate over the number of interfaces and compute the matrix associated with each interface, and its product with the matrix from previous iterations. The multi-interface complex reflection and transmission coefficients are obtained from the elements M_{11} M_{11} and M_{21} M_{21} def multilayer(wavelength, theta, epsilon, thickness, polarisation): Nlay = len(epsilon) k0 = 2*np.pi/wavelength n1 = cmath.sqrt(epsilon[0]) k1 = n1 * k0 k_x = k1 * cmath.sin(theta) k = [cmath.sqrt(epsi)*k0 for epsi in epsilon] kz = [cmath.sqrt(ki**2 - k_x**2) for ki in k] ## calculate the transition matrix M M11 = M22 = 1.0 + 0j M21 = M12 = 0.0 + 0j Mi11 = Mi12 = Mi21 = Mi22 = 1 + 0j # empty 2x2 complex matrix M = np.zeros([2,2])+0j M_tmp = np.zeros([2,2])+0j for il in range(Nlay-1): if polarisation == 'p': Ki = (epsilon[il] / epsilon[il+1]) * (kz[il+1] / kz[il]) elif polarisation == 's': Ki = kz[il+1] / kz[il] phasei = np.exp(1j*thickness[il]*kz[il]) Mi11 = 0.5*(1+Ki) / phasei Mi21 = 0.5*(1-Ki) * phasei Mi12 = 0.5*(1-Ki) / phasei Mi22 = 0.5*(1+Ki) * phasei M_tmp[0,0] = 0.5*(1+Ki) / phasei M_tmp[1,0] = 0.5*(1-Ki) * phasei M_tmp[0,1] = 0.5*(1-Ki) / phasei M_tmp[1,1] = 0.5*(1+Ki) * phasei M = M * M_tmp M11new = M11*Mi11 + M12*Mi21 M21new = M21*Mi11 + M22*Mi21 M12new = M11*Mi12 + M12*Mi22 M22new = M21*Mi12 + M22*Mi22 M11 = M11new M12 = M12new M21 = M21new M22 = M22new t = 1 / M11 r = M21 * t R = abs(r)**2 T = 1 - R return(R, T)","title":"Matrix formulation of Fresnel coefficients for multilayers"},{"location":"phys415/multilayer/#boring-example-of-a-single-interface","text":"Check that we reproduce the results from single-interface Fresnel coefficients. epsilon = (1.5**2, 1.5**2, 1.0**2) thickness = (1e3, 50, 1e3) polarisation = 'p' theta = np.pi/4 wavelength=633.0 r, t = multilayer(wavelength, theta, epsilon, thickness, polarisation) Ntheta = 360 atheta = np.linspace(0.001, np.pi/2-0.001, Ntheta) arp = np.zeros(Ntheta) ars = np.zeros(Ntheta) atp = np.zeros(Ntheta) ats = np.zeros(Ntheta) for it in range(Ntheta): theta = atheta[it] rp, tp = multilayer(wavelength, theta, epsilon, thickness, 'p') rs, ts = multilayer(wavelength, theta, epsilon, thickness, 's') arp[it] = rp; ars[it] = rs; atp[it] = tp; ats[it] = ts; atheta_deg = atheta * 180/np.pi plt.figure() plt.plot(atheta_deg, arp, '-k') plt.plot(atheta_deg, ars,'--k') plt.show()","title":"Boring example of a single interface"},{"location":"phys415/multilayer/#distributed-bragg-reflector","text":"This is a multilayer where the optical thickness of each layer is \\lambda/4 \\lambda/4 , leading to constructive interference in the reflection coefficient around the central wavelength. We define a helper function to return arrays of epsilon and thickness for such structures. def dbr(lambda0, n1, n2, N): d1 = lambda0 / 4 / n1 d2 = lambda0 / 4 / n2 thickness = np.concatenate([[d1,d2] for _ in range(N)]) epsilon = np.concatenate([[n1**2,n2**2] for _ in range(N)]) return(epsilon, thickness) Nlambda = 200 wavelength = np.linspace(300, 900, Nlambda) ar1 = np.zeros(Nlambda) s1 = dbr(600, 2.0,1.5, 10) for it in range(Nlambda): rp1, tp = multilayer(wavelength[it], 0.0, s1[0], s1[1], 'p') ar1[it] = rp1 plt.figure() plt.plot(wavelength, ar1) plt.show()","title":"Distributed Bragg Reflector"},{"location":"phys415/multilayer/#drude-model-for-the-dielectric-function-of-metals","text":"Our next structure adds a gold layer on top of the DBR; because gold is very dispersive in the visible (it is yellow, for one thing), we need a wavelength-dependent dielectric function, defined below. # this is approximately like gold in the red-near-IR part of the spectrum def drude(wavelength, omega_p, gamma_p, epsilon_inf): omega = 2*np.pi*1e9 * 2.99792458e8 / wavelength epsilon = epsilon_inf - omega_p**2 / (omega**2 + 1j * omega * gamma_p) return(epsilon) import math import matplotlib.pyplot as plt Nlambda = 200 wavelength = np.linspace(400, 800, Nlambda) e = [drude(l, 1e16, 1e14, 1) for l in wavelength] plt.figure() plt.plot(wavelength, np.real(e), '-k') plt.plot(wavelength, np.imag(e), '-k') plt.show()","title":"Drude model for the dielectric function of metals"},{"location":"phys415/multilayer/#tamm-plasmon-structure","text":"Let's see what happens to the reflectivity of our DBR when we add a thin gold film on top. A mirror on top of a mirror, essentially. This structure supports optical modes called Tamm plasmons. def tamm(lambda0, n1, n2, N, dm, epsm, nleft, nright): s1 = dbr(lambda0, n1, n2, N) epsilon = np.append(epsm, s1[0]) epsilon = np.append(nleft**2, epsilon) epsilon = np.append(epsilon, nright**2) thickness = np.append(dm, s1[1]) thickness = np.append(100, thickness) return(epsilon, thickness) We now compare the results for the bare DBR, and the DBR coated with gold. Nlambda = 300 wavelength = np.linspace(300, 900, Nlambda) ar1 = np.zeros(Nlambda) ar2 = np.zeros(Nlambda) ar3 = np.zeros(Nlambda) s1 = dbr(600, 2.0,1.5, 10) for it in range(Nlambda): rp1, tp = multilayer(wavelength[it], 0.0, s1[0], s1[1], 'p') epsm = drude(wavelength[it], 1e16, 1e14, 1) s2 = tamm(600, 2.0, 1.5, 10, 40, epsm, 1.0, 1.5) rp2, tp = multilayer(wavelength[it], 0.0, s2[0], s2[1], 'p') # air/gold interface for reference epsilon = (1.0**2, epsm, 1.5**2) thickness = (1e3, 40, 1e3) rp3, tp = multilayer(wavelength[it], 0.0, epsilon, thickness, 'p') ar1[it] = rp1; ar2[it] = rp2;ar3[it] = rp3; plt.figure() plt.plot(wavelength, ar1, '--k') plt.plot(wavelength, ar2, '-k') plt.plot(wavelength, ar3, ':k') plt.show() Download this page as a Jupyter notebook or as a standalone Python script .","title":"Tamm plasmon structure"},{"location":"phys415/poynting/","text":"Relaxation method to solve the Laplace equation in 2D import scipy as sp import numpy as np import matplotlib.pyplot as plt import matplotlib.cm as cm Rectangular grid We'll calculate the potential on a N_x\\times N_y N_x\\times N_y grid of (x,y) (x,y) values. Nx = 50 Ny = 50 xv = np.linspace(0, 50, Nx) yv = np.linspace(0, 10, Ny) x, y = np.meshgrid(xv, yv) Boundary conditions ## initialise our matrix of potential V with random values V = np.random.rand(Ny+1, Nx+1) ## set boundary conditions Vmax = -1.0 V[0,:] = 0.0 V[Ny,:] = 0.0 V[:-1,0] = Vmax*np.sin(3*np.pi*yv/max(yv)) V[:,Nx] = 0 Vini = V.copy() Iterations relaxation method: iteratively replace value at point by average of 4 neighbours Niter = 5000 Vlist = list() # collect all iterations Vlist.append(V.copy()) # note: make an explicit copy, otherwise we'll get the same object for it in range(1, Niter): Vtmp = V for ix in range(1, Nx): for iy in range(1, Ny): V[iy,ix] = 0.25*(Vlist[it-1][iy+1,ix] + Vlist[it-1][iy-1,ix] + Vlist[it-1][iy,ix+1] + Vlist[it-1][iy,ix-1]) Vlist.append(V.copy()) # save current iteration Plotting fig = plt.figure() ax1 = fig.add_subplot(121) ax1.imshow(Vini, interpolation='nearest', cmap=cm.Greys_r) ax2 = fig.add_subplot(122) ax2.imshow(Vlist[-1], interpolation='nearest', cmap=cm.Greys_r) plt.show() import plotly.graph_objects as go fig = go.Figure(data=[go.Surface(z=Vlist[-1], colorscale='PrGN')]) fig.update_layout(title='Relaxed solution', autosize=False, width=800, height=800, margin=dict(l=65, r=50, b=100, t=90), scene = { 'camera_eye': {\"x\": -1, \"y\": -1, \"z\": 0.5}, \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 0.8} }) fig.show(renderer='png') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Poynting"},{"location":"phys415/poynting/#relaxation-method-to-solve-the-laplace-equation-in-2d","text":"import scipy as sp import numpy as np import matplotlib.pyplot as plt import matplotlib.cm as cm","title":"Relaxation method to solve the Laplace equation in 2D"},{"location":"phys415/poynting/#rectangular-grid","text":"We'll calculate the potential on a N_x\\times N_y N_x\\times N_y grid of (x,y) (x,y) values. Nx = 50 Ny = 50 xv = np.linspace(0, 50, Nx) yv = np.linspace(0, 10, Ny) x, y = np.meshgrid(xv, yv)","title":"Rectangular grid"},{"location":"phys415/poynting/#boundary-conditions","text":"## initialise our matrix of potential V with random values V = np.random.rand(Ny+1, Nx+1) ## set boundary conditions Vmax = -1.0 V[0,:] = 0.0 V[Ny,:] = 0.0 V[:-1,0] = Vmax*np.sin(3*np.pi*yv/max(yv)) V[:,Nx] = 0 Vini = V.copy()","title":"Boundary conditions"},{"location":"phys415/poynting/#iterations","text":"relaxation method: iteratively replace value at point by average of 4 neighbours Niter = 5000 Vlist = list() # collect all iterations Vlist.append(V.copy()) # note: make an explicit copy, otherwise we'll get the same object for it in range(1, Niter): Vtmp = V for ix in range(1, Nx): for iy in range(1, Ny): V[iy,ix] = 0.25*(Vlist[it-1][iy+1,ix] + Vlist[it-1][iy-1,ix] + Vlist[it-1][iy,ix+1] + Vlist[it-1][iy,ix-1]) Vlist.append(V.copy()) # save current iteration","title":"Iterations"},{"location":"phys415/poynting/#plotting","text":"fig = plt.figure() ax1 = fig.add_subplot(121) ax1.imshow(Vini, interpolation='nearest', cmap=cm.Greys_r) ax2 = fig.add_subplot(122) ax2.imshow(Vlist[-1], interpolation='nearest', cmap=cm.Greys_r) plt.show() import plotly.graph_objects as go fig = go.Figure(data=[go.Surface(z=Vlist[-1], colorscale='PrGN')]) fig.update_layout(title='Relaxed solution', autosize=False, width=800, height=800, margin=dict(l=65, r=50, b=100, t=90), scene = { 'camera_eye': {\"x\": -1, \"y\": -1, \"z\": 0.5}, \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 0.8} }) fig.show(renderer='png') Download this page as a Jupyter notebook or as a standalone Python script .","title":"Plotting"},{"location":"phys417/GIS/","text":"Numerical integration of the hydrostatic equilibrium equations for an isothermal sphere. Required dependencies We load numpy , scipy.integrate.solve_bvp to solve a boundary value problem for our system of ODEs, and matplotlib for plotting the solutions. import numpy as np from scipy.integrate import solve_bvp from matplotlib import pyplot System of equations Starting from our equation \\frac{1}{\\xi^2}\\frac{\\mathrm{d}}{\\mathrm{d}{\\xi}}\\xi^2 \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = e^{-\\psi} \\frac{1}{\\xi^2}\\frac{\\mathrm{d}}{\\mathrm{d}{\\xi}}\\xi^2 \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = e^{-\\psi} we apply the chain rule to obtain \\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}}+ \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = e^{-\\psi} \\Rightarrow \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = -\\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} + e^{-\\psi} \\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}}+ \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = e^{-\\psi} \\Rightarrow \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = -\\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} + e^{-\\psi} . This allows us to express the system of equations in the way the boundary value solver needs, i.e. y_1' = y_2 y_1' = y_2 y_2' = -\\frac{2}{x} y_2 + e^{-y_1} y_2' = -\\frac{2}{x} y_2 + e^{-y_1} where y_1 = \\psi y_1 = \\psi ; y_2 = y_1' = \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} y_2 = y_1' = \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} ; y_2' = \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} y_2' = \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} . Now implementing the differential functions. Here y y is an array of the two functions [y_1, y_2] [y_1, y_2] and the function returns the two derivatives, [y_1',y_2'] [y_1',y_2'] . def GIS(x, y): return np.vstack((y[1], -2./x*y[1]+np.exp(-y[0]))) Boundary conditions Now we also need to implement the boundary condtions. At \\xi = x = 0 \\xi = x = 0 , we have that \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = y_2 = y_1' = 0 \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = y_2 = y_1' = 0 and also \\psi = y_1 = 0 \\psi = y_1 = 0 . We implement these as a function to minimize (so if the condition was something other than 0 you would return the function - - the required value). ya is the LHS boundary condition, and yb is the RHS boundary condition, which in our case isn't supplied. def bc(ya, yb): return np.array([ya[0], ya[1]]) Defining the solution grid We need to specify the x = \\xi x = \\xi values we want to solve on. x=0 x=0 is problematic because of the factor of 2/x 2/x so we just make the first value something very small. We also need a solution vector of corresponding size. x=np.linspace(0, 6, 10) x[0]=1e-10 # Solution vector y = np.zeros((2, x.size)) Run the solver Call the solve_bvp function to solve the system of ODEs, and check it converged. Status=0 means success. res = solve_bvp(GIS, bc, x, y) print(res.status) 0 Plot the solutions Define new grids for evaluating the solutions and plot. x_plot = np.linspace(0, 6, 100) y_plot = res.sol(x_plot) pyplot.plot(x_plot, y_plot[0,:], 'k--', label=r'$\\psi$') pyplot.plot(x_plot, np.exp(-y_plot[0,:]), 'k', label=r'$\\rho/\\rho_k$') pyplot.legend(loc='best') pyplot.xlabel(r'Dimensionless radius $\\xi$') pyplot.gca().set_xticks([0,2,4,6]) pyplot.gca().set_yticks([0, 1, 2]) pyplot.show() Calculate and plot mass Use the solutions to also calculate the dimensionless mass, m=p_0^{1/2} G^{3/2} M_0/ a_T^4 m=p_0^{1/2} G^{3/2} M_0/ a_T^4 as a function of the density contrast \\rho/\\rho_k = e^{-\\psi} \\rho/\\rho_k = e^{-\\psi} . # Define initial mesh x=np.linspace(0, 100, 100) # Can't handle x=0 because of the infinity so just make it really small x[0]=1e-10 # Solution vector y = np.zeros((2, x.size)) # Run the solver res = solve_bvp(GIS, bc, x, y) x_plot = np.linspace(0, 100, 500) y_plot = res.sol(x_plot) psi=y_plot[0,:] xi=x_plot rho_rat=np.exp(-psi) dpsi_dxi=y_plot[1,:] m=1./2/np.sqrt(np.pi)*np.sqrt(rho_rat)*xi**2*dpsi_dxi pyplot.plot(np.log10(1./rho_rat), m, 'k') pyplot.xlabel(r'Density contrast $\\log_{10}(\\rho_k/\\rho_0)$', labelpad=10) pyplot.ylabel(r'Dimensionless mass $m$') pyplot.gca().set_xticks(np.arange(4.1)) pyplot.gca().set_yticks(np.arange(0,1.5,0.5)) [<matplotlib.axis.YTick at 0x7f7781f6dd30>, <matplotlib.axis.YTick at 0x7f7781f6d710>, <matplotlib.axis.YTick at 0x7f7781f5ceb8>] Download this page as a Jupyter notebook or as a standalone Python script .","title":"GIS"},{"location":"phys417/GIS/#required-dependencies","text":"We load numpy , scipy.integrate.solve_bvp to solve a boundary value problem for our system of ODEs, and matplotlib for plotting the solutions. import numpy as np from scipy.integrate import solve_bvp from matplotlib import pyplot","title":"Required dependencies"},{"location":"phys417/GIS/#system-of-equations","text":"Starting from our equation \\frac{1}{\\xi^2}\\frac{\\mathrm{d}}{\\mathrm{d}{\\xi}}\\xi^2 \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = e^{-\\psi} \\frac{1}{\\xi^2}\\frac{\\mathrm{d}}{\\mathrm{d}{\\xi}}\\xi^2 \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = e^{-\\psi} we apply the chain rule to obtain \\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}}+ \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = e^{-\\psi} \\Rightarrow \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = -\\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} + e^{-\\psi} \\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}}+ \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = e^{-\\psi} \\Rightarrow \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} = -\\frac{2}{\\xi}\\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} + e^{-\\psi} . This allows us to express the system of equations in the way the boundary value solver needs, i.e. y_1' = y_2 y_1' = y_2 y_2' = -\\frac{2}{x} y_2 + e^{-y_1} y_2' = -\\frac{2}{x} y_2 + e^{-y_1} where y_1 = \\psi y_1 = \\psi ; y_2 = y_1' = \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} y_2 = y_1' = \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} ; y_2' = \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} y_2' = \\frac{\\mathrm{d}^2\\psi}{\\mathrm{d}{\\xi^2}} . Now implementing the differential functions. Here y y is an array of the two functions [y_1, y_2] [y_1, y_2] and the function returns the two derivatives, [y_1',y_2'] [y_1',y_2'] . def GIS(x, y): return np.vstack((y[1], -2./x*y[1]+np.exp(-y[0])))","title":"System of equations"},{"location":"phys417/GIS/#boundary-conditions","text":"Now we also need to implement the boundary condtions. At \\xi = x = 0 \\xi = x = 0 , we have that \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = y_2 = y_1' = 0 \\frac{\\mathrm{d}\\psi}{\\mathrm{d}{\\xi}} = y_2 = y_1' = 0 and also \\psi = y_1 = 0 \\psi = y_1 = 0 . We implement these as a function to minimize (so if the condition was something other than 0 you would return the function - - the required value). ya is the LHS boundary condition, and yb is the RHS boundary condition, which in our case isn't supplied. def bc(ya, yb): return np.array([ya[0], ya[1]])","title":"Boundary conditions"},{"location":"phys417/GIS/#defining-the-solution-grid","text":"We need to specify the x = \\xi x = \\xi values we want to solve on. x=0 x=0 is problematic because of the factor of 2/x 2/x so we just make the first value something very small. We also need a solution vector of corresponding size. x=np.linspace(0, 6, 10) x[0]=1e-10 # Solution vector y = np.zeros((2, x.size))","title":"Defining the solution grid"},{"location":"phys417/GIS/#run-the-solver","text":"Call the solve_bvp function to solve the system of ODEs, and check it converged. Status=0 means success. res = solve_bvp(GIS, bc, x, y) print(res.status) 0","title":"Run the solver"},{"location":"phys417/GIS/#plot-the-solutions","text":"Define new grids for evaluating the solutions and plot. x_plot = np.linspace(0, 6, 100) y_plot = res.sol(x_plot) pyplot.plot(x_plot, y_plot[0,:], 'k--', label=r'$\\psi$') pyplot.plot(x_plot, np.exp(-y_plot[0,:]), 'k', label=r'$\\rho/\\rho_k$') pyplot.legend(loc='best') pyplot.xlabel(r'Dimensionless radius $\\xi$') pyplot.gca().set_xticks([0,2,4,6]) pyplot.gca().set_yticks([0, 1, 2]) pyplot.show()","title":"Plot the solutions"},{"location":"phys417/GIS/#calculate-and-plot-mass","text":"Use the solutions to also calculate the dimensionless mass, m=p_0^{1/2} G^{3/2} M_0/ a_T^4 m=p_0^{1/2} G^{3/2} M_0/ a_T^4 as a function of the density contrast \\rho/\\rho_k = e^{-\\psi} \\rho/\\rho_k = e^{-\\psi} . # Define initial mesh x=np.linspace(0, 100, 100) # Can't handle x=0 because of the infinity so just make it really small x[0]=1e-10 # Solution vector y = np.zeros((2, x.size)) # Run the solver res = solve_bvp(GIS, bc, x, y) x_plot = np.linspace(0, 100, 500) y_plot = res.sol(x_plot) psi=y_plot[0,:] xi=x_plot rho_rat=np.exp(-psi) dpsi_dxi=y_plot[1,:] m=1./2/np.sqrt(np.pi)*np.sqrt(rho_rat)*xi**2*dpsi_dxi pyplot.plot(np.log10(1./rho_rat), m, 'k') pyplot.xlabel(r'Density contrast $\\log_{10}(\\rho_k/\\rho_0)$', labelpad=10) pyplot.ylabel(r'Dimensionless mass $m$') pyplot.gca().set_xticks(np.arange(4.1)) pyplot.gca().set_yticks(np.arange(0,1.5,0.5)) [<matplotlib.axis.YTick at 0x7f7781f6dd30>, <matplotlib.axis.YTick at 0x7f7781f6d710>, <matplotlib.axis.YTick at 0x7f7781f5ceb8>] Download this page as a Jupyter notebook or as a standalone Python script .","title":"Calculate and plot mass"},{"location":"phys417/collapse/","text":"Numerical integration of the similarity equations for the collapse of an isothermal sphere. Required dependencies We load numpy , scipy.integrate.solve_ivp to solve an initial value problem for our system of ODEs, and matplotlib for plotting the solutions. import numpy as np from scipy.integrate import solve_ivp from matplotlib import pyplot System of equations We want to solve for \\alpha(x) \\alpha(x) , \\beta(x) \\beta(x) given: \\left [ (x-\\beta)^2-1 \\right] \\frac{1}{\\alpha} \\frac{\\partial \\alpha}{\\partial x} = \\left[ \\alpha - \\frac{2}{x} (x-\\beta) \\right] (x-\\beta) \\left [ (x-\\beta)^2-1 \\right] \\frac{1}{\\alpha} \\frac{\\partial \\alpha}{\\partial x} = \\left[ \\alpha - \\frac{2}{x} (x-\\beta) \\right] (x-\\beta) \\left [ (x-\\beta)^2 -1 \\right] \\frac{\\partial \\beta}{\\partial x} = \\left[ \\alpha (x-\\beta) - \\frac{2}{x} \\right] (x-\\beta) \\left [ (x-\\beta)^2 -1 \\right] \\frac{\\partial \\beta}{\\partial x} = \\left[ \\alpha (x-\\beta) - \\frac{2}{x} \\right] (x-\\beta) Let \\alpha = y_1 \\alpha = y_1 , \\beta = y_2 \\beta = y_2 . Then we have y_1'=\\frac{y_1}{[(x-y_2)^2-1]}[y_1-\\frac{2}{x}(x-y_2)](x-y_2) y_1'=\\frac{y_1}{[(x-y_2)^2-1]}[y_1-\\frac{2}{x}(x-y_2)](x-y_2) y2'=\\frac{1}{[(x-y_2)^2-1]}[y_1(x-y_2)-\\frac{2}{x}](x-y_2) y2'=\\frac{1}{[(x-y_2)^2-1]}[y_1(x-y_2)-\\frac{2}{x}](x-y_2) Now implementing the differential functions. Here y y is an array of the two functions [y_1, y_2] [y_1, y_2] and the function returns the two derivatives, [y_1',y_2'] [y_1',y_2'] . def collapse(x, y): xmb=x-y[1] y1p=y[0]/(xmb**2-1)*(y[0]-2./x*xmb)*xmb y2p=1./(xmb**2-1)*(y[0]*xmb-2./x)*xmb return np.vstack((y1p, y2p)) Initial conditions Set up the initial conditions. From Shu 1977 (SELF-SIMILAR COLLAPSE OF ISOTHERMAL SPHERES AND STAR FORMATION), at large x x the solutions should asymptote to \\alpha=A/x^2 \\alpha=A/x^2 , \\beta=-(A-2)/x \\beta=-(A-2)/x , m=Ax m=Ax for A>2 A>2 . A=2.2 x0=10. a0=A/x0**2 b0=-(A-2)/x0 Run the solver Call the solve_ivp function to solve the system of ODEs, and check it converged. Give it the interval over which to solve (running backwards, from large x x to small); initial values; and (optionally) the times to store the solution at in t_eval. Status=0 means success. res=solve_ivp(collapse, (x0, 0.01), [a0, b0], vectorized=True, method='RK45', t_eval=np.logspace(-2, np.log10(x0), 200)[::-1]) print(res.status) 0 Plot the solutions \\alpha \\alpha and \\beta \\beta have already been evaluated on the grid requested and are stored in res . Also calculate m = x^2 \\alpha (x - \\beta) m = x^2 \\alpha (x - \\beta) . For comparison also plot the isothermal sphere solutions at large x x and asymptotic solutions at small x x . # Overall solutions from solver x_plot=res.t[::-1] alpha_plot=res.y[0][::-1] beta_plot=res.y[1][::-1] m_plot=x_plot**2*alpha_plot*(x_plot-beta_plot) # Isothermal sphere solutions x_iso=np.logspace(0.2, np.log10(np.max(x_plot)), 100) alpha_iso=2/x_iso**2 m_iso=2*x_iso # Small-x asymptotic solutions m0=np.min(m_plot) x_sm=np.logspace(np.log10(np.min(x_plot)), np.log10(0.3), 100) beta_sm=-np.sqrt(2*m0/x_sm) alpha_sm=np.sqrt(m0/2/x_sm**3) pyplot.plot(np.log10(x_plot), np.log10(alpha_plot), 'k') pyplot.plot(np.log10(x_iso), np.log10(alpha_iso), 'k--') pyplot.plot(np.log10(x_sm), np.log10(alpha_sm), 'k:') pyplot.xlabel(r'$\\log_{10}(x)$') pyplot.ylabel(r'$\\log_{10}(\\alpha)$') pyplot.gca().set_xticks(np.arange(-2, 1.1, 1)) pyplot.show() pyplot.figure() pyplot.plot(np.log10(x_plot), np.log10(-beta_plot), 'k') pyplot.plot(np.log10(x_sm), np.log10(-beta_sm), 'k:') pyplot.xlabel(r'$\\log_{10}(x)$') pyplot.ylabel(r'$\\log_{10}(-\\beta)$') pyplot.gca().set_xticks(np.arange(-2, 1.1, 1)) pyplot.gca().set_yticks(np.arange(-2, 2.1, 1)) pyplot.show() pyplot.figure() pyplot.plot(np.log10(x_plot), np.log10(m_plot), 'k') pyplot.plot(np.log10(x_iso), np.log10(m_iso), 'k--') pyplot.plot(np.log10(x_sm), np.log10(m0)*np.ones_like(x_sm), 'k:') pyplot.xlabel(r'$\\log_{10}(x)$') pyplot.ylabel(r'$\\log_{10}(m)$') pyplot.gca().set_xticks(np.arange(-2, 1.1, 1)) pyplot.gca().set_yticks(np.arange(0, 2.1, 0.5)) pyplot.show() Download this page as a Jupyter notebook or as a standalone Python script .","title":"Collapse"},{"location":"phys417/collapse/#required-dependencies","text":"We load numpy , scipy.integrate.solve_ivp to solve an initial value problem for our system of ODEs, and matplotlib for plotting the solutions. import numpy as np from scipy.integrate import solve_ivp from matplotlib import pyplot","title":"Required dependencies"},{"location":"phys417/collapse/#system-of-equations","text":"We want to solve for \\alpha(x) \\alpha(x) , \\beta(x) \\beta(x) given: \\left [ (x-\\beta)^2-1 \\right] \\frac{1}{\\alpha} \\frac{\\partial \\alpha}{\\partial x} = \\left[ \\alpha - \\frac{2}{x} (x-\\beta) \\right] (x-\\beta) \\left [ (x-\\beta)^2-1 \\right] \\frac{1}{\\alpha} \\frac{\\partial \\alpha}{\\partial x} = \\left[ \\alpha - \\frac{2}{x} (x-\\beta) \\right] (x-\\beta) \\left [ (x-\\beta)^2 -1 \\right] \\frac{\\partial \\beta}{\\partial x} = \\left[ \\alpha (x-\\beta) - \\frac{2}{x} \\right] (x-\\beta) \\left [ (x-\\beta)^2 -1 \\right] \\frac{\\partial \\beta}{\\partial x} = \\left[ \\alpha (x-\\beta) - \\frac{2}{x} \\right] (x-\\beta) Let \\alpha = y_1 \\alpha = y_1 , \\beta = y_2 \\beta = y_2 . Then we have y_1'=\\frac{y_1}{[(x-y_2)^2-1]}[y_1-\\frac{2}{x}(x-y_2)](x-y_2) y_1'=\\frac{y_1}{[(x-y_2)^2-1]}[y_1-\\frac{2}{x}(x-y_2)](x-y_2) y2'=\\frac{1}{[(x-y_2)^2-1]}[y_1(x-y_2)-\\frac{2}{x}](x-y_2) y2'=\\frac{1}{[(x-y_2)^2-1]}[y_1(x-y_2)-\\frac{2}{x}](x-y_2) Now implementing the differential functions. Here y y is an array of the two functions [y_1, y_2] [y_1, y_2] and the function returns the two derivatives, [y_1',y_2'] [y_1',y_2'] . def collapse(x, y): xmb=x-y[1] y1p=y[0]/(xmb**2-1)*(y[0]-2./x*xmb)*xmb y2p=1./(xmb**2-1)*(y[0]*xmb-2./x)*xmb return np.vstack((y1p, y2p))","title":"System of equations"},{"location":"phys417/collapse/#initial-conditions","text":"Set up the initial conditions. From Shu 1977 (SELF-SIMILAR COLLAPSE OF ISOTHERMAL SPHERES AND STAR FORMATION), at large x x the solutions should asymptote to \\alpha=A/x^2 \\alpha=A/x^2 , \\beta=-(A-2)/x \\beta=-(A-2)/x , m=Ax m=Ax for A>2 A>2 . A=2.2 x0=10. a0=A/x0**2 b0=-(A-2)/x0","title":"Initial conditions"},{"location":"phys417/collapse/#run-the-solver","text":"Call the solve_ivp function to solve the system of ODEs, and check it converged. Give it the interval over which to solve (running backwards, from large x x to small); initial values; and (optionally) the times to store the solution at in t_eval. Status=0 means success. res=solve_ivp(collapse, (x0, 0.01), [a0, b0], vectorized=True, method='RK45', t_eval=np.logspace(-2, np.log10(x0), 200)[::-1]) print(res.status) 0","title":"Run the solver"},{"location":"phys417/collapse/#plot-the-solutions","text":"\\alpha \\alpha and \\beta \\beta have already been evaluated on the grid requested and are stored in res . Also calculate m = x^2 \\alpha (x - \\beta) m = x^2 \\alpha (x - \\beta) . For comparison also plot the isothermal sphere solutions at large x x and asymptotic solutions at small x x . # Overall solutions from solver x_plot=res.t[::-1] alpha_plot=res.y[0][::-1] beta_plot=res.y[1][::-1] m_plot=x_plot**2*alpha_plot*(x_plot-beta_plot) # Isothermal sphere solutions x_iso=np.logspace(0.2, np.log10(np.max(x_plot)), 100) alpha_iso=2/x_iso**2 m_iso=2*x_iso # Small-x asymptotic solutions m0=np.min(m_plot) x_sm=np.logspace(np.log10(np.min(x_plot)), np.log10(0.3), 100) beta_sm=-np.sqrt(2*m0/x_sm) alpha_sm=np.sqrt(m0/2/x_sm**3) pyplot.plot(np.log10(x_plot), np.log10(alpha_plot), 'k') pyplot.plot(np.log10(x_iso), np.log10(alpha_iso), 'k--') pyplot.plot(np.log10(x_sm), np.log10(alpha_sm), 'k:') pyplot.xlabel(r'$\\log_{10}(x)$') pyplot.ylabel(r'$\\log_{10}(\\alpha)$') pyplot.gca().set_xticks(np.arange(-2, 1.1, 1)) pyplot.show() pyplot.figure() pyplot.plot(np.log10(x_plot), np.log10(-beta_plot), 'k') pyplot.plot(np.log10(x_sm), np.log10(-beta_sm), 'k:') pyplot.xlabel(r'$\\log_{10}(x)$') pyplot.ylabel(r'$\\log_{10}(-\\beta)$') pyplot.gca().set_xticks(np.arange(-2, 1.1, 1)) pyplot.gca().set_yticks(np.arange(-2, 2.1, 1)) pyplot.show() pyplot.figure() pyplot.plot(np.log10(x_plot), np.log10(m_plot), 'k') pyplot.plot(np.log10(x_iso), np.log10(m_iso), 'k--') pyplot.plot(np.log10(x_sm), np.log10(m0)*np.ones_like(x_sm), 'k:') pyplot.xlabel(r'$\\log_{10}(x)$') pyplot.ylabel(r'$\\log_{10}(m)$') pyplot.gca().set_xticks(np.arange(-2, 1.1, 1)) pyplot.gca().set_yticks(np.arange(0, 2.1, 0.5)) pyplot.show() Download this page as a Jupyter notebook or as a standalone Python script .","title":"Plot the solutions"},{"location":"plotting/basic/","text":"Basic plots import numpy as np import matplotlib.pyplot as plt Line plot Let's plot a few sine functions with different line types; we assign a label to each trace, which can be displayed in a legend. x = np.linspace(-np.pi,np.pi, 200) lts = ['-',':','--','-.','-'] for i in range(5): plt.plot(x, np.sin(i*x)+i,lts[i],label=\"{0}*x\".format(i)) plt.ylabel(\"y\") plt.xlabel(\"x\") plt.legend(ncol=1,bbox_to_anchor=(1.0,1), title='variable') plt.show() Scatter plot x = np.linspace(-np.pi,np.pi, 20) marker = [\".\" , \",\", \"o\", \"v\", \"^\"] for i in range(5): plt.scatter(x, np.sin(x)+i, c = 'brown', marker=marker[i], label=\"{0}*x\".format(i)) plt.ylabel(\"y\") plt.xlabel(\"x\") plt.legend(ncol=1,bbox_to_anchor=(1.0,1), title='variable') plt.show() Subplots To display multiple plots side-by-side, set up a subplot. Note the slightly different syntax for labels etc. fig,ax=plt.subplots(2,1,sharex='col') for i in range(5): ax[0].plot(x,np.sin(i*x)+i,lts[i],label=\"{0}*x\".format(i)) ax[1].plot(x,np.cos(i*x)+i,lts[i] ) ax[0].set_ylabel(\"sin\") ax[1].set_ylabel(\"cos\") ax[1].set_xlabel(\"x\") ax[0].legend(ncol=5,bbox_to_anchor=(0.1,1.02)) plt.show() Grammar of graphics with Pandas An alternative is to create plots following a grammar of graphics , such as implemented in plotly . Data should typically be prepared in long format Panda DataFrame s . import pandas as pd x = np.linspace(-np.pi,np.pi, 200) mat = [np.sin(i*x.T) + i for i in range(5)] # set column names to refer to them columns = ['a','b','c','d','e'] d = pd.DataFrame(dict(zip(columns, mat))) d['x'] = x d.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e x 0 0.0 1.000000 2.000000 3.000000 4.000000 -3.141593 1 0.0 0.968431 2.063106 2.905420 4.125960 -3.110019 2 0.0 0.936894 2.125960 2.811688 4.249913 -3.078445 3 0.0 0.905420 2.188312 2.719645 4.369885 -3.046871 4 0.0 0.874040 2.249913 2.630115 4.483966 -3.015297 Converting from this wide format to long format can be achieved with melt , m = pd.melt(d, id_vars='x') m.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x variable value 0 -3.141593 a 0.0 1 -3.110019 a 0.0 2 -3.078445 a 0.0 3 -3.046871 a 0.0 4 -3.015297 a 0.0 import plotly.express as px import plotly.graph_objects as go import plotly.io as pio pio.renderers # pio.renderers.default = \"browser\" fig = px.line(m, x='x', y='value', color='variable') fig.show(renderer='png') #fig = go.Figure() # Add scatter trace with medium sized markers #fig.add_trace( # go.Scatter(mode='lines', # x=m['x'], # y=m['value'])) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"3d7ba138-7085-41b5-89c9-7014ffbbfdc8\")) { Plotly.newPlot( '3d7ba138-7085-41b5-89c9-7014ffbbfdc8', [{\"mode\": \"lines\", \"type\": \"scatter\", \"x\": [-3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793], \"ye-05, 0.0007787305987243531, 0.002522353583661263, 0.005260283979343083, 0.008989792557207887, 0.013707161661997369, 0.019407688917595922, 0.026085691914462195, 0.03373451387397819, 0.04234653028407043, 0.051913156499490465, 0.062424856299174936, 0.07387115139215883, 0.08624063186256337, 0.09952096754324835, 0.1136989203067913, 0.12876035726154045, 0.14469026483958825, 0.16147276376262276, 0.17909112487073753, 0.19752778579842212, 0.21676436848110958, 0.2367816974748317, 0.2575598190707171, 0.2790780211852837, 0.30131485400669356, 0.3242481513763913, 0.34785505288481333, 0.3721120266591418, 0.3969948928203856, 0.4224788475864114, 0.44853848799689255, 0.47514783723553156, 0.5022803705243171, 0.5299090415639971, 0.558006309494421, 0.5865441663478659, 0.6154941649679891, 0.6448274473665715, 0.6745147734897885, 0.7045265503653301, 0.7348328616013213, 0.7654034972076312, 0.7962079837098478, 0.8272156145259006, 0.8583954805750486, 0.889716501088725, 0.9211474545925236, 0.9526570100284419, 0.9842137579863633, 1.0157862420136372, 1.047342989971558, 1.0788525454074764, 1.1102834989112749, 1.141604519424952, 1.1727843854740998, 1.2037920162901523, 1.2345965027923689, 1.2651671383986787, 1.2954734496346698, 1.325485226510212, 1.3551725526334284, 1.384505835032011, 1.4134558336521341, 1.441993690505579, 1.4700909584360033, 1.4977196294756832, 1.5248521627644684, 1.5514615120031074, 1.5775211524135886, 1.6030051071796145, 1.6278879733408584, 1.6521449471151866, 1.6757518486236087, 1.6986851459933066, 1.7209219788147163, 1.7424401809292833, 1.7632183025251682, 1.7832356315188904, 1.802472214201578, 1.8209088751292626, 1.8385272362373775, 1.8553097351604118, 1.8712396427384594, 1.886301079693209, 1.9004790324567518, 1.9137593681374367, 1.9261288486078412, 1.937575143700825, 1.9480868435005096, 1.9576534697159296, 1.966265486126022, 1.9739143080855377, 1.980592311082404, 1.9862928383380027, 1.991010207442792, 1.994739716020657, 1.9974776464163386, 1.9992212694012756, 1.9999688468941563, 1.999719633693478, 1.9984738782203788, 1.9962328222710068, 1.9929986997786697, 1.9887747345870026, 1.9835651372363698, 1.9773751007667073, 1.9702107955409862, 1.9620793630944628, 1.9529889090158394, 1.9429484948674371, 1.9319681291524347, 1.9200587573381744, 1.9072322509454813, 1.8935013957148743, 1.8788798788614605, 1.8633822754312233, 1.847024033772299, 1.8298214601357257, 1.8117917024210208, 1.7929527330827786, 1.7733233312153387, 1.7529230638333773, 1.7317722663670767, 1.709892022391333, 1.6873041426091842, 1.6640311431104315, 1.6400962229271072, 1.615523240908179, 1.5903366919365287, 1.564561682511918, 1.5382239057242888, 1.5113496156423267, 1.4839656011428384, 1.456099159207016, 1.4277780677102094, 1.3990305577323414, 1.3698852854165469, 1.3403713034041125, 1.310518031874169, 1.2803552292170142, 1.2499129623703087, 1.2192215768476913, 1.1883116664897175, 1.1572140429672508, 1.1259597050677173, 1.0945798077948452, 1.0631056313126737, 1.0315685497648102, 1.0000000000000002, 2.0000000000000004, 2.063105631312674, 2.1259597050677175, 2.1883116664897186, 2.249912962370309, 2.310518031874169, 2.369885285416547, 2.4277780677102094, 2.4839656011428395, 2.538223905724289, 2.5903366919365287, 2.640096222927107, 2.687304142609184, 2.731772266367077, 2.7733233312153396, 2.8117917024210213, 2.847024033772299, 2.8788798788614605, 2.9072322509454818, 2.931968129152435, 2.9529889090158394, 2.970210795540986, 2.98356513723637, 2.9929986997786697, 2.998473878220379, 2.9999688468941565, 2.9974776464163386, 2.991010207442792, 2.980592311082404, 2.966265486126022, 2.9480868435005094, 2.926128848607841, 2.9004790324567518, 2.8712396427384594, 2.8385272362373772, 2.8024722142015777, 2.763218302525168, 2.720921978814716, 2.6757518486236087, 2.627887973340858, 2.5775211524135884, 2.524852162764468, 2.470090958436003, 2.413455833652134, 2.3551725526334284, 2.29547344963467, 2.2345965027923684, 2.1727843854740994, 2.110283498911275, 2.047342989971558, 1.9842137579863628, 1.9211474545925233, 1.858395480575048, 1.7962079837098477, 1.7348328616013213, 1.674514773489788, 1.615494164967989, 1.558006309494421, 1.5022803705243166, 1.4485384879968923, 1.3969948928203855, 1.3478550528848132, 1.3013148540066934, 1.2575598190707167, 1.2167643684811096, 1.1790911248707374, 1.1446902648395882, 1.113698920306791, 1.0862406318625633, 1.062424856299175, 1.0423465302840704, 1.0260856919144623, 1.0137071616619973, 1.005260283979343, 1.0007787305987244, 1.000280366306522, 1.0037671777289932, 1.0112252654129974, 1.022624899233293, 1.0379206369055374, 1.0570515051325629, 1.0799412426618256, 1.1064986042851257, 1.136617724568777, 1.1701785398642746, 1.2070472669172214, 1.247076936166623, 1.290107977608667, 1.3359688568895685, 1.3844767590918212, 1.435438317488082, 1.4886503843576735, 1.543900840792984, 1.6009694422676588, 1.6596286965958875, 1.7196447707829858, 1.7807784231523087, 1.8427859570327492, 1.9054201922051548, 1.96843145023519, 2.031568549764811, 2.094579807794845, 2.157214042967251, 2.219221576847691, 2.280355229217015, 2.340371303404113, 2.399030557732341, 2.456099159207016, 2.5113496156423265, 2.564561682511918, 2.6155232409081797, 2.6640311431104315, 2.709892022391333, 2.752923063833377, 2.7929527330827786, 2.829821460135726, 2.8633822754312233, 2.8935013957148743, 2.9200587573381744, 2.942948494867437, 2.9620793630944626, 2.9773751007667073, 2.9887747345870026, 2.996232822271007, 2.999719633693478, 2.999221269401276, 2.994739716020657, 2.9862928383380027, 2.9739143080855377, 2.9576534697159294, 2.9375751437008253, 2.9137593681374367, 2.886301079693209, 2.8553097351604118, 2.820908875129262, 2.7832356315188904, 2.742440180929283, 2.698685145993307, 2.6521449471151866, 2.603005107179614, 2.5514615120031077, 2.4977196294756827, 2.4419936905055795, 2.3845058350320105, 2.3254852265102106, 2.2651671383986787, 2.2037920162901514, 2.141604519424952, 2.078852545407476, 2.015786242013638, 1.952657010028442, 1.8897165010887242, 1.8272156145259009, 1.765403497207631, 1.7045265503653306, 1.6448274473665716, 1.5865441663478652, 1.5299090415639973, 1.4751478372355313, 1.4224788475864119, 1.3721120266591416, 1.3242481513763906, 1.279078021185284, 1.2367816974748314, 1.1975277857984223, 1.1614727637626225, 1.1287603572615401, 1.0995209675432485, 1.0738711513921586, 1.0519131564994906, 1.033734513873978, 1.0194076889175956, 1.008989792557208, 1.0025223535836612, 1.0000311531058437, 1.0015261217796212, 1.0070013002213303, 1.0164348627636302, 1.0297892044590138, 1.0470110909841606, 1.0680318708475651, 1.0927677490545182, 1.1211201211385395, 1.1529759662277015, 1.188208297578979, 1.226676668784661, 1.2682277336329226, 1.3126958573908158, 1.3599037770728932, 1.4096633080634713, 1.4617760942757116, 1.5160343988571607, 1.5722219322897906, 1.630114714583454, 1.6894819681258308, 1.750087037629692, 1.8116883335102816, 1.8740402949322825, 1.9368943686873272, 1.9999999999999998, 2.9999999999999996, 2.9054201922051544, 2.8116883335102814, 2.7196447707829847, 2.6301147145834523, 2.5439008407929826, 2.4617760942757116, 2.3844767590918208, 2.312695857390814, 2.2470769361666227, 2.1882082975789787, 2.1366177245687763, 2.092767749054519, 2.0570515051325624, 2.0297892044590133, 2.0112252654129974, 2.001526121779621, 2.000778730598724, 2.008989792557208, 2.0260856919144623, 2.0519131564994906, 2.0862406318625637, 2.1287603572615406, 2.1790911248707374, 2.2367816974748314, 2.301314854006694, 2.3721120266591416, 2.4485384879968928, 2.5299090415639975, 2.615494164967989, 2.7045265503653306, 2.796207983709849, 2.889716501088725, 2.9842137579863626, 3.0788525454074764, 3.1727843854741002, 3.2651671383986787, 3.355172552633429, 3.4419936905055795, 3.524852162764469, 3.6030051071796145, 3.6757518486236087, 3.7424401809292833, 3.802472214201578, 3.8553097351604118, 3.9004790324567518, 3.9375751437008253, 3.966265486126022, 3.9862928383380027, 3.9974776464163386, 3.999719633693478, 3.9929986997786697, 3.9773751007667073, 3.9529889090158394, 3.9200587573381744, 3.8788798788614605, 3.8298214601357254, 3.773323331215339, 3.7098920223913323, 3.640096222927107, 3.564561682511918, 3.483965601142838, 3.399030557732341, 3.3105180318741683, 3.219221576847691, 3.1259597050677175, 3.0315685497648106, 2.9368943686873257, 2.8427859570327487, 2.7500870376296915, 2.6596286965958873, 2.5722219322897906, 2.4886503843576726, 2.409663308063471, 2.3359688568895685, 2.268227733632923, 2.2070472669172214, 2.152975966227701, 2.1064986042851257, 2.068031870847565, 2.037920636905537, 2.01643486276363, 2.003767177728993, 2.0000311531058435, 2.005260283979343, 2.019407688917596, 2.04234653028407, 2.073871151392159, 2.113698920306791, 2.1614727637626228, 2.21676436848111, 2.279078021185284, 2.3478550528848134, 2.422478847586411, 2.5022803705243177, 2.586544166347866, 2.6745147734897885, 2.765403497207631, 2.858395480575048, 2.952657010028443, 3.0473429899715585, 3.141604519424952, 3.234596502792369, 3.3254852265102115, 3.413455833652135, 3.4977196294756836, 3.577521152413589, 3.6521449471151866, 3.720921978814716, 3.78323563151889, 3.8385272362373777, 3.886301079693209, 3.926128848607841, 3.95765346971593, 3.980592311082404, 3.994739716020657, 3.9999688468941565, 3.996232822271007, 3.98356513723637, 3.962079363094463, 3.931968129152435, 3.893501395714874, 3.847024033772299, 3.7929527330827786, 3.731772266367077, 3.6640311431104315, 3.590336691936528, 3.5113496156423274, 3.4277780677102094, 3.340371303404112, 3.2499129623703085, 3.15721404296725, 3.0631056313126743, 2.9684314502351894, 2.874040294932281, 2.780778423152309, 2.6894819681258304, 2.60096944226766, 2.516034398857161, 2.4354383174880807, 2.359903777072893, 2.290107977608667, 2.2266766687846613, 2.170178539864274, 2.121120121138539, 2.0799412426618256, 2.0470110909841606, 2.0226248992332927, 2.0070013002213303, 2.000280366306522, 2.0025223535836614, 2.0137071616619977, 2.033734513873978, 2.062424856299175, 2.099520967543248, 2.1446902648395882, 2.197527785798423, 2.2575598190707167, 2.3242481513763917, 2.3969948928203846, 2.475147837235532, 2.558006309494422, 2.644827447366571, 2.7348328616013218, 2.8272156145258998, 2.9211474545925236, 3.0157862420136383, 3.110283498911275, 3.2037920162901528, 3.2954734496346694, 3.384505835032011, 3.4700909584360042, 3.5514615120031072, 3.627887973340859, 3.698685145993306, 3.7632183025251686, 3.8209088751292617, 3.8712396427384594, 3.913759368137437, 3.9480868435005094, 3.9739143080855377, 3.991010207442792, 3.999221269401276, 3.998473878220379, 3.9887747345870026, 3.970210795540986, 3.9429484948674376, 3.907232250945481, 3.863382275431223, 3.8117917024210213, 3.752923063833376, 3.687304142609186, 3.6155232409081792, 3.538223905724287, 3.4560991592070174, 3.3698852854165464, 3.2803552292170153, 3.1883116664897186, 3.094579807794844, 3.0000000000000004, 4.000000000000001, 4.125959705067718, 4.249912962370308, 4.369885285416548, 4.48396560114284, 4.590336691936529, 4.687304142609184, 4.773323331215339, 4.8470240337723, 4.907232250945482, 4.95298890901584, 4.98356513723637, 4.998473878220379, 4.997477646416339, 4.980592311082404, 4.948086843500509, 4.900479032456752, 4.838527236237377, 4.763218302525168, 4.675751848623609, 4.577521152413588, 4.4700909584360025, 4.355172552633428, 4.234596502792368, 4.110283498911276, 3.984213757986362, 3.8583954805750476, 3.734832861601321, 3.615494164967989, 3.5022803705243173, 3.3969948928203846, 3.301314854006693, 3.216764368481109, 3.1446902648395882, 3.0862406318625633, 3.04234653028407, 3.0137071616619973, 3.000778730598724, 3.003767177728993, 3.0226248992332927, 3.057051505132563, 3.106498604285126, 3.1701785398642746, 3.247076936166623, 3.3359688568895685, 3.4354383174880825, 3.5439008407929844, 3.6596286965958877, 3.780778423152309, 3.9054201922051552, 4.0315685497648115, 4.157214042967251, 4.280355229217015, 4.399030557732342, 4.5113496156423265, 4.61552324090818, 4.709892022391333, 4.792952733082778, 4.863382275431224, 4.920058757338174, 4.962079363094463, 4.988774734587002, 4.999719633693478, 4.994739716020657, 4.973914308085538, 4.937575143700825, 4.886301079693209, 4.820908875129262, 4.742440180929282, 4.652144947115186, 4.551461512003107, 4.441993690505579, 4.32548522651021, 4.203792016290151, 4.078852545407476, 3.952657010028442, 3.8272156145259006, 3.7045265503653306, 3.586544166347865, 3.4751478372355313, 3.372112026659141, 3.2790780211852835, 3.1975277857984223, 3.12876035726154, 3.0738711513921584, 3.033734513873978, 3.008989792557208, 3.0000311531058435, 3.0070013002213303, 3.029789204459014, 3.068031870847565, 3.1211201211385395, 3.188208297578979, 3.268227733632923, 3.3599037770728937, 3.461776094275712, 3.5722219322897906, 3.6894819681258313, 3.811688333510282, 3.9368943686873275, 4.063105631312674, 4.188311666489718, 4.310518031874169, 4.427778067710209, 4.53822390572429, 4.640096222927108, 4.731772266367077, 4.81179170242102, 4.8788798788614605, 4.931968129152435, 4.970210795540987, 4.99299869977867, 4.9999688468941565, 4.991010207442792, 4.966265486126022, 4.926128848607841, 4.871239642738459, 4.802472214201578, 4.720921978814716, 4.627887973340859, 4.524852162764469, 4.413455833652133, 4.295473449634669, 4.1727843854741, 4.0473429899715585, 3.921147454592524, 3.796207983709847, 3.6745147734897894, 3.5580063094944205, 3.448538487996891, 3.347855052884814, 3.2575598190707162, 3.1790911248707383, 3.113698920306791, 3.0624248562991743, 3.0260856919144623, 3.005260283979343, 3.000280366306522, 3.0112252654129974, 3.037920636905538, 3.0799412426618256, 3.136617724568777, 3.207047266917221, 3.2901079776086677, 3.3844767590918226, 3.4886503843576735, 3.6009694422676604, 3.7196447707829847, 3.84278595703275, 3.968431450235188, 4.094579807794845, 4.219221576847692, 4.340371303404112, 4.4560991592070165, 4.564561682511917, 4.6640311431104315, 4.752923063833378, 4.829821460135726, 4.893501395714875, 4.942948494867436, 4.977375100766707, 4.996232822271007, 4.999221269401276, 4.986292838338002, 4.95765346971593, 4.913759368137437, 4.855309735160411, 4.783235631518891, 4.698685145993306, 4.603005107179616, 4.497719629475683, 4.384505835032009, 4.265167138398679, 4.14160451942495, 4.015786242013638, 3.8897165010887247, 3.765403497207633, 3.6448274473665716, 3.5299090415639958, 3.422478847586412, 3.324248151376391, 3.2367816974748322, 3.1614727637626228, 3.099520967543248, 3.0519131564994906, 3.019407688917596, 3.0025223535836614, 3.001526121779621, 3.0164348627636306, 3.0470110909841606, 3.092767749054519, 3.1529759662277, 3.226676668784661, 3.3126958573908167, 3.4096633080634713, 3.516034398857162, 3.630114714583452, 3.750087037629692, 3.874040294932284, 3.9999999999999996]}], {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('3d7ba138-7085-41b5-89c9-7014ffbbfdc8'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); Download this page as a Jupyter notebook or as a standalone Python script .","title":"Basic"},{"location":"plotting/basic/#basic-plots","text":"import numpy as np import matplotlib.pyplot as plt","title":"Basic plots"},{"location":"plotting/basic/#line-plot","text":"Let's plot a few sine functions with different line types; we assign a label to each trace, which can be displayed in a legend. x = np.linspace(-np.pi,np.pi, 200) lts = ['-',':','--','-.','-'] for i in range(5): plt.plot(x, np.sin(i*x)+i,lts[i],label=\"{0}*x\".format(i)) plt.ylabel(\"y\") plt.xlabel(\"x\") plt.legend(ncol=1,bbox_to_anchor=(1.0,1), title='variable') plt.show()","title":"Line plot"},{"location":"plotting/basic/#scatter-plot","text":"x = np.linspace(-np.pi,np.pi, 20) marker = [\".\" , \",\", \"o\", \"v\", \"^\"] for i in range(5): plt.scatter(x, np.sin(x)+i, c = 'brown', marker=marker[i], label=\"{0}*x\".format(i)) plt.ylabel(\"y\") plt.xlabel(\"x\") plt.legend(ncol=1,bbox_to_anchor=(1.0,1), title='variable') plt.show()","title":"Scatter plot"},{"location":"plotting/basic/#subplots","text":"To display multiple plots side-by-side, set up a subplot. Note the slightly different syntax for labels etc. fig,ax=plt.subplots(2,1,sharex='col') for i in range(5): ax[0].plot(x,np.sin(i*x)+i,lts[i],label=\"{0}*x\".format(i)) ax[1].plot(x,np.cos(i*x)+i,lts[i] ) ax[0].set_ylabel(\"sin\") ax[1].set_ylabel(\"cos\") ax[1].set_xlabel(\"x\") ax[0].legend(ncol=5,bbox_to_anchor=(0.1,1.02)) plt.show()","title":"Subplots"},{"location":"plotting/basic/#grammar-of-graphics-with-pandas","text":"An alternative is to create plots following a grammar of graphics , such as implemented in plotly . Data should typically be prepared in long format Panda DataFrame s . import pandas as pd x = np.linspace(-np.pi,np.pi, 200) mat = [np.sin(i*x.T) + i for i in range(5)] # set column names to refer to them columns = ['a','b','c','d','e'] d = pd.DataFrame(dict(zip(columns, mat))) d['x'] = x d.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e x 0 0.0 1.000000 2.000000 3.000000 4.000000 -3.141593 1 0.0 0.968431 2.063106 2.905420 4.125960 -3.110019 2 0.0 0.936894 2.125960 2.811688 4.249913 -3.078445 3 0.0 0.905420 2.188312 2.719645 4.369885 -3.046871 4 0.0 0.874040 2.249913 2.630115 4.483966 -3.015297 Converting from this wide format to long format can be achieved with melt , m = pd.melt(d, id_vars='x') m.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x variable value 0 -3.141593 a 0.0 1 -3.110019 a 0.0 2 -3.078445 a 0.0 3 -3.046871 a 0.0 4 -3.015297 a 0.0 import plotly.express as px import plotly.graph_objects as go import plotly.io as pio pio.renderers # pio.renderers.default = \"browser\" fig = px.line(m, x='x', y='value', color='variable') fig.show(renderer='png') #fig = go.Figure() # Add scatter trace with medium sized markers #fig.add_trace( # go.Scatter(mode='lines', # x=m['x'], # y=m['value'])) require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"3d7ba138-7085-41b5-89c9-7014ffbbfdc8\")) { Plotly.newPlot( '3d7ba138-7085-41b5-89c9-7014ffbbfdc8', [{\"mode\": \"lines\", \"type\": \"scatter\", \"x\": [-3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793, -3.141592653589793, -3.110018858076328, -3.0784450625628628, -3.046871267049397, -3.015297471535932, -2.983723676022467, -2.9521498805090016, -2.9205760849955364, -2.889002289482071, -2.8574284939686057, -2.8258546984551405, -2.7942809029416753, -2.76270710742821, -2.7311333119147445, -2.6995595164012793, -2.667985720887814, -2.636411925374349, -2.604838129860884, -2.573264334347418, -2.5416905388339535, -2.510116743320488, -2.4785429478070227, -2.4469691522935575, -2.4153953567800923, -2.383821561266627, -2.3522477657531615, -2.3206739702396963, -2.289100174726231, -2.257526379212766, -2.225952583699301, -2.194378788185835, -2.16280499267237, -2.131231197158905, -2.0996574016454397, -2.0680836061319745, -2.036509810618509, -2.0049360151050437, -1.9733622195915785, -1.9417884240781134, -1.910214628564648, -1.8786408330511828, -1.8470670375377176, -1.8154932420242522, -1.783919446510787, -1.7523456509973219, -1.7207718554838565, -1.6891980599703913, -1.657624264456926, -1.6260504689434607, -1.5944766734299956, -1.5629028779165302, -1.531329082403065, -1.4997552868895996, -1.4681814913761344, -1.4366076958626692, -1.4050339003492038, -1.3734601048357387, -1.3418863093222735, -1.310312513808808, -1.278738718295343, -1.2471649227818777, -1.2155911272684123, -1.1840173317549472, -1.1524435362414818, -1.1208697407280166, -1.0892959452145514, -1.0577221497010862, -1.0261483541876206, -0.9945745586741555, -0.9630007631606903, -0.9314269676472251, -0.8998531721337599, -0.8682793766202943, -0.8367055811068291, -0.805131785593364, -0.7735579900798988, -0.7419841945664336, -0.7104103990529684, -0.6788366035395028, -0.6472628080260376, -0.6156890125125725, -0.5841152169991073, -0.5525414214856421, -0.5209676259721765, -0.4893938304587113, -0.45782003494524615, -0.42624623943178097, -0.3946724439183158, -0.3630986484048506, -0.331524852891385, -0.2999510573779198, -0.26837726186445465, -0.23680346635098948, -0.2052296708375243, -0.17365587532405868, -0.1420820798105935, -0.11050828429712833, -0.07893448878366316, -0.047360693270197984, -0.015786897756732365, 0.01578689775673281, 0.047360693270197984, 0.07893448878366316, 0.11050828429712833, 0.14208207981059395, 0.17365587532405913, 0.2052296708375243, 0.23680346635098948, 0.26837726186445465, 0.2999510573779198, 0.33152485289138545, 0.3630986484048506, 0.3946724439183158, 0.42624623943178097, 0.45782003494524615, 0.48939383045871176, 0.5209676259721769, 0.5525414214856421, 0.5841152169991073, 0.6156890125125725, 0.6472628080260376, 0.6788366035395033, 0.7104103990529684, 0.7419841945664336, 0.7735579900798988, 0.805131785593364, 0.8367055811068296, 0.8682793766202943, 0.8998531721337599, 0.9314269676472255, 0.9630007631606903, 0.9945745586741559, 1.0261483541876206, 1.0577221497010862, 1.0892959452145519, 1.1208697407280166, 1.1524435362414822, 1.184017331754947, 1.2155911272684126, 1.2471649227818782, 1.278738718295343, 1.3103125138088085, 1.3418863093222733, 1.3734601048357389, 1.4050339003492045, 1.4366076958626692, 1.4681814913761349, 1.4997552868895996, 1.5313290824030652, 1.56290287791653, 1.5944766734299956, 1.6260504689434612, 1.657624264456926, 1.6891980599703915, 1.7207718554838562, 1.7523456509973219, 1.7839194465107875, 1.8154932420242522, 1.8470670375377178, 1.8786408330511826, 1.9102146285646482, 1.9417884240781138, 1.9733622195915785, 2.004936015105044, 2.036509810618509, 2.0680836061319745, 2.09965740164544, 2.131231197158905, 2.1628049926723705, 2.194378788185835, 2.225952583699301, 2.2575263792127664, 2.289100174726231, 2.320673970239697, 2.3522477657531615, 2.383821561266627, 2.415395356780092, 2.4469691522935575, 2.478542947807023, 2.510116743320488, 2.5416905388339535, 2.573264334347418, 2.604838129860884, 2.6364119253743494, 2.667985720887814, 2.69955951640128, 2.7311333119147445, 2.76270710742821, 2.7942809029416757, 2.8258546984551405, 2.857428493968606, 2.889002289482071, 2.9205760849955364, 2.952149880509002, 2.983723676022467, 3.0152974715359324, 3.046871267049397, 3.0784450625628628, 3.1100188580763284, 3.141592653589793], \"ye-05, 0.0007787305987243531, 0.002522353583661263, 0.005260283979343083, 0.008989792557207887, 0.013707161661997369, 0.019407688917595922, 0.026085691914462195, 0.03373451387397819, 0.04234653028407043, 0.051913156499490465, 0.062424856299174936, 0.07387115139215883, 0.08624063186256337, 0.09952096754324835, 0.1136989203067913, 0.12876035726154045, 0.14469026483958825, 0.16147276376262276, 0.17909112487073753, 0.19752778579842212, 0.21676436848110958, 0.2367816974748317, 0.2575598190707171, 0.2790780211852837, 0.30131485400669356, 0.3242481513763913, 0.34785505288481333, 0.3721120266591418, 0.3969948928203856, 0.4224788475864114, 0.44853848799689255, 0.47514783723553156, 0.5022803705243171, 0.5299090415639971, 0.558006309494421, 0.5865441663478659, 0.6154941649679891, 0.6448274473665715, 0.6745147734897885, 0.7045265503653301, 0.7348328616013213, 0.7654034972076312, 0.7962079837098478, 0.8272156145259006, 0.8583954805750486, 0.889716501088725, 0.9211474545925236, 0.9526570100284419, 0.9842137579863633, 1.0157862420136372, 1.047342989971558, 1.0788525454074764, 1.1102834989112749, 1.141604519424952, 1.1727843854740998, 1.2037920162901523, 1.2345965027923689, 1.2651671383986787, 1.2954734496346698, 1.325485226510212, 1.3551725526334284, 1.384505835032011, 1.4134558336521341, 1.441993690505579, 1.4700909584360033, 1.4977196294756832, 1.5248521627644684, 1.5514615120031074, 1.5775211524135886, 1.6030051071796145, 1.6278879733408584, 1.6521449471151866, 1.6757518486236087, 1.6986851459933066, 1.7209219788147163, 1.7424401809292833, 1.7632183025251682, 1.7832356315188904, 1.802472214201578, 1.8209088751292626, 1.8385272362373775, 1.8553097351604118, 1.8712396427384594, 1.886301079693209, 1.9004790324567518, 1.9137593681374367, 1.9261288486078412, 1.937575143700825, 1.9480868435005096, 1.9576534697159296, 1.966265486126022, 1.9739143080855377, 1.980592311082404, 1.9862928383380027, 1.991010207442792, 1.994739716020657, 1.9974776464163386, 1.9992212694012756, 1.9999688468941563, 1.999719633693478, 1.9984738782203788, 1.9962328222710068, 1.9929986997786697, 1.9887747345870026, 1.9835651372363698, 1.9773751007667073, 1.9702107955409862, 1.9620793630944628, 1.9529889090158394, 1.9429484948674371, 1.9319681291524347, 1.9200587573381744, 1.9072322509454813, 1.8935013957148743, 1.8788798788614605, 1.8633822754312233, 1.847024033772299, 1.8298214601357257, 1.8117917024210208, 1.7929527330827786, 1.7733233312153387, 1.7529230638333773, 1.7317722663670767, 1.709892022391333, 1.6873041426091842, 1.6640311431104315, 1.6400962229271072, 1.615523240908179, 1.5903366919365287, 1.564561682511918, 1.5382239057242888, 1.5113496156423267, 1.4839656011428384, 1.456099159207016, 1.4277780677102094, 1.3990305577323414, 1.3698852854165469, 1.3403713034041125, 1.310518031874169, 1.2803552292170142, 1.2499129623703087, 1.2192215768476913, 1.1883116664897175, 1.1572140429672508, 1.1259597050677173, 1.0945798077948452, 1.0631056313126737, 1.0315685497648102, 1.0000000000000002, 2.0000000000000004, 2.063105631312674, 2.1259597050677175, 2.1883116664897186, 2.249912962370309, 2.310518031874169, 2.369885285416547, 2.4277780677102094, 2.4839656011428395, 2.538223905724289, 2.5903366919365287, 2.640096222927107, 2.687304142609184, 2.731772266367077, 2.7733233312153396, 2.8117917024210213, 2.847024033772299, 2.8788798788614605, 2.9072322509454818, 2.931968129152435, 2.9529889090158394, 2.970210795540986, 2.98356513723637, 2.9929986997786697, 2.998473878220379, 2.9999688468941565, 2.9974776464163386, 2.991010207442792, 2.980592311082404, 2.966265486126022, 2.9480868435005094, 2.926128848607841, 2.9004790324567518, 2.8712396427384594, 2.8385272362373772, 2.8024722142015777, 2.763218302525168, 2.720921978814716, 2.6757518486236087, 2.627887973340858, 2.5775211524135884, 2.524852162764468, 2.470090958436003, 2.413455833652134, 2.3551725526334284, 2.29547344963467, 2.2345965027923684, 2.1727843854740994, 2.110283498911275, 2.047342989971558, 1.9842137579863628, 1.9211474545925233, 1.858395480575048, 1.7962079837098477, 1.7348328616013213, 1.674514773489788, 1.615494164967989, 1.558006309494421, 1.5022803705243166, 1.4485384879968923, 1.3969948928203855, 1.3478550528848132, 1.3013148540066934, 1.2575598190707167, 1.2167643684811096, 1.1790911248707374, 1.1446902648395882, 1.113698920306791, 1.0862406318625633, 1.062424856299175, 1.0423465302840704, 1.0260856919144623, 1.0137071616619973, 1.005260283979343, 1.0007787305987244, 1.000280366306522, 1.0037671777289932, 1.0112252654129974, 1.022624899233293, 1.0379206369055374, 1.0570515051325629, 1.0799412426618256, 1.1064986042851257, 1.136617724568777, 1.1701785398642746, 1.2070472669172214, 1.247076936166623, 1.290107977608667, 1.3359688568895685, 1.3844767590918212, 1.435438317488082, 1.4886503843576735, 1.543900840792984, 1.6009694422676588, 1.6596286965958875, 1.7196447707829858, 1.7807784231523087, 1.8427859570327492, 1.9054201922051548, 1.96843145023519, 2.031568549764811, 2.094579807794845, 2.157214042967251, 2.219221576847691, 2.280355229217015, 2.340371303404113, 2.399030557732341, 2.456099159207016, 2.5113496156423265, 2.564561682511918, 2.6155232409081797, 2.6640311431104315, 2.709892022391333, 2.752923063833377, 2.7929527330827786, 2.829821460135726, 2.8633822754312233, 2.8935013957148743, 2.9200587573381744, 2.942948494867437, 2.9620793630944626, 2.9773751007667073, 2.9887747345870026, 2.996232822271007, 2.999719633693478, 2.999221269401276, 2.994739716020657, 2.9862928383380027, 2.9739143080855377, 2.9576534697159294, 2.9375751437008253, 2.9137593681374367, 2.886301079693209, 2.8553097351604118, 2.820908875129262, 2.7832356315188904, 2.742440180929283, 2.698685145993307, 2.6521449471151866, 2.603005107179614, 2.5514615120031077, 2.4977196294756827, 2.4419936905055795, 2.3845058350320105, 2.3254852265102106, 2.2651671383986787, 2.2037920162901514, 2.141604519424952, 2.078852545407476, 2.015786242013638, 1.952657010028442, 1.8897165010887242, 1.8272156145259009, 1.765403497207631, 1.7045265503653306, 1.6448274473665716, 1.5865441663478652, 1.5299090415639973, 1.4751478372355313, 1.4224788475864119, 1.3721120266591416, 1.3242481513763906, 1.279078021185284, 1.2367816974748314, 1.1975277857984223, 1.1614727637626225, 1.1287603572615401, 1.0995209675432485, 1.0738711513921586, 1.0519131564994906, 1.033734513873978, 1.0194076889175956, 1.008989792557208, 1.0025223535836612, 1.0000311531058437, 1.0015261217796212, 1.0070013002213303, 1.0164348627636302, 1.0297892044590138, 1.0470110909841606, 1.0680318708475651, 1.0927677490545182, 1.1211201211385395, 1.1529759662277015, 1.188208297578979, 1.226676668784661, 1.2682277336329226, 1.3126958573908158, 1.3599037770728932, 1.4096633080634713, 1.4617760942757116, 1.5160343988571607, 1.5722219322897906, 1.630114714583454, 1.6894819681258308, 1.750087037629692, 1.8116883335102816, 1.8740402949322825, 1.9368943686873272, 1.9999999999999998, 2.9999999999999996, 2.9054201922051544, 2.8116883335102814, 2.7196447707829847, 2.6301147145834523, 2.5439008407929826, 2.4617760942757116, 2.3844767590918208, 2.312695857390814, 2.2470769361666227, 2.1882082975789787, 2.1366177245687763, 2.092767749054519, 2.0570515051325624, 2.0297892044590133, 2.0112252654129974, 2.001526121779621, 2.000778730598724, 2.008989792557208, 2.0260856919144623, 2.0519131564994906, 2.0862406318625637, 2.1287603572615406, 2.1790911248707374, 2.2367816974748314, 2.301314854006694, 2.3721120266591416, 2.4485384879968928, 2.5299090415639975, 2.615494164967989, 2.7045265503653306, 2.796207983709849, 2.889716501088725, 2.9842137579863626, 3.0788525454074764, 3.1727843854741002, 3.2651671383986787, 3.355172552633429, 3.4419936905055795, 3.524852162764469, 3.6030051071796145, 3.6757518486236087, 3.7424401809292833, 3.802472214201578, 3.8553097351604118, 3.9004790324567518, 3.9375751437008253, 3.966265486126022, 3.9862928383380027, 3.9974776464163386, 3.999719633693478, 3.9929986997786697, 3.9773751007667073, 3.9529889090158394, 3.9200587573381744, 3.8788798788614605, 3.8298214601357254, 3.773323331215339, 3.7098920223913323, 3.640096222927107, 3.564561682511918, 3.483965601142838, 3.399030557732341, 3.3105180318741683, 3.219221576847691, 3.1259597050677175, 3.0315685497648106, 2.9368943686873257, 2.8427859570327487, 2.7500870376296915, 2.6596286965958873, 2.5722219322897906, 2.4886503843576726, 2.409663308063471, 2.3359688568895685, 2.268227733632923, 2.2070472669172214, 2.152975966227701, 2.1064986042851257, 2.068031870847565, 2.037920636905537, 2.01643486276363, 2.003767177728993, 2.0000311531058435, 2.005260283979343, 2.019407688917596, 2.04234653028407, 2.073871151392159, 2.113698920306791, 2.1614727637626228, 2.21676436848111, 2.279078021185284, 2.3478550528848134, 2.422478847586411, 2.5022803705243177, 2.586544166347866, 2.6745147734897885, 2.765403497207631, 2.858395480575048, 2.952657010028443, 3.0473429899715585, 3.141604519424952, 3.234596502792369, 3.3254852265102115, 3.413455833652135, 3.4977196294756836, 3.577521152413589, 3.6521449471151866, 3.720921978814716, 3.78323563151889, 3.8385272362373777, 3.886301079693209, 3.926128848607841, 3.95765346971593, 3.980592311082404, 3.994739716020657, 3.9999688468941565, 3.996232822271007, 3.98356513723637, 3.962079363094463, 3.931968129152435, 3.893501395714874, 3.847024033772299, 3.7929527330827786, 3.731772266367077, 3.6640311431104315, 3.590336691936528, 3.5113496156423274, 3.4277780677102094, 3.340371303404112, 3.2499129623703085, 3.15721404296725, 3.0631056313126743, 2.9684314502351894, 2.874040294932281, 2.780778423152309, 2.6894819681258304, 2.60096944226766, 2.516034398857161, 2.4354383174880807, 2.359903777072893, 2.290107977608667, 2.2266766687846613, 2.170178539864274, 2.121120121138539, 2.0799412426618256, 2.0470110909841606, 2.0226248992332927, 2.0070013002213303, 2.000280366306522, 2.0025223535836614, 2.0137071616619977, 2.033734513873978, 2.062424856299175, 2.099520967543248, 2.1446902648395882, 2.197527785798423, 2.2575598190707167, 2.3242481513763917, 2.3969948928203846, 2.475147837235532, 2.558006309494422, 2.644827447366571, 2.7348328616013218, 2.8272156145258998, 2.9211474545925236, 3.0157862420136383, 3.110283498911275, 3.2037920162901528, 3.2954734496346694, 3.384505835032011, 3.4700909584360042, 3.5514615120031072, 3.627887973340859, 3.698685145993306, 3.7632183025251686, 3.8209088751292617, 3.8712396427384594, 3.913759368137437, 3.9480868435005094, 3.9739143080855377, 3.991010207442792, 3.999221269401276, 3.998473878220379, 3.9887747345870026, 3.970210795540986, 3.9429484948674376, 3.907232250945481, 3.863382275431223, 3.8117917024210213, 3.752923063833376, 3.687304142609186, 3.6155232409081792, 3.538223905724287, 3.4560991592070174, 3.3698852854165464, 3.2803552292170153, 3.1883116664897186, 3.094579807794844, 3.0000000000000004, 4.000000000000001, 4.125959705067718, 4.249912962370308, 4.369885285416548, 4.48396560114284, 4.590336691936529, 4.687304142609184, 4.773323331215339, 4.8470240337723, 4.907232250945482, 4.95298890901584, 4.98356513723637, 4.998473878220379, 4.997477646416339, 4.980592311082404, 4.948086843500509, 4.900479032456752, 4.838527236237377, 4.763218302525168, 4.675751848623609, 4.577521152413588, 4.4700909584360025, 4.355172552633428, 4.234596502792368, 4.110283498911276, 3.984213757986362, 3.8583954805750476, 3.734832861601321, 3.615494164967989, 3.5022803705243173, 3.3969948928203846, 3.301314854006693, 3.216764368481109, 3.1446902648395882, 3.0862406318625633, 3.04234653028407, 3.0137071616619973, 3.000778730598724, 3.003767177728993, 3.0226248992332927, 3.057051505132563, 3.106498604285126, 3.1701785398642746, 3.247076936166623, 3.3359688568895685, 3.4354383174880825, 3.5439008407929844, 3.6596286965958877, 3.780778423152309, 3.9054201922051552, 4.0315685497648115, 4.157214042967251, 4.280355229217015, 4.399030557732342, 4.5113496156423265, 4.61552324090818, 4.709892022391333, 4.792952733082778, 4.863382275431224, 4.920058757338174, 4.962079363094463, 4.988774734587002, 4.999719633693478, 4.994739716020657, 4.973914308085538, 4.937575143700825, 4.886301079693209, 4.820908875129262, 4.742440180929282, 4.652144947115186, 4.551461512003107, 4.441993690505579, 4.32548522651021, 4.203792016290151, 4.078852545407476, 3.952657010028442, 3.8272156145259006, 3.7045265503653306, 3.586544166347865, 3.4751478372355313, 3.372112026659141, 3.2790780211852835, 3.1975277857984223, 3.12876035726154, 3.0738711513921584, 3.033734513873978, 3.008989792557208, 3.0000311531058435, 3.0070013002213303, 3.029789204459014, 3.068031870847565, 3.1211201211385395, 3.188208297578979, 3.268227733632923, 3.3599037770728937, 3.461776094275712, 3.5722219322897906, 3.6894819681258313, 3.811688333510282, 3.9368943686873275, 4.063105631312674, 4.188311666489718, 4.310518031874169, 4.427778067710209, 4.53822390572429, 4.640096222927108, 4.731772266367077, 4.81179170242102, 4.8788798788614605, 4.931968129152435, 4.970210795540987, 4.99299869977867, 4.9999688468941565, 4.991010207442792, 4.966265486126022, 4.926128848607841, 4.871239642738459, 4.802472214201578, 4.720921978814716, 4.627887973340859, 4.524852162764469, 4.413455833652133, 4.295473449634669, 4.1727843854741, 4.0473429899715585, 3.921147454592524, 3.796207983709847, 3.6745147734897894, 3.5580063094944205, 3.448538487996891, 3.347855052884814, 3.2575598190707162, 3.1790911248707383, 3.113698920306791, 3.0624248562991743, 3.0260856919144623, 3.005260283979343, 3.000280366306522, 3.0112252654129974, 3.037920636905538, 3.0799412426618256, 3.136617724568777, 3.207047266917221, 3.2901079776086677, 3.3844767590918226, 3.4886503843576735, 3.6009694422676604, 3.7196447707829847, 3.84278595703275, 3.968431450235188, 4.094579807794845, 4.219221576847692, 4.340371303404112, 4.4560991592070165, 4.564561682511917, 4.6640311431104315, 4.752923063833378, 4.829821460135726, 4.893501395714875, 4.942948494867436, 4.977375100766707, 4.996232822271007, 4.999221269401276, 4.986292838338002, 4.95765346971593, 4.913759368137437, 4.855309735160411, 4.783235631518891, 4.698685145993306, 4.603005107179616, 4.497719629475683, 4.384505835032009, 4.265167138398679, 4.14160451942495, 4.015786242013638, 3.8897165010887247, 3.765403497207633, 3.6448274473665716, 3.5299090415639958, 3.422478847586412, 3.324248151376391, 3.2367816974748322, 3.1614727637626228, 3.099520967543248, 3.0519131564994906, 3.019407688917596, 3.0025223535836614, 3.001526121779621, 3.0164348627636306, 3.0470110909841606, 3.092767749054519, 3.1529759662277, 3.226676668784661, 3.3126958573908167, 3.4096633080634713, 3.516034398857162, 3.630114714583452, 3.750087037629692, 3.874040294932284, 3.9999999999999996]}], {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('3d7ba138-7085-41b5-89c9-7014ffbbfdc8'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; }); Download this page as a Jupyter notebook or as a standalone Python script .","title":"Grammar of graphics with Pandas"}]}